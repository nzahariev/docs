{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nencho's Docs Website","text":"<p>Look at the sidebar to see some docs.</p>"},{"location":"#grafana-dashboard","title":"Grafana Dashboard","text":"<p>To view our live dashboard, see below:</p>"},{"location":"aws/","title":"AWS CLI","text":""},{"location":"aws/#volumes","title":"Volumes","text":""},{"location":"aws/#describing-volumes","title":"Describing volumes","text":"<pre><code>aws ec2 describe-volumes\n</code></pre> <p>Describing filtered volumes:</p> <pre><code>aws ec2 describe-volumes --filters  Name=status,Values=creating | available | in-use | deleting | deleted | error\n</code></pre> <p>e.g, describing all deleted volumes:</p> <pre><code>aws ec2 describe-volumes --filters  Name=status,Values=deleted\n</code></pre> <p>Filters can be applied to the attachment status:</p> <pre><code>aws ec2 describe-volumes --filters  Name=attachment.status,Values=attaching | attached | detaching | detached\n</code></pre> <p>e.g: describing all volumes with the status \"attaching\":</p> <pre><code>aws ec2 describe-volumes --filters  Name=attachment.status,Values=attaching\n</code></pre> <p>This is the generic form. Use --profile <code>&lt;your_profile_name&gt;</code>, if you have multiple AWS profiles or accounts.</p> <pre><code>aws ec2 describe-volumes --filters Name:'tag:Name',Values: ['some_values'] --profile &lt;your_profile_name&gt;\n</code></pre>"},{"location":"aws/#describing-volumes-using-a-different-aws-user-profile","title":"Describing volumes using a different aws user profile","text":"<pre><code>aws ec2 describe-volumes --filters  Name=status,Values=in-use  --profile &lt;your_profile_name&gt;\n</code></pre>"},{"location":"aws/#listing-available-volumes-ids","title":"Listing Available Volumes IDs","text":"<pre><code>aws ec2 describe-volumes --filters  Name=status,Values=available |grep VolumeId|awk '{print $2}' | tr '\\n|,|\"' ' '\n</code></pre> <p>With \"profile\":</p> <pre><code>aws ec2 describe-volumes --filters  Name=status,Values=available  --profile &lt;your_profile_name&gt;|grep VolumeId|awk '{print $2}' | tr '\\n|,|\"' ' '\n</code></pre>"},{"location":"aws/#deleting-a-volume","title":"Deleting a Volume","text":"<pre><code>aws ec2 delete-volume --region &lt;region&gt; --volume-id &lt;volume_id&gt;\n</code></pre>"},{"location":"aws/#deleting-unused-volumes-think-before-you-type-","title":"Deleting Unused Volumes.. Think Before You Type :-)","text":"<pre><code>for x in $(aws ec2 describe-volumes --filters  Name=status,Values=available  --profile &lt;your_profile_name&gt;|grep VolumeId|awk '{print $2}' | tr ',|\"' ' '); do aws ec2 delete-volume --region &lt;region&gt; --volume-id $x; done\n</code></pre> <p>With \"profile\":</p> <pre><code>for x in $(aws ec2 describe-volumes --filters  Name=status,Values=available  --profile &lt;your_profile_name&gt;|grep VolumeId|awk '{print $2}' | tr ',|\"' ' '); do aws ec2 delete-volume --region &lt;region&gt; --volume-id $x --profile &lt;your_profile_name&gt;; done\n</code></pre>"},{"location":"aws/#creating-a-snapshot","title":"Creating a Snapshot","text":"<pre><code>aws ec2 create-snapshot --volume-id &lt;vol-id&gt;\n</code></pre> <pre><code>aws ec2 create-snapshot --volume-id &lt;vol-id&gt; --description \"snapshot-$(date +'%Y-%m-%d_%H-%M-%S')\"\n</code></pre>"},{"location":"aws/#creating-an-image-ami","title":"Creating an Image (AMI)","text":"<pre><code>aws ec2 create-image --instance-id &lt;instance_id&gt; --name \"image-$(date +'%Y-%m-%d_%H-%M-%S')\" --description \"image-$(date +'%Y-%m-%d_%H-%M-%S')\"\n</code></pre>"},{"location":"aws/#creating-ami-without-rebooting-the-machine","title":"Creating AMI Without Rebooting the Machine","text":"<pre><code>aws ec2 create-image --instance-id &lt;instance_id&gt; --name \"image-$(date +'%Y-%m-%d_%H-%M-%S')\" --description \"image-$(date +'%Y-%m-%d_%H-%M-%S')\" --no-reboot\n</code></pre> <p>You are free to change the AMI name <code>image-$(date +'%Y-%m-%d_%H-%M-%S')</code> to a name of your choice.</p>"},{"location":"aws/#amis","title":"AMIs","text":""},{"location":"aws/#listing-amis","title":"Listing AMI(s)","text":"<pre><code>aws ec2 describe-images\n</code></pre>"},{"location":"aws/#describing-amis","title":"Describing AMI(s)","text":"<pre><code>aws ec2 describe-images --image-ids &lt;image_id&gt; --profile &lt;profile&gt; --region &lt;region&gt;\n</code></pre> <p>e.g: </p> <pre><code>aws ec2 describe-images --image-ids ami-e24dfa9f --profile terraform --region eu-west-3\n</code></pre>"},{"location":"aws/#listing-amazon-amis","title":"Listing Amazon AMIs","text":"<pre><code>aws ec2 describe-images --owners amazon \n</code></pre>"},{"location":"aws/#using-filters","title":"Using Filters","text":"<p>e.g: Describing Windows AMIs that are backed by Amazon EBS.</p> <pre><code>aws ec2 describe-images --filters \"Name=platform,Values=windows\" \"Name=root-device-type,Values=ebs\"\n</code></pre> <p>e.g: Describing Ubuntu AMIs </p> <pre><code>aws ec2 describe-images --filters \"Name=name,Values=ubuntu*\"\n</code></pre>"},{"location":"aws/#lambda","title":"Lambda","text":""},{"location":"aws/#list-functions","title":"List Functions","text":"<pre><code>aws lambda list-functions\n</code></pre>"},{"location":"aws/#describe-a-function","title":"Describe a Function","text":"<pre><code>aws lambda get-function --function-name  my-function\n</code></pre>"},{"location":"aws/#invoke-a-function","title":"Invoke a Function","text":"<pre><code>aws lambda invoke --function-name my-function --payload '{ \"name\": \"Bob\" }' response.json\n</code></pre>"},{"location":"aws/#update-a-function-code","title":"Update a Function Code","text":"<pre><code>aws lambda update-function-code --function-name  my-function --zip-file fileb://my-function.zip\n</code></pre>"},{"location":"aws/#publish-a-version","title":"Publish a Version","text":"<pre><code>aws lambda publish-version --function-name my-function\n</code></pre>"},{"location":"aws/#list-layers","title":"List Layers","text":"<p>Let's take this example in which we want to list information of layers that are compatible with Python 3.7 runtime. </p> <pre><code>aws lambda list-layers --compatible-runtime python3.7\n</code></pre> <p>Possible layers runtime:</p> <pre><code>nodejs\nnodejs4.3\nnodejs6.10\nnodejs8.10\nnodejs10.x\nnodejs12.x\njava8\njava8.al2\njava11\npython2.7\npython3.6\npython3.7\npython3.8\ndotnetcore1.0\ndotnetcore2.0\ndotnetcore2.1\ndotnetcore3.1\nnodejs4.3-edge\ngo1.x\nruby2.5\nruby2.7\nprovided\nprovided.al2\n</code></pre>"},{"location":"aws/#list-aliases-of-a-function","title":"List Aliases of a Function","text":"<pre><code>aws lambda list-aliases --function-name my-function\n</code></pre>"},{"location":"aws/#describe-an-alias","title":"Describe an Alias","text":"<pre><code>aws lambda get-alias --function-name my-function --name LIVE\n</code></pre>"},{"location":"aws/#create-an-alias","title":"Create an Alias","text":"<pre><code>aws lambda create-alias --function-name my-function --description \"alias description goes here\" --function-version 1 --name LIVE\n</code></pre>"},{"location":"aws/#delete-an-alias","title":"Delete an Alias","text":"<pre><code>aws lambda delete-alias --function-name my-function --name LIVE\n</code></pre>"},{"location":"aws/#list-function-tags","title":"List Function Tags","text":"<pre><code>aws lambda list-tags --resource arn:aws:lambda:eu-west-1:xxxxxxxxxxx:function:my-function\n</code></pre>"},{"location":"aws/#delete-a-function","title":"Delete a Function","text":"<pre><code>aws lambda delete-function --function-name my-function\n</code></pre>"},{"location":"aws/#using-aws-lambda-with-scheduled-events","title":"Using AWS Lambda with Scheduled Events","text":"<pre><code>sid=Sid$(date +%Y%m%d%H%M%S); aws lambda add-permission --statement-id $sid --action 'lambda:InvokeFunction' --principal events.amazonaws.com --source-arn arn:aws:events:&lt;region&gt;:&lt;arn&gt;:rule/AWSLambdaBasicExecutionRole --function-name function:&lt;awsents&gt; --region &lt;region&gt;\n</code></pre>"},{"location":"aws/#_1","title":"AWS CLI","text":""},{"location":"aws/#iam","title":"IAM","text":""},{"location":"aws/#list-users","title":"List Users","text":"<pre><code>aws iam list-users\n</code></pre>"},{"location":"aws/#list-policies","title":"List Policies","text":"<pre><code>aws iam list-policies\n</code></pre>"},{"location":"aws/#list-groups","title":"List Groups","text":"<pre><code>aws iam list-groups\n</code></pre>"},{"location":"aws/#get-users-in-a-group","title":"Get Users in a  Group","text":"<pre><code>aws iam get-group --group-name &lt;group_name&gt;\n</code></pre>"},{"location":"aws/#describing-a-policy","title":"Describing a Policy","text":"<pre><code>aws iam get-policy --policy-arn arn:aws:iam::aws:policy/&lt;policy_name&gt;\n</code></pre>"},{"location":"aws/#list-access-keys","title":"List Access Keys","text":"<pre><code>aws iam list-access-keys\n</code></pre>"},{"location":"aws/#list-keys","title":"List Keys","text":"<pre><code>aws iam list-access-keys\n</code></pre>"},{"location":"aws/#list-the-access-key-ids-for-an-iam-user","title":"List the Access Key IDs for an IAM User","text":"<pre><code>aws iam list-access-keys --user-name &lt;user_name&gt;\n</code></pre>"},{"location":"aws/#list-the-ssh-public-keys-for-a-user","title":"List the SSH Public Keys for a User","text":"<pre><code>aws iam list-ssh-public-keys --user-name &lt;user_name&gt;\n</code></pre>"},{"location":"aws/#s3-api","title":"S3 API","text":""},{"location":"aws/#listing-buckets","title":"Listing Buckets","text":"<pre><code>aws s3api list-buckets\n</code></pre> <p>Or</p> <pre><code>aws s3 ls\n</code></pre> <p>e.g</p> <pre><code>aws s3 ls --profile eon01\n</code></pre>"},{"location":"aws/#listing-only-bucket-names","title":"Listing Only Bucket Names","text":"<pre><code>aws s3api list-buckets --query 'Buckets[].Name'\n</code></pre>"},{"location":"aws/#getting-a-bucket-region","title":"Getting a Bucket Region","text":"<pre><code>aws s3api get-bucket-location --bucket &lt;bucket_name&gt;\n</code></pre> <p>e.g</p> <pre><code>aws s3api get-bucket-location --bucket practicalaws.com\n</code></pre>"},{"location":"aws/#listing-the-content-of-a-bucket","title":"Listing the Content of a Bucket","text":"<pre><code>aws s3 ls s3://&lt;bucket_name&gt; --region &lt;region&gt;\n</code></pre> <p>e.g</p> <pre><code>aws s3 ls s3://practicalaws.com\n\naws s3 ls s3://practicalaws.com --region eu-west-1\n\naws s3 ls s3://practicalaws.com --region eu-west-1 --profile eon01\n</code></pre>"},{"location":"aws/#syncing-a-local-folder-with-a-bucket","title":"Syncing a Local Folder with a Bucket","text":"<pre><code>aws s3 sync &lt;local_path&gt; s3://&lt;bucket_name&gt; \n</code></pre> <p>e.g</p> <pre><code>aws s3 sync . s3://practicalaws.com --region eu-west-1\n</code></pre>"},{"location":"aws/#copying-files","title":"Copying Files","text":"<pre><code>aws s3 cp &lt;file_name&gt; s3://&lt;bucket_name&gt;\n</code></pre> <p>Or:</p> <pre><code>aws s3 cp &lt;file_name&gt; s3://&lt;bucket_name&gt;/&lt;folder_name&gt;/\n</code></pre> <p>To copy all files from a filder, look at \"Copying Folders\". Or use the following example, where I copy the content of the folder \"images (contains images) in the remote folder \"images\".</p> <pre><code>cd images\naws s3 cp . s3://saltstackfordevops.com/images --recursive --region us-east-2\n</code></pre>"},{"location":"aws/#copying-folders","title":"Copying Folders","text":"<pre><code>aws s3 cp &lt;folder_name&gt;/ s3://&lt;bucket_name&gt;/ --recursive\n</code></pre> <p>To exclude files:</p> <pre><code>aws s3 cp &lt;folder_name&gt;/ s3://&lt;bucket_name&gt;/ --recursive --exclude \"&lt;file_name_or_a_wildcard&gt;\" \n</code></pre> <p>e.g: To only include a certain type of files (PNG) and exclude others (JPG)</p> <pre><code>aws s3 cp practicalaws.com/ s3://practicalaws-backup/  --recursive --exclude \"*.jpg\"  --include \"*.png\"\n</code></pre> <p>e.g: To exclude a folder</p> <pre><code>aws s3 cp practicalaws.com/ s3://practicalaws-backup/ --recursive --exclude \".git/*\" \n</code></pre>"},{"location":"aws/#removing-a-file-from-a-bucket","title":"Removing a File from a Bucket","text":"<pre><code>aws s3 rm s3://&lt;bucket_name&gt;/&lt;object_name&gt;\n</code></pre> <p>e.g</p> <pre><code>aws s3 rm s3://practicalaws.com/temp.txt\n</code></pre>"},{"location":"aws/#deleting-a-bucket","title":"Deleting a Bucket","text":"<pre><code>aws s3 rb s3://&lt;bucket_name&gt; --force\n</code></pre> <p>If the bucket is not empty, use --force.</p> <p>e.g</p> <pre><code>aws s3 rb s3://practicalaws.com --force  \n</code></pre>"},{"location":"aws/#emptying-a-bucket","title":"Emptying a Bucket","text":"<pre><code>aws s3 rm s3://&lt;bucket_name&gt;/&lt;key_name&gt; --recursive\n</code></pre> <p>e.g</p> <p>In order to remove tempfiles/file1.txt and tempfiles/file2.txt from practicalaws.com bucket, use:</p> <pre><code>aws s3 rm s3://practicalaws.com/tempfiles --recursive\n</code></pre> <p>Remove all objects using:</p> <pre><code>aws s3 rm s3://practicalaws.com/tempfiles\n</code></pre>"},{"location":"aws/#making-a-public-file-private","title":"Making a Public File Private","text":"<pre><code>aws s3api put-object-acl --acl private --bucket &lt;bucket-name&gt; --key &lt;file_name or file_path&gt;\n</code></pre> <p>e.g:</p> <pre><code>aws s3api put-object-acl --acl private --bucket practicalaws.com --key image/logo.png\n</code></pre>"},{"location":"aws/#making-a-public-bucket-private","title":"Making a Public bucket Private","text":"<pre><code>aws s3 ls --recursive s3://&lt;bucket-name&gt; | cut -d' ' -f5- | awk '{print $NF}' | while read line; do\n    echo \"$line\"\n    aws s3api put-object-acl --acl private --bucket &lt;bucket-name&gt; --key \"$line\"\ndone\n</code></pre>"},{"location":"aws/#vpc","title":"VPC","text":""},{"location":"aws/#creating-a-vpc","title":"Creating A VPC","text":"<pre><code>aws ec2 create-vpc --cidr-block &lt;cidr_block&gt; --regiosn &lt;region&gt;\n</code></pre> <p>e.g</p> <pre><code>aws ec2 create-vpc --cidr-block 10.0.0.0/16 --region eu-west-1\n</code></pre>"},{"location":"aws/#allowing-dns-hostnames","title":"Allowing DNS hostnames","text":"<pre><code>aws ec2 modify-vpc-attribute --vpc-id &lt;vpc_id&gt; --enable-dns-hostnames \"{\\\"Value\\\":true}\" --region &lt;region&gt;\n</code></pre>"},{"location":"aws/#subnets","title":"Subnets","text":""},{"location":"aws/#creating-a-subnet","title":"Creating A Subnet","text":"<pre><code>aws ec2 create-subnet --vpc-id &lt;vpc_id&gt; --cidr-block &lt;cidr_block&gt; --availability-zone &lt;availability_zone&gt; --region &lt;region&gt;\n</code></pre>"},{"location":"aws/#auto-assigning-public-ips-to-instances-in-a-public-subnet","title":"Auto Assigning Public IPs To Instances In A Public Subnet","text":"<pre><code>aws ec2 modify-subnet-attribute --subnet-id &lt;subnet_id&gt; --map-public-ip-on-launch --region &lt;region&gt;\n</code></pre>"},{"location":"aws/#internet-gateway","title":"Internet Gateway","text":""},{"location":"aws/#creating-an-igw","title":"Creating An IGW","text":"<pre><code>aws ec2 create-internet-gateway --region &lt;region&gt;\n</code></pre>"},{"location":"aws/#attaching-an-igw-to-a-vpc","title":"Attaching An IGW to A VPC","text":"<pre><code>aws ec2 attach-internet-gateway --internet-gateway-id &lt;igw_id&gt; --vpc-id &lt;vpc_id&gt; --region &lt;region&gt;\n</code></pre>"},{"location":"aws/#nat","title":"NAT","text":""},{"location":"aws/#setting-up-a-nat-gateway","title":"Setting Up A NAT Gateway","text":"<p>Allocate Elastic IP</p> <pre><code>aws ec2 allocate-address --domain vpc --region &lt;region&gt; \n</code></pre> <p>then use the AllocationId to create the NAT Gateway for the public zone in  <pre><code>aws ec2 create-nat-gateway --subnet-id &lt;subnet_id&gt; --allocation-id &lt;allocation_id&gt; --region &lt;region&gt; \n</code></pre>"},{"location":"aws/#route-tables","title":"Route Tables","text":""},{"location":"aws/#creating-a-public-route-table","title":"Creating A Public Route Table","text":"<p>Create the Route Table: </p> <pre><code>aws ec2 create-route-table --vpc-id &lt;vpc_id&gt; --region &lt;region&gt; \n</code></pre> <p>then create a route for an Internet Gateway. </p> <p>Now, use the outputted Route Table ID: </p> <pre><code>aws ec2 create-route --route-table-id &lt;route_table_id&gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &lt;igw_id&gt; --region &lt;region&gt; \n</code></pre> <p>Finally, associate the public subnet with the Route Table</p> <pre><code>aws ec2 associate-route-table --route-table-id &lt;route_table_id&gt; --subnet-id &lt;subnet_id&gt; --region &lt;region&gt;\n</code></pre>"},{"location":"aws/#creating-a-private-route-tables","title":"Creating A Private Route Tables","text":"<p>Create the Route Table</p> <pre><code>aws ec2 create-route-table --vpc-id &lt;vpc_id&gt; --region &lt;region&gt; \n</code></pre> <p>then create a route that points to a NAT Gateway </p> <pre><code>aws ec2 create-route --route-table-id &lt;route_table_id&gt; --destination-cidr-block 0.0.0.0/0 --nat-gateway-id &lt;net_gateway_id&gt; --region &lt;region&gt; \n</code></pre> <p>Finally, associate the subnet </p> <pre><code>aws ec2 associate-route-table --route-table-id &lt;route_table_id&gt; --subnet-id &lt;subnet_id&gt; --region &lt;region&gt; \n</code></pre>"},{"location":"aws/#cloudfront","title":"CloudFront","text":""},{"location":"aws/#listing-distributions","title":"Listing Distributions","text":"<p>In some cases, you need to setup this first:</p> <pre><code>aws configure set preview.cloudfront true\n</code></pre> <p>Then:</p> <pre><code>aws cloudfront list-distributions\n</code></pre>"},{"location":"aws/#invalidating-files-from-a-distribution","title":"Invalidating Files From a Distribution","text":"<p>To invalidate index and error HTML files from the distribution with the ID Z2W2LX9VBMAPRX:</p> <pre><code>aws cloudfront create-invalidation --distribution-id Z2W2LX9VBMAPRX  --paths /index.html /error.html\n</code></pre> <p>To invalidate everything in the distribution:</p> <pre><code>aws cloudfront create-invalidation --distribution-id Z2W2LX9VBMAPRX  --paths '/*'\n</code></pre>"},{"location":"aws/#sync-a-local-folder-with-a-cloudfront-distribution","title":"Sync a Local Folder with a CLoudFront Distribution","text":"<p>CloudFront is \"attached\" to a bucket, you need to upload your files to the bucket. </p> <p>e.g.:</p> <pre><code>aws s3 sync . s3://my-bucket.com\n</code></pre> <p>If you should keep the files public:</p> <pre><code>aws s3 sync . s3://my-bucket.com --acl public-read\n</code></pre> <p>To copy a single file, you need to:</p> <pre><code>aws s3 cp file1 s3://my-bucket.com/sub-folder/ --acl &lt;ACL&gt;\n</code></pre>"},{"location":"aws/#sync-and-invalidate-at-the-same-time","title":"Sync and Invalidate at the Same Time:","text":"<pre><code>aws s3 sync . s3://my-bucket.com --acl public-read &amp;&amp; aws cloudfront create-invalidation --distribution-id Z2W2LX9VBMAPRX  --paths '/*'\n</code></pre> <p>or in case you want to update a single file:</p> <pre><code>aws s3 cp file1 s3://my-bucket.com/sub-folder/ --acl public-read &amp;&amp; aws cloudfront create-invalidation --distribution-id Z2W2LX9VBMAPRX  --paths '/sub-folder/file1'\n</code></pre>"},{"location":"aws/#rds","title":"RDS","text":""},{"location":"aws/#list-databases","title":"List Databases","text":"<pre><code>aws rds describe-db-instances\n</code></pre> <p>or:</p> <pre><code>aws rds describe-db-instances --query 'DBInstances[].DBInstanceIdentifier'\n</code></pre>"},{"location":"aws/#list-public-databases","title":"List Public Databases","text":"<pre><code>aws rds describe-db-instances --query 'DBInstances[?PubliclyAccessible==\"true\"].[DBInstanceIdentifier,Endpoint.Address]'\n</code></pre>"},{"location":"aws/#list-non-protected-databases-deletionprotection","title":"List Non Protected Databases (DeletionProtection)","text":"<pre><code>aws rds describe-db-instances \\\n    --query 'DBInstances[*].[DBInstanceIdentifier]' \\\n    --output text \\\n    | xargs -I {} bash -c 'if [[ $(aws rds describe-db-instances --db-instance-identifier {} --query '\"'\"'DBInstances[*].DeletionProtection'\"'\"' --output text) == False ]]; then echo {} ; fi'\n</code></pre>"},{"location":"aws/#describe-the-automated-backups-for-a-db-instance","title":"Describe the Automated Backups for a DB Instance","text":"<pre><code>aws rds describe-db-instance-automated-backups --db-instance-identifier database-mysql\n</code></pre>"},{"location":"aws/#create-a-db-cluster","title":"Create a DB Cluster","text":"<pre><code>aws rds create-db-cluster \\\n    --db-cluster-identifier mysql-cluster \\\n    --engine aurora-mysql \\\n    --engine-version 5.7.12 \\\n    --master-username master \\\n    --master-user-password xxxxxx \\\n    --db-subnet-group-name default \\\n    --vpc-security-group-ids sg-0130572b9daf3dc16\n</code></pre>"},{"location":"aws/#create-a-db-instance","title":"Create a DB Instance","text":"<pre><code>aws rds create-db-instance \\\n    --db-instance-identifier mysql-instance \\\n    --db-instance-class db.t3.micro \\\n    --engine mysql \\\n    --master-username admin \\\n    --master-user-password xxxxx \\\n    --allocated-storage 40\n</code></pre>"},{"location":"aws/#create-a-db-security-group","title":"Create a DB Security Group","text":"<pre><code>aws rds create-db-security-group --db-security-group-name my-security-group --db-security-group-description \"My Security Group\"\n</code></pre>"},{"location":"aws/#create-a-read-replica","title":"Create a Read Replica","text":"<pre><code>aws rds create-db-instance-read-replica \\\n    --db-instance-identifier test-instance-repl \\\n    --source-db-instance-identifier test-instance\n</code></pre>"},{"location":"aws/#create-a-custom-db-cluster-endpoint","title":"Create a Custom DB Cluster Endpoint","text":"<pre><code>aws rds create-db-cluster-endpoint \\\n    --db-cluster-endpoint-identifier mycustomendpoint \\\n    --endpoint-type reader \\\n    --db-cluster-identifier mydbcluster \\\n    --static-members dbinstance1 dbinstance2\n</code></pre>"},{"location":"aws/#apply-tag-to-a-db","title":"Apply Tag to a DB","text":"<pre><code>aws rds add-tags-to-resource \\\n    --resource-name arn:aws:rds:us-east-1:123456789012:db:database-mysql \\\n    --tags \"[{\\\"Key\\\": \\\"Name\\\",\\\"Value\\\": \\\"MyDatabase\\\"},{\\\"Key\\\": \\\"Environment\\\",\\\"Value\\\": \\\"test\\\"}]\"\n</code></pre>"},{"location":"aws/#create-a-cluster-snapshot","title":"Create a Cluster Snapshot","text":"<pre><code>aws rds create-db-cluster-snapshot --db-cluster-identifier my-db-cluster --db-cluster-snapshot-identifier my-db-cluster-snapshot\n</code></pre>"},{"location":"aws/#create-a-cloudwatch-alarm-for-a-db-instance","title":"Create a CloudWatch Alarm for a DB Instance","text":"<p>e.g.:  When average CPU for latest 15 minutes is above 90%</p> <pre><code>aws cloudwatch put-metric-alarm \\\n    --alarm-name \"my-alarm\" \\\n    --metric-name \"CPUUtilization\" \\\n    --namespace \"AWS/RDS\" \\\n    --statistic \"Average\" \\\n    --period 300 \\\n    --evaluation-periods 3 \\\n    --threshold 90.0 \\\n    --comparison-operator \"GreaterThanOrEqualToThreshold\" \\\n    --dimensions \"Name=DBInstanceIdentifier,Value=my-db-instance\" \\\n    --alarm-actions \"&lt;arn of sns resource&gt;\"\n</code></pre> <p>This will monitor the DB instance during a period of 300 seconds (5 minutes) during 3 evaluation periods: 5*3 = 15 minutes.</p> <p>If in the three periods, the average is equal or more than 90%, then the alarm will trigger the SNS resource.</p> <p>You should subscribe to the SNS resource you create by email or SMS.</p>"},{"location":"bash/","title":"Shell Scripting","text":""},{"location":"bash/#print-data-or-text-on-the-screen","title":"print data or text on the screen","text":"<p><code>echo \"Hello, world!\"</code></p>"},{"location":"bash/#variables-print-out-them","title":"Variables &amp; Print out them","text":"<pre><code>NAME = \"Nencho\"\necho \"My name is $NAME\"\n</code></pre> <p>or you can use this</p> <pre><code>NAME = \"Nencho\"\necho \"My name is ${NAME}\"\n</code></pre>"},{"location":"bash/#get-data-from-user","title":"Get Data From User","text":"<pre><code>read -p \"Enter your name: \" NAME\necho \"Hello, $NAME!\"\n</code></pre>"},{"location":"bash/#if-statement","title":"If Statement","text":"<p>The simple if statement syntax of bash script:</p> <pre><code>if [\"$NAME\" == \"Nencho\"]\nthen\n    echo \"Yourname is Nencho!\"\nfi\n</code></pre> <p>NOTE THAT: the end of if is fi the reverse letters of if.</p> <p>The if else statement syntax in bash script:</p> <pre><code>if [\"$NAME\" == \"Nencho\"]\nthen\n    echo \"Yourname is Nencho!\"\nelse\n    echo \"Yourname is NOT Nencho\"\nfi\n</code></pre> <p>The else if (elif) condition statement syntax in bash scripting:</p> <pre><code>if [\"$NAME\" == \"Nencho\"]\nthen\n    echo \"Yourname is Nencho!\"\nelif [\"$NAME\" == \"Jack\"]\nthen\n    echo \"Yourname is Jack!\"\nelse\n    echo \"Yourname is NOT Nencho NOR Jack!\"\nfi\n</code></pre>"},{"location":"bash/#logic-comparisons","title":"Logic Comparisons","text":"<p>You can use those operators:</p> Logic Operator Meaning -eq equal to (the same meaning of == in other programming languages) -ne not equal (the same meaning of != in other programming languages) -gt greater then (the same meaning of &gt; in other programming languages) -ge greater than or equal to (the same meaning of &gt;= in other programming languages) -lt less than (the same meaning of &lt; in other programming languages) -le less than or equal to (the same meaning of &lt;= in other programming language) <p>and use them like this:</p> <pre><code>NUM1 = 3\nNUM2 = 5\nif [\"$NUM!\" -gt \"$NUM2\"]\nthen\n    echo \"$NUM1 is greater then $NUM2\"\nfi\n</code></pre>"},{"location":"bash/#file-conditions","title":"File Conditions","text":"<p>these are the file condition flags:</p> symbol meaning -d is directory? -e exists? (usually we use -f instead) -f a file? -g is group id set? -r readable? -s non-zero size? -u user id is set? -w writable? -x executable? <p>and use them like this:</p> <pre><code>FILE = \"test.txt\"\nif [ -f \"$FILE\" ]\nthen\n    echo \"$FILE is a file\"\nelse\n    echo \"$FILE is NOT a file\"\nfi\n</code></pre>"},{"location":"bash/#case-statement","title":"Case Statement","text":"<p>Case is called switch case in other languages, and some modern languages call it when case such as Kotlin programming language.</p> <p>Here is the case statement in bash scripting:</p> <pre><code>read -p \"Are you 25? Y/N\" ANSWER\ncase \"$ANSWER\" in\n    [yY]|[yY][eE][sS])\n        echo \"Your age is mine :)\"\n        ;;\n    [nN]|[nN][oO])\n        echo \"Nooo, your age is different than mine :(\"\n        ;;\n    *)\n        echo \"Please enter y/yes or n/no\"\n        ;;\n    esac\n</code></pre> <p>Note that: </p> <p><code>[nN]</code> is a way of giving two probabilities small n or capital N.</p> <p><code>[yY][eE][sS]</code> is the word yes or YES or any combination of small and capital letters to compose a YeS word.</p> <p><code>*)</code> this is the default option in the case statement which is called default in other programming languages.</p> <p><code>esac</code> is the closing of the case statement as it is the reversed letters of <code>case</code> . This is the way of ending statements in bash script.</p>"},{"location":"bash/#for-loop","title":"For Loop","text":"<pre><code>NAMES = \"Nencho Jack John Smith\"\nfor NAME in $NAMES\n    do\n    echo \"Hello, $NAME\"\ndone\n</code></pre> <p>Here is a script to rename all text files <code>*.txt</code> at once by a script:</p> <pre><code>FILES = $(ls *.txt)\nNEW = \"new\"\nfor FILE in $FILES\n    do\n    echo \"Renaming $FILE to new-$FILE\"\n    mv $FILE $NEW-$FILE\ndone\n</code></pre>"},{"location":"bash/#while-loop","title":"While Loop","text":"<p>Here is a while loop to read <code>nfile.txt</code> line by line.</p> <pre><code>LINE = 1\nwhile read -r CURRENT_LINE\n    do\n    echo \"$LINE: $CURRENT_LINE\"\n    ((LINE++))\ndone &lt; \"./nfile.txt\"\n</code></pre>"},{"location":"bash/#bash-script-function-syntax","title":"Bash Script Function Syntax","text":"<pre><code>function sayHello(){\n    echo \"Hello, World!\"\n}\nsayHello\n</code></pre> <p>We created a function to print out <code>Hello, World!</code> and call it to occur!</p>"},{"location":"bash/#bash-script-functions-with-parameters","title":"Bash Script Functions with Parameters","text":"<p>Here is how to write a functions with params in NAMES = \"Nencho Jack John Smith\"bash scripting:</p> <pre><code>function greet(){\n    echo \"Hello, I am $1 and I am $2\"\n}\ngreet \"Nencho\" \"25\"\n</code></pre> <p>The <code>$1</code> is the first parameter, and <code>$2</code> is the second parameter. So when we call the function, we should specify the two parameters in the same order like this <code>greet \"Nencho\" \"25\"</code>. This means that <code>\"Nencho\"</code> is the first param <code>$1</code> and <code>\"25\"</code>  is the second param <code>$2</code>.</p>"},{"location":"demo-md/","title":"Markdown Cheatsheet in .md file","text":"<p>From: adam-p/markdown-here</p>"},{"location":"demo-md/#headers","title":"Headers","text":"<pre><code># H1\n\n## H2\n\n### H3\n\n#### H4\n\n##### H5\n\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\n# Alt-H1\n\n## Alt-H2\n</code></pre>"},{"location":"demo-md/#h1","title":"H1","text":""},{"location":"demo-md/#h2","title":"H2","text":""},{"location":"demo-md/#h3","title":"H3","text":""},{"location":"demo-md/#h4","title":"H4","text":""},{"location":"demo-md/#h5","title":"H5","text":""},{"location":"demo-md/#h6","title":"H6","text":"<p>Alternatively, for H1 and H2, an underline-ish style:</p>"},{"location":"demo-md/#alt-h1","title":"Alt-H1","text":""},{"location":"demo-md/#alt-h2","title":"Alt-H2","text":""},{"location":"demo-md/#emphasis","title":"Emphasis","text":"<pre><code>Emphasis, aka italics, with _asterisks_ or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or **underscores**.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n</code></pre> <p>Emphasis, aka italics, with asterisks or underscores.</p> <p>Strong emphasis, aka bold, with asterisks or underscores.</p> <p>Combined emphasis with asterisks and underscores.</p> <p>Strikethrough uses two tildes. ~~Scratch this.~~</p>"},{"location":"demo-md/#lists","title":"Lists","text":"<p>(In this example, leading and trailing spaces are shown with with dots: \u22c5)</p> <pre><code>1. First ordered list item\n2. Another item\n   \u22c5\u22c5\\* Unordered sub-list.\n3. Actual numbers don't matter, just that it's a number\n   \u22c5\u22c51. Ordered sub-list\n4. And another item.\n\n\u22c5\u22c5\u22c5You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n\u22c5\u22c5\u22c5To have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5\n\u22c5\u22c5\u22c5Note that this line is separate, but within the same paragraph.\u22c5\u22c5\n\u22c5\u22c5\u22c5(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\nBreak\n\n-   Unordered list can use asterisks\n\n*   Or minuses\n\n-   Or pluses\n</code></pre> <ol> <li>First ordered list item</li> <li>Another item    \u22c5\u22c5* Unordered sub-list.</li> <li>Actual numbers don't matter, just that it's a number    \u22c5\u22c51. Ordered sub-list</li> <li> <p>And another item.</p> <p>You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).</p> <p>To have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5 Note that this line is separate, but within the same paragraph.\u22c5\u22c5 (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> </li> </ol> <p>Break</p> <ul> <li> <p>Unordered list can use asterisks</p> </li> <li> <p>Or minuses</p> </li> <li> <p>Or pluses</p> </li> </ul>"},{"location":"demo-md/#links","title":"Links","text":"<p>There are two ways to create links.</p> <pre><code>[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or &lt;http://www.example.com&gt; and sometimes\nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n</code></pre> <p>I'm an inline-style link</p> <p>I'm an inline-style link with title</p> <p>I'm a reference-style link</p> <p>I'm a relative reference to a repository file</p> <p>You can use numbers for reference-style link definitions</p> <p>Or leave it empty and use the link text itself.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p>"},{"location":"demo-md/#images","title":"Images","text":"<pre><code>Here's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\"\n</code></pre> <p>Here's our logo (hover to see the title text):</p> <p>Inline-style: </p> <p>Reference-style: </p>"},{"location":"demo-md/#code-and-syntax-highlighting","title":"Code and Syntax Highlighting","text":"<p>Code blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and Markdown Here -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the highlight.js demo page.</p> <pre><code>Inline `code` has `back-ticks around` it.\n</code></pre> <p>Inline <code>code</code> has <code>back-ticks around</code> it.</p> <p>Blocks of code are either fenced by lines with three back-ticks ```, or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.</p> <pre><code>```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n```\n\n```python\ns = \"Python syntax highlighting\"\nprint s\n```\n\n```\nNo language indicated, so no syntax highlighting.\nBut let's throw in a &lt;b&gt;tag&lt;/b&gt;.\n```\n</code></pre> <pre><code>var s = \"JavaScript syntax highlighting\";\nalert(s);\n</code></pre> <pre><code>s = \"Python syntax highlighting\"\nprint s\n</code></pre> <pre><code>No language indicated, so no syntax highlighting.\nBut let's throw in a &lt;b&gt;tag&lt;/b&gt;.\n</code></pre>"},{"location":"demo-md/#footnotes","title":"Footnotes","text":"<p>Footnotes aren't part of the core Markdown spec, but they supported by GFM.</p> <pre><code>Here is a simple footnote[^1].\n\nA footnote can also have multiple lines[^2].\n\nYou can also use words, to fit your writing style more closely[^note].\n\n[^1]: My reference.\n[^2]:\n    Every new line should be prefixed with 2 spaces.\n    This allows you to have a footnote with multiple lines.\n\n[^note]:\n    Named footnotes will still render with numbers instead of the text but allow easier identification and linking.\n    This footnote also has been made with a different syntax using 4 spaces for new lines.\n</code></pre> <p>Here is a simple footnote[^1].</p> <p>A footnote can also have multiple lines[^2].</p> <p>You can also use words, to fit your writing style more closely[^note].</p> <p>[^1]: My reference. [^2]:     Every new line should be prefixed with 2 spaces.     This allows you to have a footnote with multiple lines.</p> <p>[^note]:     Named footnotes will still render with numbers instead of the text but allow easier identification and linking.     This footnote also has been made with a different syntax using 4 spaces for new lines.</p>"},{"location":"demo-md/#tables","title":"Tables","text":"<p>Tables aren't part of the core Markdown spec, but they are part of GFM and Markdown Here supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application.</p> <pre><code>Colons can be used to align columns.\n\n| Tables        |      Are      |  Cool |\n| ------------- | :-----------: | ----: |\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      |   centered    |   $12 |\n| zebra stripes |   are neat    |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don't need to make the\nraw Markdown line up prettily. You can also use inline Markdown.\n\n| Markdown | Less      | Pretty     |\n| -------- | --------- | ---------- |\n| _Still_  | `renders` | **nicely** |\n| 1        | 2         | 3          |\n</code></pre> <p>Colons can be used to align columns.</p> Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> Markdown Less Pretty Still <code>renders</code> nicely 1 2 3"},{"location":"demo-md/#blockquotes","title":"Blockquotes","text":"<pre><code>&gt; Blockquotes are very handy in email to emulate reply text.\n&gt; This line is part of the same quote.\n\nQuote break.\n\n&gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can _put_ **Markdown** into a blockquote.\n</code></pre> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> <p>Quote break.</p> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote.</p>"},{"location":"demo-md/#inline-html","title":"Inline HTML","text":"<p>You can also use raw HTML in your Markdown, and it'll mostly work pretty well.</p> <pre><code>&lt;dl&gt;\n  &lt;dt&gt;Definition list&lt;/dt&gt;\n  &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;\n\n  &lt;dt&gt;Markdown in HTML&lt;/dt&gt;\n  &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;\n&lt;/dl&gt;\n</code></pre> Definition list Is something people use sometimes. Markdown in HTML Does *not* work **very** well. Use HTML tags."},{"location":"demo-md/#horizontal-rule","title":"Horizontal Rule","text":"<pre><code>Three or more...\n\n---\n\nHyphens\n\n---\n\nAsterisks\n\n---\n\nUnderscores\n</code></pre> <p>Three or more...</p> <p>Hyphens</p> <p>Asterisks</p> <p>Underscores</p>"},{"location":"demo-md/#line-breaks","title":"Line Breaks","text":"<p>My basic recommendation for learning how line breaks work is to experiment and discover -- hit  once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. \"Markdown Toggle\" is your friend. <p>Here are some things to try out:</p> <pre><code>Here's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a _separate paragraph_.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the _same paragraph_.\n</code></pre> <p>Here's a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a separate paragraph.</p> <p>This line is also a separate paragraph, but... This line is only separated by a single newline, so it's a separate line in the same paragraph.</p>"},{"location":"demo-md/#youtube-videos","title":"YouTube Videos","text":"<p>They can't be added directly but you can add an image with a link to the video like this:</p> <pre><code>&lt;a href=\"http://www.youtube.com/watch?feature=player_embedded&amp;v=YOUTUBE_VIDEO_ID_HERE\n\" target=\"_blank\"&gt;&lt;img src=\"http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg\"\nalt=\"IMAGE ALT TEXT HERE\" width=\"240\" height=\"180\" border=\"10\" /&gt;&lt;/a&gt;\n</code></pre> <p>Or, in pure Markdown, but losing the image sizing and border:</p> <pre><code>[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)\n</code></pre>"},{"location":"demo-nb-md/","title":"Markdown Cheatsheet in a Notebook","text":""},{"location":"demo-nb-md/#markdown-cheatsheet-in-a-notebook","title":"Markdown Cheatsheet in a Notebook\u00b6","text":"<p>From: adam-p/markdown-here</p>"},{"location":"demo-nb-md/#headers","title":"Headers\u00b6","text":"<pre># H1\n\n## H2\n\n### H3\n\n#### H4\n\n##### H5\n\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\n# Alt-H1\n\n## Alt-H2\n</pre>"},{"location":"demo-nb-md/#h1","title":"H1\u00b6","text":""},{"location":"demo-nb-md/#h2","title":"H2\u00b6","text":""},{"location":"demo-nb-md/#h3","title":"H3\u00b6","text":""},{"location":"demo-nb-md/#h4","title":"H4\u00b6","text":""},{"location":"demo-nb-md/#h5","title":"H5\u00b6","text":""},{"location":"demo-nb-md/#h6","title":"H6\u00b6","text":"<p>Alternatively, for H1 and H2, an underline-ish style:</p>"},{"location":"demo-nb-md/#alt-h1","title":"Alt-H1\u00b6","text":""},{"location":"demo-nb-md/#alt-h2","title":"Alt-H2\u00b6","text":""},{"location":"demo-nb-md/#emphasis","title":"Emphasis\u00b6","text":"<pre>Emphasis, aka italics, with _asterisks_ or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or **underscores**.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n</pre> <p>Emphasis, aka italics, with asterisks or underscores.</p> <p>Strong emphasis, aka bold, with asterisks or underscores.</p> <p>Combined emphasis with asterisks and underscores.</p> <p>Strikethrough uses two tildes. Scratch this.</p>"},{"location":"demo-nb-md/#lists","title":"Lists\u00b6","text":"<p>(In this example, leading and trailing spaces are shown with with dots: \u22c5)</p> <pre>1. First ordered list item\n2. Another item\n   \u22c5\u22c5\\* Unordered sub-list.\n3. Actual numbers don't matter, just that it's a number\n   \u22c5\u22c51. Ordered sub-list\n4. And another item.\n\n\u22c5\u22c5\u22c5You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n\u22c5\u22c5\u22c5To have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5\n\u22c5\u22c5\u22c5Note that this line is separate, but within the same paragraph.\u22c5\u22c5\n\u22c5\u22c5\u22c5(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n-   Unordered list can use asterisks\n\n*   Or minuses\n\n-   Or pluses\n</pre> <ol> <li>First ordered list item</li> <li>Another item \u22c5\u22c5* Unordered sub-list.</li> <li>Actual numbers don't matter, just that it's a number \u22c5\u22c51. Ordered sub-list</li> <li>And another item.</li> </ol> <p>\u22c5\u22c5\u22c5You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).</p> <p>\u22c5\u22c5\u22c5To have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5 \u22c5\u22c5\u22c5Note that this line is separate, but within the same paragraph.\u22c5\u22c5 \u22c5\u22c5\u22c5(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li>Unordered list can use asterisks</li> </ul> <ul> <li>Or minuses</li> </ul> <ul> <li>Or pluses</li> </ul>"},{"location":"demo-nb-md/#links","title":"Links\u00b6","text":"<p>There are two ways to create links.</p> <pre>[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or &lt;http://www.example.com&gt; and sometimes\nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n</pre> <p>I'm an inline-style link</p> <p>I'm an inline-style link with title</p> <p>I'm a reference-style link</p> <p>I'm a relative reference to a repository file</p> <p>You can use numbers for reference-style link definitions</p> <p>Or leave it empty and use the link text itself.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p>"},{"location":"demo-nb-md/#images","title":"Images\u00b6","text":"<pre>Here's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\"\n</pre> <p>Here's our logo (hover to see the title text):</p> <p>Inline-style: </p> <p>Reference-style: </p>"},{"location":"demo-nb-md/#code-and-syntax-highlighting","title":"Code and Syntax Highlighting\u00b6","text":"<p>Code blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and Markdown Here -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the highlight.js demo page.</p> <pre>Inline `code` has `back-ticks around` it.\n</pre> <p>Inline <code>code</code> has <code>back-ticks around</code> it.</p> <p>Blocks of code are either fenced by lines with three back-ticks ```, or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.</p> <pre>```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n```\n\n```python\ns = \"Python syntax highlighting\"\nprint s\n```\n\n```\nNo language indicated, so no syntax highlighting.\nBut let's throw in a &lt;b&gt;tag&lt;/b&gt;.\n```\n</pre> <pre>var s = \"JavaScript syntax highlighting\";\nalert(s);\n</pre> <pre>s = \"Python syntax highlighting\"\nprint s\n</pre> <pre><code>No language indicated, so no syntax highlighting.\nBut let's throw in a &lt;b&gt;tag&lt;/b&gt;.\n</code></pre>"},{"location":"demo-nb-md/#footnotes","title":"Footnotes\u00b6","text":"<p>Footnotes aren't part of the core Markdown spec, but they supported by GFM.</p> <pre>Here is a simple footnote[^1].\n\nA footnote can also have multiple lines[^2].\n\nYou can also use words, to fit your writing style more closely[^note].\n\n[^1]: My reference.\n[^2]:\n    Every new line should be prefixed with 2 spaces.\n    This allows you to have a footnote with multiple lines.\n\n[^note]:\n    Named footnotes will still render with numbers instead of the text but allow easier identification and linking.\n    This footnote also has been made with a different syntax using 4 spaces for new lines.\n</pre> <p>Here is a simple footnote[^1].</p> <p>A footnote can also have multiple lines[^2].</p> <p>You can also use words, to fit your writing style more closely[^note].</p> <p>[^1]: My reference. [^2]: Every new line should be prefixed with 2 spaces. This allows you to have a footnote with multiple lines.</p> <p>[^note]: Named footnotes will still render with numbers instead of the text but allow easier identification and linking. This footnote also has been made with a different syntax using 4 spaces for new lines.</p>"},{"location":"demo-nb-md/#tables","title":"Tables\u00b6","text":"<p>Tables aren't part of the core Markdown spec, but they are part of GFM and Markdown Here supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application.</p> <pre>Colons can be used to align columns.\n\n| Tables        |      Are      |  Cool |\n| ------------- | :-----------: | ----: |\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      |   centered    |   $12 |\n| zebra stripes |   are neat    |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don't need to make the\nraw Markdown line up prettily. You can also use inline Markdown.\n\n| Markdown | Less      | Pretty     |\n| -------- | --------- | ---------- |\n| _Still_  | `renders` | **nicely** |\n| 1        | 2         | 3          |\n</pre> <p>Colons can be used to align columns.</p> Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> Markdown Less Pretty Still <code>renders</code> nicely 1 2 3"},{"location":"demo-nb-md/#blockquotes","title":"Blockquotes\u00b6","text":"<pre>&gt; Blockquotes are very handy in email to emulate reply text.\n&gt; This line is part of the same quote.\n\nQuote break.\n\n&gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can _put_ **Markdown** into a blockquote.\n</pre> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> <p>Quote break.</p> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote.</p>"},{"location":"demo-nb-md/#inline-html","title":"Inline HTML\u00b6","text":"<p>You can also use raw HTML in your Markdown, and it'll mostly work pretty well.</p> <pre>&lt;dl&gt;\n  &lt;dt&gt;Definition list&lt;/dt&gt;\n  &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;\n\n  &lt;dt&gt;Markdown in HTML&lt;/dt&gt;\n  &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;\n&lt;/dl&gt;\n</pre> Definition list Is something people use sometimes. Markdown in HTML Does *not* work **very** well. Use HTML tags."},{"location":"demo-nb-md/#horizontal-rule","title":"Horizontal Rule\u00b6","text":"<pre>Three or more...\n\n---\n\nHyphens\n\n---\n\nAsterisks\n\n---\n\nUnderscores\n</pre> <p>Three or more...</p> <p>Hyphens</p> <p>Asterisks</p> <p>Underscores</p>"},{"location":"demo-nb-md/#line-breaks","title":"Line Breaks\u00b6","text":"<p>My basic recommendation for learning how line breaks work is to experiment and discover -- hit  once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. \"Markdown Toggle\" is your friend.</p> <p>Here are some things to try out:</p> <pre>Here's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a _separate paragraph_.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the _same paragraph_.\n</pre> <p>Here's a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a separate paragraph.</p> <p>This line is also a separate paragraph, but... This line is only separated by a single newline, so it's a separate line in the same paragraph.</p>"},{"location":"demo-nb-md/#youtube-videos","title":"YouTube Videos\u00b6","text":"<p>They can't be added directly but you can add an image with a link to the video like this:</p> <pre>&lt;a href=\"http://www.youtube.com/watch?feature=player_embedded&amp;v=YOUTUBE_VIDEO_ID_HERE\n\" target=\"_blank\"&gt;&lt;img src=\"http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg\"\nalt=\"IMAGE ALT TEXT HERE\" width=\"240\" height=\"180\" border=\"10\" /&gt;&lt;/a&gt;\n</pre> <p>Or, in pure Markdown, but losing the image sizing and border:</p> <pre>[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)\n</pre>"},{"location":"demo-nb-md/#image-on-the-docs","title":"Image on the docs\u00b6","text":"<p>If you have an image in mkdocs just add it in markdown, it won't be displayed in the Juptyer IDE but it will work on the mkdocs site.</p> <p></p>"},{"location":"demo-nb-md/#mkdocs-material-things","title":"mkdocs-material things\u00b6","text":"<p>Note</p> <p>         If two distributions are similar, then their entropies are similar, implies the KL divergence with respect to two distributions will be smaller. And vica versa. In Variational Inference, the whole idea is to minimize KL divergence so that our approximating distribution $q(\\theta)$ can be made similar to $p(\\theta|D)$.     </p>"},{"location":"demo-nb/","title":"Jupyter Notebook with cells","text":"In\u00a0[1]: tag1 Copied! <pre>a = 1\n</pre> a = 1 In\u00a0[2]: tag1 tag2 Copied! <pre>a\n</pre> a Out[2]: <pre>1</pre> In\u00a0[3]: tag1 tag2 tag3 Copied! <pre>b = 'pew'\n</pre> b = 'pew' In\u00a0[4]: Copied! <pre>b\n</pre> b Out[4]: <pre>'pew'</pre> In\u00a0[5]: Copied! <pre>import re\n</pre> import re In\u00a0[6]: Copied! <pre>text = 'foo bar\\t baz \\tqux'\n</pre> text = 'foo bar\\t baz \\tqux' In\u00a0[7]: Copied! <pre>re.split('\\s+', text)\n</pre> re.split('\\s+', text) Out[7]: <pre>['foo', 'bar', 'baz', 'qux']</pre> In\u00a0[8]: Copied! <pre>%%latex\n\\begin{align}\n\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &amp; = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\\n\\nabla \\cdot \\vec{\\mathbf{E}} &amp; = 4 \\pi \\rho \\\\\n\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} &amp; = \\vec{\\mathbf{0}} \\\\\n\\nabla \\cdot \\vec{\\mathbf{B}} &amp; = 0\n\\end{align}\n</pre> %%latex \\begin{align} \\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &amp; = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\ \\nabla \\cdot \\vec{\\mathbf{E}} &amp; = 4 \\pi \\rho \\\\ \\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} &amp; = \\vec{\\mathbf{0}} \\\\ \\nabla \\cdot \\vec{\\mathbf{B}} &amp; = 0 \\end{align}  \\begin{align} \\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &amp; = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\ \\nabla \\cdot \\vec{\\mathbf{E}} &amp; = 4 \\pi \\rho \\\\ \\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} &amp; = \\vec{\\mathbf{0}} \\\\ \\nabla \\cdot \\vec{\\mathbf{B}} &amp; = 0 \\end{align}   In\u00a0[9]: Copied! <pre>import numpy as np\nimport pandas as pd\n</pre> import numpy as np import pandas as pd In\u00a0[10]: Copied! <pre>dates = pd.date_range('20130101', periods=6)\ndf = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list('ABCD'))\ndf\n</pre> dates = pd.date_range('20130101', periods=6) df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list('ABCD')) df Out[10]: A B C D 2013-01-01 -0.381074 -0.461364 0.337276 0.749400 2013-01-02 0.971930 0.790364 0.863955 -2.754741 2013-01-03 -0.952607 1.059292 -0.003268 -1.314800 2013-01-04 -0.097368 0.428709 0.002023 1.227811 2013-01-05 -0.550313 -1.212144 -0.776761 -2.175846 2013-01-06 -0.762908 0.339352 1.050517 0.964249 In\u00a0[11]: Copied! <pre>import matplotlib.pyplot as plt\n</pre> import matplotlib.pyplot as plt In\u00a0[12]: Copied! <pre>from pylab import *\n</pre> from pylab import * In\u00a0[13]: Copied! <pre>x = linspace(0, 5, 10)\ny = x ** 2\n</pre> x = linspace(0, 5, 10) y = x ** 2 In\u00a0[14]: Copied! <pre>figure()\nplot(x, y, 'r')\nxlabel('x')\nylabel('y')\ntitle('title')\nshow()\n</pre> figure() plot(x, y, 'r') xlabel('x') ylabel('y') title('title') show() In\u00a0[15]: Copied! <pre>num_points = 130\ny = np.random.random(num_points)\nplt.plot(y)\n</pre> num_points = 130 y = np.random.random(num_points) plt.plot(y) Out[15]: <pre>[&lt;matplotlib.lines.Line2D at 0x7ffbb8474ac0&gt;]</pre> <p>This is some text, here comes some latex</p> In\u00a0[16]: Copied! <pre>from bokeh.plotting import figure, output_notebook, show\n</pre> from bokeh.plotting import figure, output_notebook, show In\u00a0[17]: Copied! <pre>output_notebook()\n</pre> output_notebook() Loading BokehJS ... In\u00a0[18]: Copied! <pre>p = figure()\np.line([1, 2, 3, 4, 5], [6, 7, 2, 4, 5], line_width=2)\nshow(p)\n</pre> p = figure() p.line([1, 2, 3, 4, 5], [6, 7, 2, 4, 5], line_width=2) show(p) In\u00a0[19]: Copied! <pre>import plotly.express as px\n</pre> import plotly.express as px In\u00a0[20]: Copied! <pre>df = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\")\nfig.show()\n</pre> df = px.data.iris() fig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\") fig.show() In\u00a0[21]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets  In\u00a0[22]: Copied! <pre>widget = widgets.IntSlider(\n    value=7,\n    min=0,\n    max=10,\n    step=1,\n    description='',\n    disabled=False,\n    continuous_update=False,\n    orientation='horizontal',\n    readout=True,\n    readout_format='d'\n)\n\nvalue_lbl = widgets.Label()\nwidgets.jslink((widget, 'value'), (value_lbl, 'value'))\n\ndisplay(widget, widgets.HBox([widgets.Label(\"Current Value:\"), value_lbl]) )\n</pre> widget = widgets.IntSlider(     value=7,     min=0,     max=10,     step=1,     description='',     disabled=False,     continuous_update=False,     orientation='horizontal',     readout=True,     readout_format='d' )  value_lbl = widgets.Label() widgets.jslink((widget, 'value'), (value_lbl, 'value'))  display(widget, widgets.HBox([widgets.Label(\"Current Value:\"), value_lbl]) ) <pre>IntSlider(value=7, continuous_update=False, max=10)</pre> <pre>HBox(children=(Label(value='Current Value:'), Label(value='')))</pre>"},{"location":"demo-nb/#jupyter-notebook-with-cells","title":"Jupyter Notebook with cells\u00b6","text":"<p>Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).</p>"},{"location":"demo-nb/#code-cells","title":"Code cells\u00b6","text":"<p>This first code cells have some tags</p>"},{"location":"demo-nb/#equations","title":"Equations\u00b6","text":""},{"location":"demo-nb/#pandas-dataframes","title":"Pandas DataFrames\u00b6","text":""},{"location":"demo-nb/#plots","title":"Plots\u00b6","text":""},{"location":"demo-nb/#bokeh","title":"bokeh\u00b6","text":""},{"location":"demo-nb/#plotly","title":"plotly\u00b6","text":"<p>This requires a theme modification to include Require.JS</p>"},{"location":"demo-nb/#widgets","title":"Widgets\u00b6","text":""},{"location":"demo-script/","title":"Jupytext demo (.py)","text":"In\u00a0[\u00a0]: tag1 Copied! <pre>a = 1\n</pre> a = 1 In\u00a0[\u00a0]: tag1 tag2 Copied! <pre>a\n</pre> a In\u00a0[\u00a0]: tag1 tag2 tag3 Copied! <pre>b = \"pew\"\n</pre> b = \"pew\" In\u00a0[\u00a0]: Copied! <pre>b\n</pre> b In\u00a0[\u00a0]: Copied! <pre>import re\n</pre> import re In\u00a0[\u00a0]: Copied! <pre>text = \"foo bar\\t baz \\tqux\"\n</pre> text = \"foo bar\\t baz \\tqux\" In\u00a0[\u00a0]: Copied! <pre>re.split(\"\\s+\", text)\n</pre> re.split(\"\\s+\", text) In\u00a0[\u00a0]: Copied! <pre>%%latex\n\\begin{align}\n\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &amp; = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\\n\\nabla \\cdot \\vec{\\mathbf{E}} &amp; = 4 \\pi \\rho \\\\\n\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} &amp; = \\vec{\\mathbf{0}} \\\\\n\\nabla \\cdot \\vec{\\mathbf{B}} &amp; = 0\n\\end{align}\n</pre> %%latex \\begin{align} \\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &amp; = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\ \\nabla \\cdot \\vec{\\mathbf{E}} &amp; = 4 \\pi \\rho \\\\ \\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} &amp; = \\vec{\\mathbf{0}} \\\\ \\nabla \\cdot \\vec{\\mathbf{B}} &amp; = 0 \\end{align} In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport pandas as pd\n</pre> import numpy as np import pandas as pd In\u00a0[\u00a0]: Copied! <pre>dates = pd.date_range(\"20130101\", periods=6)\ndf = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list(\"ABCD\"))\ndf\n</pre> dates = pd.date_range(\"20130101\", periods=6) df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list(\"ABCD\")) df In\u00a0[\u00a0]: Copied! <pre>%matplotlib inline\n</pre> %matplotlib inline In\u00a0[\u00a0]: Copied! <pre>import matplotlib.pyplot as plt\n</pre> import matplotlib.pyplot as plt In\u00a0[\u00a0]: Copied! <pre>from pylab import *\n</pre> from pylab import * In\u00a0[\u00a0]: Copied! <pre>x = linspace(0, 5, 10)\ny = x**2\n</pre> x = linspace(0, 5, 10) y = x**2 In\u00a0[\u00a0]: Copied! <pre>figure()\nplot(x, y, \"r\")\nxlabel(\"x\")\nylabel(\"y\")\ntitle(\"title\")\nshow()\n</pre> figure() plot(x, y, \"r\") xlabel(\"x\") ylabel(\"y\") title(\"title\") show() In\u00a0[\u00a0]: Copied! <pre>num_points = 130\ny = np.random.random(num_points)\nplt.plot(y)\n</pre> num_points = 130 y = np.random.random(num_points) plt.plot(y) <p>This is some text, here comes some latex</p> In\u00a0[\u00a0]: Copied! <pre>import plotly.express as px\n</pre> import plotly.express as px In\u00a0[\u00a0]: Copied! <pre>df = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\")\nfig.show()\n</pre> df = px.data.iris() fig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\") fig.show() In\u00a0[\u00a0]: Copied! <pre>from bokeh.plotting import figure, output_notebook, show\n</pre> from bokeh.plotting import figure, output_notebook, show In\u00a0[\u00a0]: Copied! <pre>output_notebook()\n</pre> output_notebook() In\u00a0[\u00a0]: Copied! <pre>p = figure()\np.line([1, 2, 3, 4, 5], [6, 7, 2, 4, 5], line_width=2)\nshow(p)\n</pre> p = figure() p.line([1, 2, 3, 4, 5], [6, 7, 2, 4, 5], line_width=2) show(p) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"demo-script/#jupytext-demo-py","title":"Jupytext demo (.py)\u00b6","text":""},{"location":"demo-script/#header-2","title":"Header 2\u00b6","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur purus mi, sollicitudin ac justo a, dapibus ultrices dolor. Curabitur id eros mattis, tincidunt ligula at, condimentum urna.</p>"},{"location":"demo-script/#header-3","title":"Header 3\u00b6","text":"<p>A regular markdown code block</p> <pre>id_ = 0\nfor directory in directories:\n    rootdir = os.path.join('/Users/drodriguez/Downloads/aclImdb', directory)\n    for subdir, dirs, files in os.walk(rootdir):\n        for file_ in files:\n            with open(os.path.join(subdir, file_), 'r') as f:\n                doc_id = '_*%i' % id_\n                id_ = id_ + 1\n\n                text = f.read()\n                text = text.decode('utf-8')\n                tokens = nltk.word_tokenize(text)\n                doc = ' '.join(tokens).lower()\n                doc = doc.encode('ascii', 'ignore')\n                input_file.write('%s %s\\n' % (doc_id, doc))\n</pre>"},{"location":"demo-script/#more-markdown-things","title":"More markdown things\u00b6","text":"<p>Pellentesque pretium euismod laoreet. Nullam eget mauris ut tellus vehicula consequat. In sed molestie metus. Nulla at varius nunc, sit amet semper arcu. Integer tristique augue eget auctor aliquam. Donec ornare consectetur lectus et viverra. Duis vel elit ac lectus accumsan gravida non ac erat.</p> <p>Ut in ipsum id neque pellentesque iaculis. Pellentesque massa erat, rhoncus id auctor vel, tempor id neque. Nunc nec iaculis enim. Duis eget tincidunt tellus. Proin vitae ultrices velit.</p> <ol> <li>Item 1</li> <li>Curabitur vel enim at mi dictum venenatis eget eu nulla. Suspendisse potenti. Etiam vitae nibh a odio dictum aliquam. Sed sit amet adipiscing leo, vitae euismod arcu.</li> <li>Item 3</li> </ol> <p>Sed vestibulum justo et turpis ullamcorper, a interdum sapien tristique. Donec ullamcorper ipsum ac scelerisque lacinia. Quisque et eleifend odio. Curabitur vel enim at mi dictum venenatis eget eu nulla. Suspendisse potenti. Etiam vitae nibh a odio dictum aliquam. Sed sit amet adipiscing leo, vitae euismod arcu.</p> <ul> <li>Item 1</li> <li>Curabitur vel enim at mi dictum venenatis eget eu nulla. Suspendisse potenti. Etiam vitae nibh a odio dictum aliquam. Sed sit amet adipiscing leo, vitae euismod arcu.</li> <li>Item 3</li> </ul> <p></p> <p>Sed vestibulum justo et turpis ullamcorper, a interdum sapien tristique. Donec ullamcorper ipsum ac scelerisque lacinia. Quisque et eleifend odio. Curabitur vel enim at mi dictum venenatis eget eu nulla. Suspendisse potenti. Etiam vitae nibh a odio dictum aliquam. Sed sit amet adipiscing leo, vitae euismod arcu.</p>"},{"location":"demo-script/#code-cells","title":"Code cells\u00b6","text":"<p>This first code cells have some tags</p>"},{"location":"demo-script/#javascript-plots","title":"Javascript plots\u00b6","text":""},{"location":"demo-script/#plotly","title":"plotly\u00b6","text":""},{"location":"demo-script/#bokeh","title":"bokeh\u00b6","text":""},{"location":"docker/","title":"Docker Docs","text":""},{"location":"docker/#what-is-docker","title":"What is docker?","text":"<p>Docker is a tool designed to make it easier to create, deploy, and run applications by using containers.</p> <p>\u2b06 Back to Top</p>"},{"location":"docker/#why-docker","title":"Why docker?","text":"<p>Docker is useful to automate the deployment of applications inside a software containers, which makes the applications easy to ship and run virtually anywhere (i.e, platform independent). The Docker container processes run on the host kernel, unlike VM which runs processes in guest kernel.</p> <p></p> <p>\u2b06 Back to Top</p>"},{"location":"docker/#installation","title":"Installation","text":"<p>The docker desktop downloads are available for windows, mac and linux distributions.</p>"},{"location":"docker/#windows","title":"Windows","text":"<p>It supports for Windows 10 64-bit: Home, Pro, Enterprise, or Education, version 1903 (Build 18362 or higher). You need to follow the below steps for installation.</p> <ol> <li>Download docker desktop for windows from https://docs.docker.com/docker-for-windows/install/</li> <li>Double-click <code>Docker Desktop Installer.exe</code> to run the installer.</li> <li>Make sure <code>Enable Hyper-V Windows Features</code> option is selected</li> </ol>"},{"location":"docker/#mac","title":"Mac","text":"<ol> <li>Download docker desktop for mac from https://docs.docker.com/docker-for-mac/install/</li> <li>Double-click <code>Docker.dmg</code> to open the installer and drag it to the Applications folder.</li> <li>Double-click <code>Docker.app</code> in the Applications folder to start Docker.</li> </ol>"},{"location":"docker/#linux","title":"Linux","text":"<p>You can install from a package easily 1. Go to https://download.docker.com/linux/ubuntu/dists/, choose your Ubuntu version and then go to pool/stable/ to get .deb file 2. Install Docker Engine by referring the downloaded location of the Docker package. <pre><code>$ sudo dpkg -i /path/to/package.deb\n</code></pre> 3. Verify the Docker Engine by running the <code>hello-world</code> image to check correct installation. <pre><code>$ sudo docker run hello-world\n</code></pre></p> <p>\u2b06 Back to Top</p>"},{"location":"docker/#registries-and-repositories","title":"Registries and Repositories","text":""},{"location":"docker/#registry","title":"Registry:","text":"<p>Docker Registry is a service that stores your docker images. It could be hosted by a third party, as public or private registry. Some of the examples are,</p> <ul> <li>Docker Hub,</li> <li>Quay,</li> <li>Google Container Registry,</li> <li>AWS Container Registry</li> </ul>"},{"location":"docker/#repository","title":"Repository:","text":"<p>A Docker Repository is a collection of related images with same name which have different tags. These tags are an alphanumeric identifiers(like 1.0 or latest) attached to images within a repository.</p> <p>For example, if you want to pull golang image using <code>docker pull golang:latest</code> command, it will download the image tagged latest within the <code>golang</code> repository from the Docker Hub registry. The tags appeared on dockerhub as below,</p>"},{"location":"docker/#login","title":"Login","text":"<p>Login to a registry <pre><code>&gt; docker login [OPTIONS] [SERVER]\n\n[OPTIONS]:\n-u/--username username\n-p/--password password\n\nExample:\n\n1. docker login localhost:8080 // Login to a registry on your localhost\n2. docker login\n</code></pre></p>"},{"location":"docker/#logout","title":"Logout","text":"<p>Logout from a registry <pre><code>&gt; docker logout [SERVER]\n\nExample:\n\ndocker logout localhost:8080 // Logout from a registry on your localhost\n</code></pre></p>"},{"location":"docker/#search-image","title":"Search image","text":"<p>Search for an image in registry <pre><code>docker search [OPTIONS] TERM\n\nExample:\ndocker search golang\ndocker search --filter stars=3 --no-trunc golang\n</code></pre></p>"},{"location":"docker/#pull-image","title":"Pull image","text":"<p>This command pulls an image or a repository from a registry to local machine</p> <pre><code>docker image pull [OPTIONS] NAME[:TAG|@DIGEST]\n\nExample:\ndocker image pull golang:latest\n</code></pre>"},{"location":"docker/#push-image","title":"Push image","text":"<p>This command pushes an image to the registry from local machine.</p> <pre><code>docker image push [OPTIONS] NAME[:TAG]\ndocker image push golang:latest\n</code></pre> <p>\u2b06 Back to Top</p>"},{"location":"docker/#createrunupdate-and-delete-containers","title":"Create,Run,Update and Delete containers","text":""},{"location":"docker/#create","title":"Create","text":"<p>Create a new container <pre><code>docker container create [OPTIONS] IMAGE [COMMAND] [ARG...]\n\nExample:\ndocker container create -t -i sudheerj/golang --name golang\n</code></pre></p>"},{"location":"docker/#rename","title":"Rename","text":"<p>Rename a container</p> <pre><code>docker container rename CONTAINER NEW_NAME\n\nExample:\ndocker container rename golang golanguage\ndocker container rename golanguage golang\n</code></pre>"},{"location":"docker/#run","title":"Run","text":"<pre><code>docker container run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\nExample:\ndocker container run -it --name golang -d sudheerj/golang\n</code></pre> <p>You can also run a command inside container <pre><code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n\nExample:\ndocker exec -it golang sh // Or use bash command if sh is failed\n</code></pre></p>"},{"location":"docker/#update","title":"Update","text":"<p>Update configuration of one or more containers</p> <pre><code>docker container update [OPTIONS] CONTAINER [CONTAINER...]\n\nExample:\ndocker container update --memory \"1g\" --cpuset-cpu \"1\" golang // update the golang to use 1g of memory and only use cpu core 1\n</code></pre>"},{"location":"docker/#remove","title":"Remove","text":"<p>Remove one or more containers</p> <p><pre><code>docker container rm [OPTIONS] CONTAINER [CONTAINER...]\n\nExample:\ndocker container rm golang\ndocker rm $(docker ps -q -f status=exited) // Remove all the stopped containers\n</code></pre> \u2b06 Back to Top</p>"},{"location":"docker/#start-and-stop-containers","title":"Start and stop containers","text":""},{"location":"docker/#start","title":"Start","text":"<p>Start one or more stopped containers</p> <pre><code>docker container start [OPTIONS] CONTAINER [CONTAINER...]\n\nExample:\ndocker container start golang\n</code></pre>"},{"location":"docker/#stop","title":"Stop","text":"<p>Stop one or more running containers</p> <pre><code>docker container stop [OPTIONS] CONTAINER [CONTAINER...]\n\nExample:\ndocker container stop golang\ndocker stop $(docker ps -a -q) // To stop all the containers\n</code></pre>"},{"location":"docker/#restart","title":"Restart","text":"<p>Restart one or more containers and processes running inside the container/containers.</p> <pre><code>docker container restart [OPTIONS] CONTAINER [CONTAINER...]\n\nExample:\ndocker container restart golang\n</code></pre>"},{"location":"docker/#pause","title":"Pause","text":"<p>Pause all processes within one or more containers</p> <pre><code>docker container pause CONTAINER [CONTAINER...]\n\nExample:\ndocker container pause golang\n</code></pre>"},{"location":"docker/#unpauseresume","title":"Unpause/Resume","text":"<p>Unpause all processes within one or more containers</p> <pre><code>docker container unpause CONTAINER [CONTAINER...]\n\nExample:\ndocker container unpause golang\n</code></pre>"},{"location":"docker/#kill","title":"Kill","text":"<p>Kill one or more running containers</p> <pre><code>docker container kill [OPTIONS] CONTAINER [CONTAINER...]\n\nExample:\ndocker container kill golang\n</code></pre>"},{"location":"docker/#wait","title":"Wait","text":"<p>Block until one or more containers stop and print their exit codes after that</p> <p><pre><code>docker container wait CONTAINER [CONTAINER...]\n\nExample:\ndocker container wait golang\n</code></pre> \u2b06 Back to Top</p>"},{"location":"docker/#networks","title":"Networks","text":"<p>Docker provides network commands connect containers to each other and to other non-Docker workloads. The usage of network commands would be <code>docker network COMMAND</code></p>"},{"location":"docker/#list-networks","title":"List networks","text":"<p>List down available networks</p> <pre><code>docker network ls\n</code></pre>"},{"location":"docker/#connect-a-container-to-network","title":"Connect a container to network","text":"<p>You can connect a container by name or by ID to any network. Once it connected, the container can communicate with other containers in the same network.</p> <pre><code>docker network connect [OPTIONS] NETWORK CONTAINER\n\nExample:\ndocker network connect multi-host-network container1\n</code></pre>"},{"location":"docker/#disconnect-a-container-from-a-network","title":"Disconnect a container from a network","text":"<p>You can disconnect a container by name or by ID from any network.</p> <pre><code>docker network disconnect [OPTIONS] NETWORK CONTAINER\n\nExample:\ndocker network disconnect multi-host-network container1\n</code></pre>"},{"location":"docker/#remove-one-or-more-networks","title":"Remove one or more networks","text":"<p>Removes one or more networks by name or identifier. Remember, you must first disconnect any containers connected to it before removing it.</p> <pre><code>docker network rm NETWORK [NETWORK...]\n\nExample:\ndocker network rm my-network\n</code></pre>"},{"location":"docker/#create-network","title":"Create network","text":"<p>It is possible to create a network in Docker before launching containers</p> <pre><code>docker network create [OPTIONS] NETWORK\n\nExample:\nsudo docker network create \u2013-driver bridge some_network\n</code></pre> <p>The above command will output the long ID for the new network.</p>"},{"location":"docker/#inspect-network","title":"Inspect network","text":"<p>You can see more details on the network associated with Docker using network inspect command.</p> <pre><code>docker network inspect networkname\n\nExample:\ndocker network inspect bridge\n</code></pre>"},{"location":"docker/#cleanup-commands","title":"Cleanup commands","text":"<p>You may need to cleanup resources (containers, volumes, images, networks) regularly.</p>"},{"location":"docker/#remove-all-unused-resources","title":"Remove all unused resources","text":"<pre><code>docker system prune\n</code></pre>"},{"location":"docker/#images","title":"Images","text":"<pre><code>$ docker images\n$ docker rmi $(docker images --filter \"dangling=true\" -q --no-trunc)\n\n$ docker images | grep \"none\"\n$ docker rmi $(docker images | grep \"none\" | awk '/ / { print $3 }')\n</code></pre>"},{"location":"docker/#containers","title":"Containers","text":"<pre><code>$ docker ps\n$ docker ps -a\n$ docker rm $(docker ps -qa --no-trunc --filter \"status=exited\")\n</code></pre>"},{"location":"docker/#volumes","title":"Volumes","text":"<pre><code>$ docker volume rm $(docker volume ls -qf dangling=true)\n$ docker volume ls -qf dangling=true | xargs -r docker volume rm\n</code></pre>"},{"location":"docker/#networks_1","title":"Networks","text":"<pre><code>$ docker network ls\n$ docker network ls | grep \"bridge\"\n$ docker network rm $(docker network ls | grep \"bridge\" | awk '/ / { print $1 }')\n</code></pre> <p>\u2b06 Back to Top</p>"},{"location":"docker/#utility-commands","title":"Utility commands","text":"<p>\u2b06 Back to Top</p>"},{"location":"docker/#docker-hub","title":"Docker Hub","text":"<p>Docker Hub is a cloud-based repository provided by Docker to test, store and distribute container images which can be accessed either privately or publicly.</p>"},{"location":"docker/#from","title":"From","text":"<p>It initializes a new image and sets the Base Image for subsequent instructions. It must be a first non-comment instruction in the Dockerfile.    <pre><code>FROM &lt;image&gt;\nFROM &lt;image&gt;:&lt;tag&gt;\nFROM &lt;image&gt;@&lt;digest&gt;\n</code></pre> Note: Both <code>tag</code> and <code>digest</code> are optional. If you omit either of them, the builder assumes a latest by default.</p>"},{"location":"docker/#dockerfile","title":"Dockerfile","text":"<p>Dockerfile is a text document that contains set of commands and instructions which will be executed in a sequence in the docker environment for building a new docker image.</p>"},{"location":"docker/#from_1","title":"FROM","text":"<p>This command Sets the Base Image for subsequent instructions</p> <pre><code>FROM &lt;image&gt;\nFROM &lt;image&gt;:&lt;tag&gt;\nFROM &lt;image&gt;@&lt;digest&gt;\n\nExample:\nFROM ubuntu:18.04\n</code></pre>"},{"location":"docker/#run_1","title":"RUN","text":"<p>RUN instruction allows you to install your application and packages required for it. It executes any commands on top of the current image and creates a new layer by committing the results. It is quite common to have multiple RUN instructions in a Dockerfile.</p> <p>It has two forms 1. Shell Form: RUN  <pre><code>RUN npm start\n</code></pre> 2. Exec form RUN [\"\", \"\", \"\"] <pre><code>RUN [ \"npm\", \"start\" ]\n</code></pre>"},{"location":"docker/#entrypoint","title":"ENTRYPOINT","text":"<p>An ENTRYPOINT allows you to configure a container that will run as an executable. It is used to run when container starts.</p> <pre><code>Exec Form:\nENTRYPOINT [\"executable\", \"param1\", \"param2\"]\nShell Form:\nENTRYPOINT command param1 param2\n\nExample:\nFROM alpine:3.5\nENTRYPOINT [\"/bin/echo\", \"Print ENTRYPOINT instruction of Exec Form\"]\n</code></pre> <p>If an image has an ENTRYPOINT and pass an argument to it while running the container, it wont override the existing entrypoint but it just appends what you passed with the entrypoint. To override the existing ENTRYPOINT. you should user <code>\u2013entrypoint</code> flag for the running container.</p> <p>Let's see the behavior with the above dockerfile,</p> <pre><code>Build image:\ndocker build -t entrypointImage .\n\nRun the image:\ndocker container run entrypointImage // Print ENTRYPOINT instruction of Exec Form\n\nOverride entrypoint:\ndocker run --entrypoint \"/bin/echo\" entrypointImage \"Override ENTRYPOINT instruction\" // Override ENTRYPOINT instruction\n</code></pre>"},{"location":"docker/#cmd","title":"CMD","text":"<p>CMD instruction is used to set a default command, which will be executed only when you run a container without specifying a command. But if the docker container runs with a command, the default command will be ignored.</p> <p>The CMD instruction has three forms, <pre><code>1. Exec form:\nCMD [\"executable\",\"param1\",\"param2\"]\n2. Default params to ENTRYPOINT:\nCMD [\"param1\",\"param2\"]\n3. Shell form:\nCMD command param1 param2\n</code></pre></p> <p>The main purpose of the CMD command is to launch the required software in a container. For example, running an executable .exe file or a Bash terminal as soon as the container starts.</p> <p>Remember, if docker runs with executable and parameters then CMD instruction will be overridden(Unlike ENTRYPOINT).</p> <pre><code>docker run executable parameters\n</code></pre> <p>Note: There should only be one CMD command in your Dockerfile. Otherwise only the last instance of CMD will be executed.</p>"},{"location":"docker/#copy","title":"COPY","text":"<p>The COPY instruction copies new files or directories from source and adds them to the destination filesystem of the container.</p> <pre><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;\nCOPY [--chown=&lt;user&gt;:&lt;group&gt;] [\"&lt;src&gt;\",... \"&lt;dest&gt;\"]\n\nExample:\nCOPY test.txt /absoluteDir/\nCOPY tes? /absoluteDir/ // Copies all files or directories starting with test to destination container\n</code></pre> <p>The  path must be relative to the source directory that is being built. Whereas  is an absolute path, or a path relative to <code>WORKDIR</code>."},{"location":"docker/#add","title":"ADD","text":"<p>The ADD instruction copies new files, directories or remote file URLs from source and adds them to the filesystem of the image at the destination path. The functionality is similar to COPY command and supports two forms of usage,</p> <pre><code>ADD [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;\nADD [--chown=&lt;user&gt;:&lt;group&gt;] [\"&lt;src&gt;\",... \"&lt;dest&gt;\"]\n\nExample:\nADD test.txt /absoluteDir/\nADD tes? /absoluteDir/ // Copies all files or directories starting with test to destination container\n</code></pre> <p>ADD commands provides additional features such as downloading remote resources, extracting TAR files etc.</p> <pre><code>1. Download an external file and copy to the destination\nADD http://source.file/url  /destination/path\n\n2. Copies compressed files and extract the content in the destination\nADD source.file.tar.gz /temp\n</code></pre>"},{"location":"docker/#env","title":"ENV","text":"<p>The ENV instruction sets the environment variable  to the value . It has two forms, <ol> <li>The first form, <code>ENV &lt;key&gt; &lt;value&gt;</code>, will set a single variable to a value.</li> <li>The second form, <code>ENV &lt;key&gt;=&lt;value&gt; ...</code>, allows for multiple variables to be set at one time.</li> </ol> <pre><code>ENV &lt;key&gt; &lt;value&gt;\nENV &lt;key&gt;=&lt;value&gt; [&lt;key&gt;=&lt;value&gt; ...]\n\nExample:\nENV name=\"John Doe\" age=40\nENV name John Doe\nENV age 40\n</code></pre>"},{"location":"docker/#expose","title":"EXPOSE","text":"<p>The EXPOSE instruction informs Docker that the container listens on the specified network ports at runtime. i.e, It helps in inter-container communication. You can specify whether the port listens on TCP or UDP, and the default is TCP.</p> <pre><code>EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]\n\nExample:\nEXPOSE 80/udp\nEXPOSE 80/tcp\n</code></pre> <p>But if you want to bind the port of the container with the host machine on which the container is running, use -p option of <code>docker run</code> command.</p> <pre><code>docker run -p &lt;HOST_PORT&gt;:&lt;CONTAINER:PORT&gt; IMAGE_NAME\n\nExample:\ndocker run -p 80:80/udp myDocker\n</code></pre>"},{"location":"docker/#workdir","title":"WORKDIR","text":"<p>The WORKDIR command is used to define the working directory of a Docker container at any given time for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile.</p> <pre><code>WORKDIR /path/to/workdir\n\nExample:\nWORKDIR /c\nWORKDIR d\nWORKDIR e\nRUN pwd  // /c/d/e\n</code></pre>"},{"location":"docker/#label","title":"LABEL","text":"<p>The LABEL instruction adds metadata as key-value pairs to an image. Labels included in base or parent images (images in the FROM line) are inherited by your image.</p> <pre><code>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...\n\nExample:\nLABEL version=\"1.0\"\nLABEL multi.label1=\"value1\" \\\n      multi.label2=\"value2\" \\\n      other=\"value3\"\n</code></pre> <p>You can view an image\u2019s labels using the <code>docker image inspect --format='' myimage</code> command. The output would be as below,</p> <pre><code>{\n  \"version\": \"1.0\",\n  \"multi.label1\": \"value1\",\n  \"multi.label2\": \"value2\",\n  \"other\": \"value3\"\n}\n</code></pre>"},{"location":"docker/#maintainer","title":"MAINTAINER","text":"<p>The MAINTAINER instruction sets the Author field of the generated images. <pre><code>MAINTAINER &lt;name&gt;\n\nExample:\nMAINTAINER John\n</code></pre></p> <p>This command is deprecated status now and the recommended usage is with LABEL command <pre><code>LABEL maintainer=\"John\"\n</code></pre></p>"},{"location":"docker/#volume","title":"VOLUME","text":"<p>The VOLUME instruction creates a mount point with the specified name and mounted volumes from native host or other containers.</p> <pre><code>VOLUME [\"/data\"]\n\nExample:\nFROM ubuntu\nRUN mkdir /test\nVOLUME /test\n</code></pre>"},{"location":"docker/#docker-compose","title":"Docker Compose","text":"<p>Docker compose(or compose) is a tool for defining and running multi-container Docker applications.</p>"},{"location":"docker/#docker-swarm","title":"Docker Swarm","text":"<p>Docker Swarm(or swarm) is an open-source tool used to cluster and orchestrate Docker containers.</p>"},{"location":"fail/","title":"Fail","text":"In\u00a0[\u00a0]: Copied! <pre>raise Exception('failing notebook')\n</pre> raise Exception('failing notebook')"},{"location":"kubernetes/","title":"Kubernetes","text":""},{"location":"kubernetes/#kubernetes-components","title":"Kubernetes Components","text":""},{"location":"kubernetes/#control-plane-components-master-nodes","title":"Control Plane Components (Master Nodes)","text":"Component Name Summary Runs As kube-apiserver <code>Exposes the Kubernetes API from master nodes.The API server is the front end for the Kubernetes control plane. Can run several instances of kube-apiserver and balance traffic between those instances</code> <code>Static Pod</code> etcd <code>Consistent and highly-available key value store used as Kubernetes\u2019 backing store for all cluster data</code> <code>Static Pod</code> or <code>Systemd service</code> kube-scheduler <code>Component that watches for newly created Pods with no assigned node, and selects a node for them to run on</code> <code>Static Pod</code> kube-controller-manager <code>Component that runs controller processesnode. Controllers include : Node Controller, Replication Controller, Endpoints Controller, Service Account &amp; Token Controllers</code> <code>Static Pod</code>"},{"location":"kubernetes/#node-componentsworker-nodes","title":"Node Components(Worker Nodes)","text":"Component Name Summary Runs As kubelet <code>An agent that runs on each node in the cluster. It makes sure that containers are running in a Pod</code> <code>System process</code> kube-proxy <code>kube-proxy is a network proxy that runs on each node in your cluster, implementing part of the Kubernetes Service concept</code> <code>Daemonset</code> Container Runtime <code>Is the software that is responsible for running containers. Kubernetes supported runtimes: Docker, rkt, runc and any [[https://github.com/opencontainers/runtime-spec][OCI runtime-spec]] implementation</code> <code>Systemd service</code> <p>Master and Worker nodes ports </p>"},{"location":"kubernetes/#generators","title":"Generators","text":"<p>You can create the following resources using\u00a0kubectl run\u00a0with the\u00a0--generator\u00a0flag</p> Resource api group kubectl command Pod v1 <code>kubectl run --generator=run-pod/v1</code> Replication controller (deprecated) v1 <code>kubectl run --generator=run/v1</code> Deployment (deprecated) apps/v1beta1 <code>kubectl run --generator=deployment/apps.v1beta1</code> Job (deprecated) batch/v1 <code>kubectl run --generator=job/v1</code> CronJob (deprecated) batch/v1beta1 <code>kubectl run --generator=cronjob/v1beta1</code> CronJob (deprecated) batch/v2alpha1 <code>kubectl run --generator=cronjob/v2alpha1</code>"},{"location":"kubernetes/#configuration-and-logs-details-of-kubernetesdocker","title":"Configuration and Logs details of Kubernetes,Docker","text":"Description Folder or File location Config folder <code>/etc/kubernetes/</code> Manifests dir <code>/etc/kubernetes/manifests</code> Certificate files <code>/etc/kubernetes/pki/</code> Credentials to API server <code>/etc/kubernetes/kubelet.conf</code> Superuser credentials <code>/etc/kubernetes/admin.conf</code> kubectl config file <code>~/.kube/config</code> Kubernets working dir <code>/var/lib/kubelet/</code> Docker working dir <code>/var/lib/docker/</code>, <code>/var/log/containers/</code> Etcd working dir <code>/var/lib/etcd/</code> Network cni <code>/etc/cni/net.d/</code> Log files <code>/var/log/pods/</code> Kubelet logs <code>/var/log/messages</code>, <code>/var/log/pods/kube-system_kube-proxy*/kube-proxy/*.log</code> Kube-proxy <code>/var/log/pods/kube-system_kube-proxy*/kube-proxy/*.log</code> Kube-api-server <code>/var/log/pods/kube-system_kube-apiserver*/kube-proxy/*.log</code> Kube-controller <code>/var/log/pods/kube-system_kube-controller*/kube-proxy/*.log</code> Kube-scheduller <code>/var/log/pods/kube-system_kube-scheduler*/kube-scheduler/*.log</code> Env <code>/etc/systemd/system/kubelet.service.d/10-kubeadm.conf</code> Env <code>export KUBECONFIG=/etc/kubernetes/admin.conf</code> Audit logs <code>/var/log/audit/audit.log</code> Kubelet env file <code>/etc/kubernetes/kubelet.env</code> kubelet.service <code>/etc/systemd/system/kubelet.service</code> docker.service <code>/etc/systemd/system/docker.service</code>"},{"location":"kubernetes/#check-health-of-cluster","title":"Check health of cluster","text":"Description command Check cluster health <code>kubectl get componentstatus</code> Check etcd health <code>kubectl get --raw=/healthz/etcd</code>"},{"location":"kubernetes/#kubelet-and-docker-commands","title":"Kubelet and Docker commands","text":"Description Command or File location Check Kubelet status <code>service kubelet status</code> or <code>systemctl status kubelet.service</code> Restart Kubelet <code>service kubelet restart</code> or <code>systemctl restart kubelet.service</code> Stop Kubelet <code>service kubelet stop</code> or <code>systemctl stop kubelet.service</code> Tail Kubelet logs <code>journalctl -u kubelet.service -f</code> Check Docker daemon status <code>service docker status</code> or <code>systemctl status docker.service</code> Restart Docker daemon <code>service docker restart</code> or <code>systemctl restart docker.service</code> Stop Docker daemon <code>service docker stop</code> or <code>systemctl stop docker.service</code> Tail Docker daemon logs <code>journalctl -u docker.service -f</code>"},{"location":"kubernetes/#kubernetes-networking-commands","title":"Kubernetes networking commands","text":"Description Command List interfaces on the host <code>ip link</code> Lists IP address assigned to the interfaces <code>ip addr</code> View the routing table <code>ip route</code> Add the entries to the routing table <code>ip route add 192.168.1.0/24 via 192.168.2.1</code> Enable ipv4 forwarding <code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</code> Enable ipv6 forwarding <code>echo 1 &gt; /proc/sys/net/ipv6/ip_forward</code> list network namespaces <code>ip netns</code> Adding blue namespace <code>ip netns add blue</code> Exec to the particular namesapce <code>ip netns exec NAMESPACE_NAME ip link</code> or <code>ip -n red link</code>"},{"location":"kubernetes/#kubernetes-cluster-upgrade-kubeadm-way","title":"Kubernetes cluster upgrade kubeadm way","text":"Description Command Install kubeadm new version <code>apt-get upgrade -y kubeadm=1.19.0-00</code> Upgrade plan <code>kubeadm upgarade plan v1.19.0</code> Apply upgrade plan <code>kubeadm upgrade apply v1.19.0</code> Update kubelet <code>apt-get upgrade kubelet=1.19.0-00</code> Update kubelet configuration <code>kubeadm upgarde node config --kubelet-version v1.19.0</code> Restart kubelet <code>systemctl restart kubelet</code>"},{"location":"kubernetes/#etcd-backup-restore","title":"ETCD Backup &amp; Restore","text":"Description Command ETCD Backup <code>ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 --cacert=\"/etc/kubernetes/pki/etcd/server.crt\" --cert=\"/etc/kubernetes/pki/etcd/ca.crt\" --key=\"/etc/kubernetes/pki/etcd/ca.key\" snapshot save /tmp/snapshot-pre-boot.db</code> ETCD Restore <code>ETCDCTL_API=3 etcdctl --endpoints=https://[127.0.0.1]:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --name=master --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key --data-dir /var/lib/etcd-from-backup --initial-cluster=master=https://127.0.0.1:2380 --initial-cluster-token etcd-cluster-1 --initial-advertise-peer-urls=https://127.0.0.1:2380 snapshot restore /tmp/snapshot-pre-boot.db</code>"},{"location":"kubernetes/#pod","title":"Pod","text":"NAME SHORTNAMES APIGROUP NAMESPACED KIND VERBS <code>pods</code> <code>po</code> - <code>true</code> <code>Pod</code> <code>[create delete deletecollection get list patch update watch]</code> Description Kubectl Command Create <code>kubectl run nginx --generator=run-pod/v1 --image=nginx</code> Create in particular namespace <code>kubectl run nginx --generator=run-pod/v1 --image=nginx -n NAMEPSPACE</code> Dry run,print object without creating it <code>kubectl run POD_NAME --generator=run-pod/v1 --image=nginx --dry-run -o yaml</code> Create from File <code>kubectl create -f pod.yaml</code> Create from File in particular namespace <code>kubectl create -f pod.yaml -n NAMEPSPACE</code> List pods <code>kubectl get po</code> or <code>kubectl get pod</code> or <code>kubectl get pods</code> List pods in all namespaces <code>kubectl get pods --all-namespaces</code> or <code>kubectl get pods -A</code> List pods with more information <code>kubectl get pods -owide</code> List pods information in custom columns <code>kubectl get pod POD_NAME -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image</code> Verbose Debug information/describe pod <code>kubectl describe pod POD_NAME</code> Logs <code>kubectl logs POD_NAME</code> Logs (multi-container case) <code>kubectl logs POD_NAME -c CONTAINER_NAME</code> Tail pod logs <code>kubectl logs -f POD_NAME</code> Tail pods logs (multi-container case) <code>kubectl logs -f POD_NAME -c CONTAINER_NAME</code> Delete pod <code>kubectl delete pod POD_NAME</code> or <code>kubectl delete -f pod.yaml</code> or <code>kubectl delete pod/POD_NAME</code> Delete pod in particular namespace <code>kubectl delete pod POD_NAME -n NAMESPACE</code> Delete pod forcefully <code>kubectl delete pod my-pod --grace-period=0 --force</code> Get pod <code>kubectl get pod POD_NAME</code> Watch pod <code>kubectl get pod POD_NAME --watch</code> Patch pod <code>kubectl patch pod valid-pod -p '{\"spec\":{\"containers\":[{\"name\":\"kubernetes-serve-hostname\"}]}}'</code> Create and wrtie its spec to file <code>kubectl run POD_NAME --image=nginx --restart=Never --dry-run -o yaml &gt; pod.yaml</code> List pod in Json output format <code>kubectl get pods -o json</code> List pod in YAML output format <code>kubectl get pods -o yaml</code> Run command in existing pod <code>kubectl exec POD_NAME -- ls /</code> Run command in existing pod (multi-container case) <code>kubectl exec POD_NAME -c CONTAINER_NAME -- ls /</code> Exec to pod <code>kubectl exec -it POD_NAME bash</code> List Kubernetes critical pods <code>kubectl get pods -n kube-system</code>"},{"location":"kubernetes/#replicaset","title":"ReplicaSet","text":"NAME SHORTNAMES APIGROUP NAMESPACED KIND VERBS <code>replicasets</code> <code>rs</code> <code>apps</code>,<code>extensions</code> <code>true</code> <code>ReplicaSet</code> <code>[create delete deletecollection get list patch update watch]</code> Verb Description Kubectl Command create <code>kubectl create -f replicaset.yaml</code> List <code>kubectl get rs</code> or <code>kubectl get replicaset</code> or <code>kubectl get replicasets</code> List replicasets with more information <code>kubectl get rs -owide</code> List in all namespaces <code>kubectl get rs --all-namespaces</code> or <code>kubectl get rs -A</code> Delete <code>kubectl delete rs REPLICASET_NAME</code> or <code>kubectl delete -f replicaset.yaml</code> Get <code>kubectl get rs REPLICASET_NAME</code>"},{"location":"kubernetes/#deploymentsscalerolling-updates-rollbacks","title":"Deployments,Scale,Rolling Updates &amp; Rollbacks","text":"NAME SHORTNAMES APIGROUP NAMESPACED KIND VERBS <code>deployments</code> <code>deploy</code> <code>apps</code>,<code>extensions</code> <code>true</code> <code>Deployment</code> <code>[create delete deletecollection get list patch update watch]</code> Verb Description Kubectl Command Deployment Strategy Types <code>Rolling-Update</code> or <code>Recreate</code> Create Deployment <code>kubectl create deployment DEPLOYMENT_NAME --image=busybox</code> Run deployment with 2 replicas <code>kubectl run POD_NAME --image=nginx --replicas=2 --port=80</code> List deployments <code>kubectl get deploy</code> or <code>kubectl get deployment</code> or <code>kubectl get deployments</code> List deployments in all namespaces <code>kubectl get deploy --all-namespaces</code> or <code>kubectl get deploy -A</code> List deployments in particular namespace <code>kubectl get deploy -n NAMESPACE</code> List deployments with more information <code>kubectl get deploy -owide</code> Delete deployment <code>kubectl delete deploy DEPLOYMENT_NAME</code> or <code>kubectl delete -f deployment.yaml</code> Get particular deployment <code>kubectl get deploy DEPLOYMENT_NAME</code> Run deployment and expose it <code>kubectl run DEPLOYMENT_NAME --image=nginx --port=80 --expose</code> Update the nginx Pods to use the\u00a0nginx:1.9.1\u00a0image instead of the\u00a0nginx:1.7.9\u00a0image <code>kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1 --record</code> Edit the Deployment <code>kubectl edit deploy/DEPLOYMENT_NAME</code> Deployment rollout status <code>kubectl rollout status deploy/DEPLOYMENT_NAME</code> Deployment rollout history <code>kubectl rollout history deploy/DEPLOYMENT_NAME</code> Rolling back deployment to previous version <code>kubectl rollout undo deploy/DEPLOYMENT_NAME</code> Scaling deployment <code>kubectl scale --replicas=2 deploy/DEPLOYMENT_NAME</code> Pausing deployment <code>kubectl rollout pause deploy/DEPLOYMENT_NAME</code> Resuming deployment <code>kubectl rollout resume deploy/DEPLOYMENT_NAME</code> Verbose Debug information/describe deployment <code>kubectl describe deploy/DEPLOYMENT_NAME</code> Describe all deployments <code>kubectl describe deployments</code> Watch deployment <code>kubectl get deploy/DEPLOYMENT_NAME --watch</code>"},{"location":"kubernetes/#daemonset","title":"DaemonSet","text":"NAME SHORTNAMES APIGROUP NAMESPACED KIND VERBS <code>daemonsets</code> <code>ds</code> <code>apps</code>,<code>extensions</code> <code>true</code> <code>DaemonSet</code> <code>[create delete deletecollection get list patch update watch]</code> Verb Description Kubectl Command List daemonsets <code>kubectl get ds</code> or <code>kubectl get daemonset</code> or <code>kubectl get daemonset</code> List daemonsets in all namespaces <code>kubectl get ds --all-namespaces</code> or <code>kubectl get ds -A</code> List daemonsets with more information <code>kubectl get ds -owide</code> Delete <code>kubectl delete ds DAEMONSET_NAME</code> or <code>kubectl delete -f daemonset.yaml</code> Get particular daemonset <code>kubectl get ds DAEMONSET_NAME</code> Verbose Debug information/describe Daemonset <code>kubectl describe ds/DAEMONSET_NAME</code>"},{"location":"kubernetes/#jobs","title":"Jobs","text":"NAME SHORTNAMES APIGROUP NAMESPACED KIND VERBS <code>jobs</code> - <code>batch</code> <code>true</code> <code>Job</code> <code>[create delete deletecollection get list patch update watch]</code> Verb Description Kubectl Command Create <code>kubectl create job my-job --image=busybox</code> Create a job with command <code>kubectl create job my-job --image=busybox -- date</code> Create a job from a CronJob named \"a-cronjob\" <code>kubectl create job test-job --from=cronjob/a-cronjob</code> List jobs <code>kubectl get jobs</code> or <code>kubectl get job</code> List jobs in all namespaces <code>kubectl get jobs --all-namespaces</code> or <code>kubectl get jobs -A</code> List with more information <code>kubectl get job -owide</code> Delete <code>kubectl delete jobs JOB_NAME</code> or <code>kubectl delete -f job.yaml</code> Get particular cronjob <code>kubectl get cj cronjob_NAME</code> Verbose Debug information/describe job <code>kubectl describe jobs/CRRONJOB_NAME</code>"},{"location":"kubernetes/#cronjob","title":"CronJob","text":"NAME SHORTNAMES APIGROUP NAMESPACED KIND VERBS <code>cronjobs</code> <code>cj</code> <code>batch</code> <code>true</code> <code>CronJob</code> <code>[create delete deletecollection get list patch update watch]</code> Verb Description Kubectl Command Create with schedule <code>kubectl create cronjob CRONJOB_NAME --image=busybox --schedule=\"*/1 * * * *\"</code> List <code>kubectl get cj</code> or <code>kubectl get cronjob</code> or <code>kubectl get cronjobs</code> List in all namespaces <code>kubectl get cj --all-namespaces</code> or <code>kubectl get cj -A</code> List with more information <code>kubectl get cj -owide</code> Delete <code>kubectl delete cj CRONJOB_NAME</code> or <code>kubectl delete -f cronjob.yaml</code> Get particular cronjob <code>kubectl get cj cronjob_NAME</code> Verbose Debug information/describe cronjob <code>kubectl describe cj/CRRONJOB_NAME</code>"},{"location":"kubernetes/#service","title":"Service","text":"NAME SHORTNAMES APIGROUP NAMESPACED KIND VERBS <code>services</code> <code>svc</code> <code>-</code> <code>true</code> <code>Service</code> <code>[create delete get list patch update watch]</code> Service Type Description Kubectl Command ClusterIP Create service <code>kubectl create service clusterip my-cs --tcp=5678:8080</code> Create service in headless mode <code>kubectl create service clusterip my-cs --clusterip=\"None\"</code> ExternalName Create an ExternalName service <code>kubectl create service externalname my-ns --external-name example.com</code> LoadBalancer Create a LoadBalancer service <code>kubectl create service loadbalancer my-lbs --tcp=5678:8080</code> NodePort Create a NodePort service <code>kubectl create service nodeport my-ns --tcp=5678:8080</code> Verb Description Kubectl Command List <code>kubectl get service</code> or <code>kubectl get svc</code> List in all namespaces <code>kubectl get service --all-namespaces</code> or <code>kubectl get svc -A</code> List with more information <code>kubectl get svc -owide</code> or <code>kubectl get service -owide</code> Delete <code>kubectl delete svc SERVICE_NAME</code> or <code>kubectl delete -f service.yaml</code> Get particular service <code>kubectl get service SERVICE_NAME</code> Verbose Debug information/describe service <code>kubectl describe svc/SERVICE_NAME</code>"},{"location":"kubernetes/#namespace","title":"Namespace","text":"NAME SHORTNAMES APIGROUP NAMESPACED KIND VERBS <code>namespaces</code> <code>ns</code> <code>-</code> <code>false</code> <code>Namespace</code> <code>[create delete get list patch update watch]</code> Verb Description Kubectl Command List <code>kubectl get namespaces</code> or <code>kubectl get ns</code> Create <code>kubectl create ns TEST</code> Delete <code>kubectl delete ns TEST</code> or <code>kubectl delete -f namespace.yaml</code> Get particular namespace <code>kubectl get ns TEST</code> Verbose Debug information/describe service <code>kubectl describe ns/TEST</code>"},{"location":"kubernetes/#serviceaccounts","title":"Serviceaccounts","text":"NAME SHORTNAMES APIGROUP NAMESPACED KIND VERBS <code>serviceaccounts</code> <code>sa</code> <code>-</code> <code>true</code> <code>ServiceAccount</code> <code>[create delete deletecollection get list patch update watch]</code> Verb Description Kubectl Command List <code>kubectl get sa</code> Create <code>kubectl create serviceaccount my-service-account</code> Delete <code>kubectl delete serviceaccount my-service-account</code> or <code>kubectl delete -f my-service-account.yaml</code> Get particular sa <code>kubectl get sa my-service-account</code> Verbose Debug information/describe service <code>kubectl describe sa/my-service-account</code>"},{"location":"kubernetes/#node-maintenance","title":"Node Maintenance","text":"Description Command Mark node as unschedulable <code>kubectl cordon $NODE_NAME</code> Mark node as schedulable <code>kubectl uncordon $NODE_NAME</code> Drain node in preparation for maintenance <code>kubectl drain $NODE_NAME</code> Drain node with grace period of 15 mins <code>kubectl drain $NODE_NAME --grace-period=900</code> Drain node forcefully <code>kubectl drain $NODE_NAME --force</code> Ignore DaemonSet-managed pods while draining node <code>kubectl drain $NODE_NAME --grace-period=900 --ignore-daemonsets=true</code>"},{"location":"kubernetes/#events","title":"Events","text":"Description Command View all events <code>kubectl get events --all-namespaces</code> or <code>kubectl get events -A</code> List Events sorted by timestamp <code>kubectl get events --sort-by=.metadata.creationTimestamp</code> List Events only in kube-system namespace <code>kubectl get events -n kube-system</code>"},{"location":"linux/","title":"Linux Commands","text":""},{"location":"linux/#user-information","title":"User Information","text":"<ol> <li> <p>who It is used to get information about currently logged in user on to system. If you don't provide any option or arguments, the command displays the following information for each logged-in user.</p> <ol> <li>Login name of the user</li> <li>User terminal</li> <li>Date &amp; Time of login</li> <li>Remote host name of the user</li> </ol> </li> </ol> <pre><code>$ who\nsudheer :0 2019-08-04 01:21 (:0)\n</code></pre> <ol> <li>whoami: It display the system\u2019s username</li> </ol> <pre><code>$ whoami\nsudheer\n</code></pre> <ol> <li>id: It display the user identification(the real and effective user and group IDs) information</li> </ol> <p><pre><code>$ id\nuid=1000(sj) gid=1000(sj) groups=1000(sj),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),120(lpadmin),131(lxd),132(sambashare)\n</code></pre> 4. groups: This command is used to display all the groups for which the user belongs to.</p> <pre><code>$ group\nsj: sj, adm, cdrom, sudo, dip, plugdev, lpadmin, lxd, sambashare\n</code></pre> <ol> <li>finger:  Used to check the information of any currently logged in users. i.e, It displays users login time, tty (name), idle time, home directory, shell name etc.</li> </ol> <pre><code>$ finger\nLogin     Name       Tty      Idle  Login Time   Office     Office Phone\nsj        sj        *:0             Aug 28 01:27 (:0)\n</code></pre> <p>This may not be available by default in many linux machines. In this case, you need to install it manually.</p> <p><pre><code>$ sudo apt install finger\n</code></pre> 6. users: Displays usernames of all users currently logged on the system.</p> <pre><code>$ users\nsj\n</code></pre> <ol> <li> <p>grep: It  is a powerful pattern searching tool to find information about a specific user from the system accounts file: /etc/passwd.</p> <pre><code>$ grep -i sj /etc/passwd\nsj:x:1000:1000:sj,,,:/home/sj:/bin/bash\n</code></pre> </li> <li> <p>W Command: It(W) is a command-line utility that displays information about currently logged in users and what each user is doing.</p> <pre><code>w [OPTIONS] [USER]\n\nExample:\nw\n 18:45:04 up  2:09,  1 user,  load average: 0.09, 0.07, 0.02\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nsj       :0       :0               01:27   ?xdm?   1:14   0.01s /usr/lib/gdm3/g\n</code></pre> </li> <li> <p>last or lastb: Displays a list of last logged in users on the system. You can pass user names to display their login and hostname details.</p> <pre><code>last [options] [username...] [tty...]\n\nExample:\n\nlast\nsj       :0           :0               Fri Aug 28 01:27    gone - no logout\nreboot   system boot  5.4.0-29-generic Fri Aug 28 01:27   still running\nsj       :0           :0               Wed Jul 29 11:46 - crash (29+13:40)\nreboot   system boot  5.4.0-29-generic Wed Jul 29 11:45   still running\nsj       :0           :0               Thu May 14 21:04 - crash (75+14:41)\nreboot   system boot  5.4.0-29-generic Thu May 14 21:03   still running\n\nwtmp begins Thu May 14 21:03:56 2020\n</code></pre> </li> <li> <p>lastlog: The <code>lastlog</code> command is used to find the details of a recent login of all users or of a given user.</p> <pre><code>$ lastlog\n\nUsername         Port     From             Latest\nroot                                       **Never logged in**\ndaemon                                     **Never logged in**\nbin                                        **Never logged in**\nsys                                        **Never logged in**\nsync                                       **Never logged in**\ngames                                      **Never logged in**\nman                                        **Never logged in**\nlp                                         **Never logged in**\nmail                                       **Never logged in**\nnews                                       **Never logged in**\n</code></pre> </li> </ol> <p>\u2b06 Back to Top</p>"},{"location":"linux/#file-and-directory-commands","title":"File and directory commands","text":"<ol> <li> <p>pwd The pwd(Present Working Directory) command is used to print the name of the present/current working directory starting from the root.    <pre><code>$ pwd\n/home/sj/Desktop/Linux\n</code></pre></p> </li> <li> <p>ls: The <code>ls</code> command is used to list files or directories. It also accepts some flags or options that changes how files or directories are listed in your terminal.</p> <pre><code> Syntax:\n ls [flags] [directory]\n\n Example:\n $ ls\n bin dev lib libx32 mnt  \n\n //Listing files &amp; directories with time in a rever order\n $ ls -ltr\n drwxr-xr-x 2 sj sj 4096 May 14  2020 Videos\n drwxr-xr-x 2 sj sj 4096 May 14  2020 Templates\n drwxr-xr-x 2 sj sj 4096 May 14  2020 Public\n\n //Home directory\n $ ls ~\n Desktop    Downloads  Pictures  Sudheer    test   test.txt\n Documents  Music      Public    Templates  test1  Videos\n</code></pre> <p>Below are the list of possible options for <code>ls</code> command,</p> <pre><code>-a Show all (including hidden)\n-R Recursive list\n-r Reverse order\n-t Sort by last modified\n-S Sort by file size\n-l Long listing format\n-1 One file per line\n-m Comma-\u00adsep\u00adarated output\n-Q Quoted output\n</code></pre> </li> <li> <p>mkdir The mkdir(make directory) command allows users to create directories or folders.</p> </li> </ol> <pre><code>$ mkdir ubuntu\n$ ls\nubuntu\n</code></pre> <p>The option '-p' is used to create multiple directories or parent directories at once.</p> <pre><code>$ mkdir -p dir1/dir2/dir3\n$ cd dir1/dir2/dir3\n~/Desktop/Linux/dir1/dir2/dir3$\n</code></pre> <ol> <li> <p>rmdir: The rmdir(remove directories) is used to remove empty directories. Can be used to delete multiple empty directories as well. Safer to use compared to <code>rm -r FolderName</code>. This command can also be forced to delete non-empty directories.</p> </li> <li> <p>Remove empty directory:</p> </li> </ol> <pre><code>rmdir FolderName\n</code></pre> <ol> <li>Remove multiple directories:</li> </ol> <pre><code>rmdir FolderName1 FolderName2 FolderName3\n</code></pre> <ol> <li>Remove non-empty directories:</li> </ol> <pre><code>rmdir FolderName1 --ignore-fail-on-non-empty\n</code></pre> <ol> <li>Remove entire directory tree. This command is similar to <code>rmdir a/b/c a/b a</code>:</li> </ol> <pre><code>rmdir -p a/b/c\n</code></pre> <ol> <li>rm: The rm(remove) command is used to remove objects such as files, directories, symbolic links etc from the file system.</li> <li>Remove file: The rm command is used to remove or delete a file    <pre><code>rm file_name\n</code></pre></li> <li>Remove file forcefully: The rm command with -f option is used for removal of file without prompting for confirmation.    <pre><code>rm -f filename\n</code></pre></li> <li>Remove directory: The rm command with -r option is used to remove the directory and its contents recursively.    <pre><code>rm -r myDir\n</code></pre></li> <li>Remove directory forcefully: The rm command with -rf option is used to forcefully remove directory recursively.    <pre><code>rm -rf myDir\n</code></pre></li> <li>touch: The touch command is is used to create, change and modify timestamps of a file without any content.</li> <li>Create a new file: You can create a single file at a time using touch command. The file created is an empty file.        <pre><code>touch file_name\n</code></pre></li> <li>Create multiple files: You can create the multiple numbers of files at the same time.        <pre><code>touch file1_name file2_name file3_name\n</code></pre></li> <li>Change access time: The touch command with <code>a</code> option is used to change the access time of a file.        <pre><code>touch -a file_name\n</code></pre></li> <li>Change modification time: The touch command with <code>m</code> option is used to change the modified time.        <pre><code>touch -m file_name\n</code></pre></li> <li> <p>Use timestamp of other file: The touch command with <code>r</code> option is used to get timestamp of another file.        <pre><code>touch -r file2 file1\n</code></pre></p> <p>In the above example, we get the timestamp of file1 for file2.</p> </li> <li> <p>Create file with Specific time: The touch command with 't' option is used to create a file with specified time.        <pre><code>touch -t 1911010000 file_name\n</code></pre></p> </li> <li>cat: The cat command is used to create single or multiple files, view contain of file, concatenate files and redirect output in terminal or files.      <pre><code>$ cat [OPTION] [FILE]...\n</code></pre></li> <li>Create a file: Used to create a file with specific name, content and press exit using <code>CTRL + D</code> <pre><code>cat &gt; file_name1.txt\nHello, How are you?\n</code></pre></li> <li> <p>View file contents: You can view contents of a single or more files by mentioning the filenames.</p> <p><pre><code>cat file_name1 file_name2\n</code></pre>    3. More &amp; Less options: If a file having a large number of content that won\u2019t fit in the output terminal then <code>more</code> &amp; <code>less</code> options can be used to indiate additional content.</p> <pre><code>cat file_name1.txt | more\ncat file_name1.txt | less\n</code></pre> </li> </ol> <p>\u2b06 Back to Top</p>"},{"location":"linux/#file-permissions","title":"File permissions","text":"<p>Since Linux is a multi-user operating system, it is necessary to provide security to prevent people from accessing each other\u2019s confidential files. So Linux divides authorization into 2 levels,</p> <ol> <li> <p>Ownership: Each file or directory has assigned with 3 types of owners i. User: Owner of the file who created it. ii. Group: Group of users with the same access permissions to the file or directory. iii. Other: Applies to all other users on the system</p> </li> <li> <p>Permissions: Each file or directory has following permissions for the above 3 types of owners.</p> <p>i.   Read: Give you the authority to open and read a file and lists its content for a directory.</p> <p>ii.  Write: Give you the authority to modify the contents of a file and add, remove and rename files stored in the directory.</p> <p>iii. Execute: Give you the authority to run the program in Unix/Linux.</p> <p>The permissions are indicated with below characters,</p> <pre><code> r = read permission\n\n w = write permission\n\n x = execute permission\n\n \\- = no permission\n</code></pre> <p>The above authorization levels represented in a diagram</p> </li> </ol> <p></p> <p>There is a need to restrict own file/directory access to others.</p> <p>Change access: The <code>chmod</code> command is used to change the access mode of a file.  This command is used to set permissions (read, write, execute) on a file/directory for the owner, group and the others group.</p> <pre><code>chmod [reference][operator][mode] file...\n\nExample\nchmod ugo-rwx test.txt\n</code></pre> <p>There are 2 ways to use this command,</p> <ol> <li> <p>Absolute mode: The file permissions will be represented in a three-digit octal number.</p> <p>The possible permissions types represented in a number format as below.</p> Permission Type Number Symbol No Permission 0 --- Execute 1 --x Write 2 -w- Execute + Write 3 -wx Read 4 r-- Read + Execute 5 r-x Read + Write 6 rw- Read + Write + Execute 7 rwx </li> </ol> <p>Let's update the permissions in absolute mode with an example as below,</p> <pre><code> chmode 764 test.txt\n</code></pre> <ol> <li> <p>Symbolic mode: In the symbolic mode, you can modify permissions of a specific owner unlike absolute mode.</p> <p>The owners are represented as below,</p> Owner Description u user/owner g group o other a all <p>and the list of mathematical symbols to modify the file permissions as follows,</p> Operator Description + Adds permission - Removes the permission = Assign the permission </li> </ol> <p>Changing Ownership and Group: It is possible to change the the ownership and group of a file/directory using <code>chown</code> command.</p> <pre><code>chown user filename\nchown user:group filename\n\nExample:\nchown John test.txt\nchown John:Admin test.txt\n</code></pre> <p>Change group-owner only: Sometimes you may need to change group owner only. In this case, chgrp command need to be used</p> <pre><code>chgrp group_name filename\n\nExample:\nsudo chgrp Administrator test.txt\n</code></pre> <p>\u2b06 Back to Top</p>"},{"location":"linux/#networking","title":"Networking","text":"<ol> <li>Display network information: <code>ifconfig</code> command is used to display all network information(ip address, ports etc)</li> </ol> <pre><code>ifconfig -a\n</code></pre> <ol> <li> <p>Test connection to a remote machine: Send an echo request to test connection of a remote machine.</p> <pre><code>ping &lt;ip-address&gt; or hostname\n\nExample:\nping 10.0.0.11\n</code></pre> </li> <li> <p>Show IP Address: Display ip address of a currennt machine</p> <pre><code>hostname -I\n(OR)\nip addr show\n</code></pre> </li> <li> <p>Active ports: Shows active or listening ports</p> <pre><code>netstat -pnltu\n</code></pre> </li> <li> <p>Find information about domain: <code>whois</code> command is used to find out information about a domain, such as the owner of the domain, the owner\u2019s contact information, and the nameservers used by domain.</p> <pre><code>whois [domain]\n\nExample:\nwhois google.com\n</code></pre> </li> </ol> <p>\u2b06 Back to Top</p>"},{"location":"linux/#installing-packages","title":"Installing packages","text":"<ol> <li>Install package:</li> </ol> <pre><code>yum install package_name\n</code></pre> <ol> <li>Package description: The info command is used to display brief details about a package.</li> </ol> <pre><code>yum info package_name\n</code></pre> <ol> <li>Uninstall package: The remove command is used to remove or uninstall package name. <pre><code>yum remove package_name\n</code></pre></li> <li>Install package from local file:</li> </ol> <p>It is also possible to install package from local file named package_name.rpm.</p> <pre><code>rpm -i package_name.rpm\n</code></pre> <ol> <li>Install from source code:</li> </ol> <pre><code>tar zxvf sourcecode.tar.gz\ncd sourcecode\n./configure\nmake\nmake install\n</code></pre> <p>\u2b06 Back to Top</p>"},{"location":"linux/#disk-usage","title":"Disk usage","text":"<ol> <li>Synopsis: <code>du</code> command is used to check the information of disk usage of files and directories on a machine</li> </ol> <pre><code>du [OPTION]... [FILE]...\n</code></pre> <ol> <li>Disk usage of a directory: To find out the disk usage summary of a /home/ directory tree and each of its sub directories</li> </ol> <pre><code>du  /home/\n</code></pre> <ol> <li>Disk usage in human readable format: To find out the disk usage in human readable format</li> </ol> <pre><code>du  -h /home/\n</code></pre> <ol> <li>Total disk usage of a directory: To find out the total disk usage</li> </ol> <pre><code>du  -sh /home/\n</code></pre> <ol> <li>Total disk usage of all files and directories: To find out the total disk usage of files and directories</li> </ol> <pre><code>du  -ah /home/\n</code></pre> <ol> <li>Total disk usage of all files and directories upto certain depth: print the total for a directory only if it is N or fewer levels below the command</li> </ol> <pre><code>du  -ah --max-depth 2 /home/\n</code></pre> <ol> <li>Total disk usage with excluded files: To find out the total disk usage of files and directories, but excludes the files that matches given pattern.</li> </ol> <pre><code>du -ah --exclude=\"*.txt\" /home/\n</code></pre> <ol> <li>Help: This command gives information about <code>du</code></li> </ol> <pre><code>du  --help\n</code></pre> <p>\u2b06 Back to Top</p>"},{"location":"linux/#system-and-hardware-information","title":"System and Hardware information","text":"<ol> <li>Print all information: <code>uname</code> is mainly used to print system information.</li> </ol> <pre><code>$ uname -a\n</code></pre> <ol> <li>Print kernel name:</li> </ol> <pre><code>$ uname -s\n</code></pre> <ol> <li>Print kernel release:</li> </ol> <pre><code>$ uname -r\n</code></pre> <ol> <li>Print Architecture:</li> </ol> <pre><code>$ uname -m\n</code></pre> <ol> <li>Print Operating System:</li> </ol> <pre><code>$ uname -o\n</code></pre> <p>\u2b06 Back to Top</p>"},{"location":"linux/#search-files","title":"Search Files","text":"<ol> <li>Pattern search: The <code>grep</code> command is used to search patterns in files.</li> </ol> <pre><code>grep pattern files\ngrep -i // Case sensitive\ngrep -r // Recursive\ngrep -v // Inverted search\n\nExample:\ngrep \"^hello\" test.txt // Hello John\ngrep -i \"hELLo\" text.txt // Hello John\n</code></pre> <ol> <li>Find files and directories:</li> </ol> <p>The <code>find</code> command is used to find or search files and directories by file name, folder name, creation date, modification date, owner and permissions etc and perform subsequent operations on them.</p> <p>i. Search file with name:</p> <pre><code>find ./directory_name -name file_name\n\nExample:\nfind ./test -name test.txt // ./test/test.txt\n</code></pre> <p>ii. Search file with pattern:</p> <pre><code>find ./directory_name -name file_pattern\n\nExample:\nfind ./test -name *.txt // ./test/test.txt\n</code></pre> <p>iii. Search file with executable action:</p> <pre><code>find ./directory_name -name file_name -exec command\n\nExample:\nfind ./test -name test.txt -exec rm -i {} \\; // Search file and delete it after confirmation\n</code></pre> <p>iv. Search for empty files or directories:</p> <p>The find command is used to search all empty folders and files in the entered directory or sub-directories.</p> <pre><code>find ./directory_name -empty\n\nExample:\nfind ./test -empty\n//./test/test1\n//./test/test2\n//./test/test1.txt\n</code></pre> <p>v. Search for files with permissions:</p> <p>The find command is used to find all the files in the mentioned directory or sub-directory with the given permissions</p> <pre><code>find ./directory_name -perm permission_code\n\nExample:\nfind ./test -perm 664\n</code></pre> <p>vi. Search text within multiple files:</p> <pre><code>find ./ -type f -name file_pattern -exec grep some_text  {} \\;\n\nExample:\nfind ./ -type f -name \"*.txt\" -exec grep 'World'  {} \\; // Hello World\n</code></pre> <ol> <li>Whereis to locate binary or source files for a command: The whereis command in Linux is used to locate the binary, source, and manual page files for a command. i.e, It is used to It is used to find executables of a program, its man pages and configuration files.</li> </ol> <pre><code>whereis command_name\n\nExample:\nwhereis netstat //netstat:  /bin/netstat /usr/share/man/man8/netstat.8.gz(i.e, executable and location of its man page)\n</code></pre> <ol> <li>Locate to find files: The locate command is used to find the files by name. This command is faster compared to find command because it searches database for the filename instead of searching your filesystem.</li> </ol> <pre><code>locate [OPTION] PATTERN\n\nExample:\nlocate \"*.txt\" -n 10 // 10 file search results ending with .txt extension\n</code></pre> <p>\u2b06 Back to Top</p>"},{"location":"linux/#ssh","title":"SSH","text":"<p>SSH (Secure Shell) is a network protocol that enables secure remote connections between two systems.</p> <ol> <li>Connect remote machine using IP address or machine name: The remote server can be connected with local user name using either host name or IP address</li> </ol> <pre><code>ssh &lt;host-name&gt; or &lt;ip-address&gt;\n\nExample:\nssh 192.111.66.100\nssh test.remoteserver.com\n</code></pre> <ol> <li>Connect remote machine using username: It is also possible specify a user for an SSH connection.</li> </ol> <pre><code>ssh username@hostname_or_ip-address\n\nExample:\nssh john@192.0.0.22\nssh john@test.remoteserver.com\n</code></pre> <ol> <li>:Connect remote machine using custom port By default, the SSH server listens for a connection on port 22. But you can also specify the custom port.</li> </ol> <pre><code>ssh &lt;host-name&gt; or &lt;ip-address&gt; -p port_number\n\nExample:\nssh test.remoteserver.com -p 3322\n</code></pre> <ol> <li>Generate SSH keys using keygen: SSH Keygen is used to generate a key pair which consists of public and private keys to improve the security of SSH connections.</li> </ol> <pre><code>ssh-keygen -t rsa\n</code></pre> <ol> <li>Copying SSH keys to servers: For SSH authentication, <code>ssh-copy-id</code> command will be used to copy public key(id_rsa.pub) to server.</li> </ol> <pre><code>ssh-copy-id hostname_or_IP\n</code></pre> <ol> <li>Copy a File Remotely over SSH: SCP tool is used to securely copy files over the SSH protocol.</li> </ol> <pre><code>scp fileName user@remotehost:destinationPath\n\nExample:\nscp test.txt test@10.0.0.64:/home/john/Desktop\n</code></pre> <ol> <li>Edit SSH Config File SSH server options customized by editing the settings in <code>sshd_config</code> file.</li> </ol> <pre><code>sudo vim /etc/ssh/sshd_config\n</code></pre> <ol> <li>Run commands on a remote server SSH commands can be executed on remote machine using the local machine.</li> </ol> <pre><code>ssh test.remoteserver.com mkdir NewDirectoryName // Creating directory on remote machine\n</code></pre> <ol> <li>Restart SSH service: You need to restart the service in Linux after making changes to SSH configuration.</li> </ol> <pre><code>sudo ssh service restart\n(or)\nsudo sshd service restart\n</code></pre> <p>\u2b06 Back to Top</p>"},{"location":"linux/#vivim-commands","title":"Vi/Vim-commands","text":"<p>Vi editor is the most popular text editor from the early days of Unix. Whereas Vim(Vi IMproved) is an improved version of vi editor to be used in CLI (command line interface) for mainly text editing tasks in many configuration files. Some of the other alternatives are Elvis, Nvi, Nano, Joe, and Vile. It has two main operation modes,</p> <ol> <li>Command Mode: It allows the entry of commands to manipulate text.</li> <li>Entry mode(Or Insert mode): It allows typed characters on the keyboard into the current file.</li> </ol>"},{"location":"linux/#1-start-with-vi-editor","title":"1. Start with Vi Editor","text":"<p>You can create a new file or open an existing file using <code>vi filename</code> command.</p> <pre><code> vi &lt;filename_NEW&gt; or &lt;filename_EXISTING&gt; // Create a new file or open an existing file\n\n Example:\n vi first.txt\n</code></pre> <p>Let's see how do you create file, enter the content and leave the CLI by saving the changes.</p> <ol> <li>Create a new file named <code>first.txt</code></li> <li>Press <code>i</code> to enter the insert mode</li> <li>Enter the text \"Hello World!\"</li> <li>Save the text and exit by pressing <code>:wq!</code> command</li> <li>Check the entered text</li> </ol>"},{"location":"linux/#2-cursor-movement","title":"2. Cursor movement","text":"<pre><code>These commands will be used in Command mode.\n</code></pre>"},{"location":"linux/#move-cursor","title":"Move cursor","text":"<p>You can use arrow keys(left, right, up and down) to move the cursor on the terminal. But you can also other keys for this behavior.</p> <pre><code> h        # Move left\n j        # Move down\n k        # Move up\n l        # Move right\n</code></pre>"},{"location":"linux/#jump-one-word","title":"Jump one word","text":"<p>These commands used to jump one word at a time</p> <pre><code>w        # Jump forwards to the start of a word\nW        # Jump forwards to the start of a WORD\ne        # Jump forwards to the start of a word\nE        # Jump forwards to the start of a WORD\nb        # Jump backwords to the start of a word\nB        # Jump backwords to the start of a WORD\n</code></pre>"},{"location":"linux/#jump-to-start-or-end-of-a-line-or-next-line","title":"Jump to start or end of a line or next line","text":"<p>These commands used to jump starting or ending of a line or a next line.</p> <pre><code>^        # Jump to the start of a current line\n$        # Jump to the end of a current line\nreturn   # Jump to the start of a next line\n</code></pre>"},{"location":"linux/#move-sides","title":"Move sides","text":"<p>These commands used to moves all sides of the screen</p> <pre><code>Backspace # Move cursor one character to the left\nSpacebar  # Move cursor one character to the right\nH(High)   # Move cursor to the top of the screen\nM(Middle) # Move cursor to the middle of the screen\nL(Low)    # Move cursor to the bottom of the screen\n</code></pre>"},{"location":"linux/#paging-and-scrolling","title":"Paging and Scrolling","text":"<p>Paging is used to moves the cursor up or down through the text a full screen at a time. Whereas Scrolling happens line by line.</p> <pre><code>Ctrl + f     # move forward one full screen\nCtrl + b     # move backward one full screen\nCtrl + d     # move forward half a screen\nCtrl + u     # move backward half a screen\n</code></pre>"},{"location":"linux/#inserting-text","title":"Inserting Text","text":"<p>These commands places vi in entry mode from command mode. First, you need to be in command mode to use the below commands.</p>"},{"location":"linux/#insert","title":"Insert","text":"<pre><code>i    # Insert text to the left of the cursor\nI    # Insert text at the beginning of a line\nESC  # Exit insert mode\n</code></pre>"},{"location":"linux/#append","title":"Append","text":"<pre><code>a    # Insert(or Append) text to the right of the cursor\nA    # Insert(or Append) text at the end of a line\n</code></pre>"},{"location":"linux/#open-a-line","title":"Open a line","text":"<pre><code>o    # Open a line below the current cursor position\nO    # open a line above the current cursor position\n</code></pre>"},{"location":"linux/#editing-text","title":"Editing Text","text":"<ol> <li> <p>Change word: Change word/part of word to right of cursor</p> <pre><code>cw\n</code></pre> </li> <li> <p>Change line Change entire line</p> <pre><code>cc\n</code></pre> </li> <li> <p>Change line from specific character Change from cursor to end of line</p> <pre><code>C\n</code></pre> </li> </ol>"},{"location":"linux/#deleting-text","title":"Deleting Text","text":"<ol> <li> <p>Deleting One Character: Position the cursor over the character to be deleted and type x</p> <p><pre><code>x\nX       //To delete one character before the cursor\n</code></pre> 2. Deleting a Word: Position the cursor at the beginning of the word and type dw</p> <p><pre><code>dw\n</code></pre> 3. Deleting a Line: Position the cursor anywhere on the line and type dd.</p> <pre><code>dd\n</code></pre> </li> </ol>"},{"location":"linux/#cut-copy-paste","title":"Cut, Copy &amp; Paste","text":"<p>Copy, Cut and Paste operations can be done in either Normal or visual Mode.</p> <ol> <li>Normal mode: This mode appears on click of <code>Esc</code> key.</li> </ol> <p>Copy There are various copy or yank commands based on amount of text to be copied. The <code>y</code> character is used to perform this operation.</p> <p>i. Copy an entire line: Just place the cursor at the beginning of the line and type <code>yy</code></p> <pre><code>yy\n</code></pre> <p>ii.Copy three lines: Just place the cursor from where to start copying and type <code>3yy</code></p> <pre><code>3yy\n</code></pre> <p>iii. Copy word with trailing whitespace: Place the cursor at the beginning of the word and type <code>yaw</code></p> <pre><code>yaw\n</code></pre> <p>iv. Copy word without trailing whitespace: Place the cursor at the beginning of the word and type <code>yiw</code>.</p> <pre><code>yiw\n</code></pre> <p>v. Copy right of the cursor: Copy text right of the cursor to the end of line using <code>y$</code> command</p> <pre><code>y$\n</code></pre> <p>vi.Copy left of the cursor: Copy text left of the cursor to the end of line using <code>y^</code> command</p> <pre><code>y^\n</code></pre> <p>vii. Copy text between the cursor and character: Copy text between the cursor and specified character.</p> <pre><code>ytx(Copy until x and x is excluded)\nyfx(Copy until x and x is included)\n</code></pre> <p>Cut There are various cutting or deleting commands based on amount of text to be deleted. The <code>d</code> character is used to perform this operation.</p> <p>i. Cut entire line: Cut the entire line where the cursor is located</p> <pre><code>dd\n</code></pre> <p>ii.Cut three lines: Cut the three lines starting from the place where cursor is located</p> <pre><code>3dd\n</code></pre> <p>iii.Cut right of the cursor: Cut the text from the right of the cursor till the end of line</p> <pre><code>d$\n</code></pre> <p>iii.Cut left of the cursor: Cut the text from the left of the cursor till the beginning of line</p> <pre><code>d^\n</code></pre> <p>Paste This operation is performed using <code>p</code> command to paste the selected text</p> <pre><code>p\n</code></pre> <ol> <li> <p>Visual Mode In this mode, first select the text using below keys</p> <ol> <li>v (lowercase): To select individual characters</li> <li>V (uppercase): To select the entire line</li> <li>Ctrl+v: To select by block</li> </ol> <p>and perform copy, cut and paste operations using y,d and p commands</p> </li> </ol>"},{"location":"linux/#exiting","title":"Exiting","text":"<pre><code>These commands are used to exit from the file.\n```cmd\n:w      # Write (save) the file, but don't exit\n:wq     # Write (save) and quit\n:wq!    # Force write (save) and quit\n:q      # Quit, but it fails if anything has changed\n:q!     # Quit and throw away for any changes\n```\n</code></pre> <p>\u2b06 Back to Top</p>"},{"location":"linux/#toptaskmanager-command","title":"Top/TaskManager Command","text":"<p>top: The <code>top</code> command provides dynamic real-time viewing of the running system. It can display system summary information as well as a list of tasks currently being managed by the Linux kernel.</p>"},{"location":"linux/#options","title":"options","text":"Option Description -b Batch mode -n Number of iterations -s Sec delay between updates -d Delay time in seconds -p Monitor process ID <pre><code>top [options]\n</code></pre> <p>\u2b06 Back to Top</p>"},{"location":"linux/#kill-command","title":"Kill Command","text":"<p>kill: The kill command sends a signal to a process. Useful when trying to terminate a hung process.</p> <p>options: | Option | Description                                   | |--------|-----------------------------------------------| | -s     | Specify the signal to send (e.g., -s SIGTERM) | | -l     | List available signals                        | | -n     | Process group ID                              | | -signal| Specify the signal using signal name or number| | -p     | Specify the process ID to be signaled         |</p>"},{"location":"linux/#kill-command-options","title":"kill Command Options","text":"<ol> <li>-s Option  Specifies the signal to send to the process. Use in the format -s SIGNAL. For example:</li> </ol> <pre><code>kill -s SIGTERM &lt;process_id&gt;\n</code></pre> <ol> <li>-l Option Lists available signals that can be used with the kill command. This option does not send any signal; it only displays a list of signals.</li> </ol> <p><pre><code>kill -l\n</code></pre> 3. -n Option Specifies the process group ID. This option allows you to send a signal to a process group rather than an individual process.</p> <p><pre><code>kill -n &lt;process_group_id&gt;\n</code></pre> 4. -signal Option Specifies the signal to send using either the signal name or number directly.</p> <p><pre><code>kill -TERM &lt;process_id&gt;\n</code></pre> 5. -p Option Specifies the process ID to be signaled. Use in the format -p . <pre><code>kill -p &lt;process_id&gt;\n</code></pre> <p>\u2b06 Back to Top</p>"},{"location":"linux/#history-command-options","title":"History Command Options","text":"<p>The history command shows a list of previously issued commands.</p>"},{"location":"linux/#history-command-options_1","title":"history Command Options","text":"Option Description <code>-c</code> Clears the entire command history. <code>-d offset</code> Deletes the history entry at the specified offset. <code>-a</code> Appends the current session's history to the history file. <code>-r</code> Reads the history file and appends entries to the session. <code>-n</code> Prevents command numbers from being displayed. <code>-w</code> Writes the current session's history to the history file. `-s \"\" Appends the specified entry to the end of the history list. <code>-p offset</code> Prints the history entry at the specified offset. <code>-f file</code> Reads history entries from the specified file. <ol> <li> <p>-c Option Clears the entire command history. <pre><code>history -c\n</code></pre></p> </li> <li> <p>-d offset Option Deletes the history entry at the specified offset.</p> </li> </ol> <pre><code>history -d &lt;offset&gt;\n</code></pre> <ol> <li>-a Option Appends the current session's history to the history file.</li> </ol> <pre><code>history -a\n</code></pre> <ol> <li>-r Option Reads the history file and appends the entries to the current session's history.</li> </ol> <pre><code>history -r\n</code></pre> <ol> <li>-n Option Prevents command numbers from being displayed when using the history command.</li> </ol> <p><pre><code>history -n\n</code></pre> 6. -w Option Writes the current session's history to the history file.</p> <pre><code>history -w\n</code></pre> <ol> <li>-s Option Appends the specified entry to the end of the history list.</li> </ol> <pre><code>history -s \"&lt;command&gt;\"\n</code></pre> <ol> <li>-p Option Prints the history entry at the specified offset.</li> </ol> <pre><code>history -p &lt;offset&gt;\n</code></pre> <ol> <li>-f file Option Reads history entries from the specified file and appends them to the history list.</li> </ol> <pre><code>history -f &lt;file&gt;\n</code></pre> <p>\u2b06 Back to Top</p>"},{"location":"linux/#curl-command","title":"Curl Command","text":"<p>Curl: The curl command transfers data to or from a server. It supports dozens of protocols, including HTTP, HTTPS, FTP, SFTP, Telnet, DICT, LDAP, LDAPS, FILE, IMAP, SMTP, POP3, RTSP and RTMP.</p> <p>Options</p> Option Description <code>-X, --request &lt;command&gt;</code> Specify the HTTP request method (GET, POST, etc.). <code>-H, --header &lt;header&gt;</code> Pass custom headers to the request. <code>--data &lt;data&gt;</code> HTTP POST data. <code>--data-urlencode &lt;data&gt;</code> URL encode the POST data. <code>--form &lt;name=content&gt;</code> Specify multipart/form-data POST data. <code>-d, --data-raw &lt;data&gt;</code> Send data as-is without any encoding. <code>-i, --include</code> Include HTTP headers in the output. <code>--url &lt;url&gt;</code> Specify the URL to send the request to. <code>-o, --output &lt;file&gt;</code> Write output to a file instead of stdout. <code>-O, --remote-name</code> Save the file with the same name as in the URL. <code>-L, --location</code> Follow redirects. <code>--user &lt;user:password&gt;</code> Specify the user and password for server authentication. <code>-u, --user-agent &lt;agent&gt;</code> Set the user-agent string. <code>--cookie &lt;data&gt;</code> Send cookies from string/file. <code>--cookie-jar &lt;file&gt;</code> Save cookies to a file after receiving them. <code>--compressed</code> Request compressed response. <code>-v, --verbose</code> Make the operation more talkative for debugging. <code>-h, --help</code> Display help information. <ol> <li>Basic GET Request: Sends a simple GET request to the specified URL.</li> </ol> <pre><code>curl http://example.com\n</code></pre> <ol> <li>Specify Request Method: Specifies a request method other than the default GET.</li> </ol> <p><pre><code>curl -X POST http://example.com\n</code></pre> 3. Include Headers:</p> <p>Includes custom headers in the request.</p> <p><pre><code>curl -H \"Content-Type: application/json\" http://example.com\n</code></pre> 4. Send POST Data: Sends data as POST request payload.</p> <pre><code>curl -X POST --data \"key1=value1&amp;key2=value2\" http://example.com\n</code></pre> <ol> <li>Save Output to File: Writes the output to a specified file.</li> </ol> <p><pre><code>curl -o output.html http://example.com\n</code></pre> 6. Download File: Downloads a file and saves it with the same name as in the URL.</p> <pre><code>curl -O http://example.com/file.zip\n</code></pre> <p>\u2b06 Back to Top</p>"},{"location":"pandas_cheatsheet/","title":"Pandas Fundamentals","text":"In\u00a0[178]: Copied! <pre>import pandas as pd\ndata_frame = pd.read_csv('data/friend_list.csv')\n</pre> import pandas as pd data_frame = pd.read_csv('data/friend_list.csv') In\u00a0[179]: Copied! <pre>data_frame\n</pre> data_frame Out[179]: name age job 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher 3 Julia 40 dentist 4 Brian 45 manager 5 Chris 25 intern In\u00a0[180]: Copied! <pre>data_frame.head()\n</pre> data_frame.head() Out[180]: name age job 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher 3 Julia 40 dentist 4 Brian 45 manager In\u00a0[181]: Copied! <pre>type(data_frame.job)\n</pre> type(data_frame.job) Out[181]: <pre>pandas.core.series.Series</pre> In\u00a0[182]: Copied! <pre>data_frame.job = data_frame.job.str.upper()\ndata_frame.head()\n</pre> data_frame.job = data_frame.job.str.upper() data_frame.head() Out[182]: name age job 0 John 20 STUDENT 1 Jenny 30 DEVELOPER 2 Nate 30 TEACHER 3 Julia 40 DENTIST 4 Brian 45 MANAGER <p>Series is just wrapper for python list</p> In\u00a0[183]: Copied! <pre>s1 = pd.core.series.Series(['one', 'two', 'three'])\ns2 = pd.core.series.Series([1, 2, 3])\npd.DataFrame(data=dict(word=s1, num=s2))\n</pre> s1 = pd.core.series.Series(['one', 'two', 'three']) s2 = pd.core.series.Series([1, 2, 3]) pd.DataFrame(data=dict(word=s1, num=s2)) Out[183]: num word 0 1 one 1 2 two 2 3 three <p>by default, pandas support csv format</p> In\u00a0[184]: Copied! <pre>df = pd.read_csv('data/friend_list.csv')\n</pre> df = pd.read_csv('data/friend_list.csv') In\u00a0[185]: Copied! <pre>df\n</pre> df Out[185]: name age job 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher 3 Julia 40 dentist 4 Brian 45 manager 5 Chris 25 intern <p>you can read txt file like below, if the txt file data are comma separated</p> In\u00a0[186]: Copied! <pre>df = pd.read_csv('data/friend_list.txt')\n</pre> df = pd.read_csv('data/friend_list.txt') In\u00a0[187]: Copied! <pre>df.head()\n</pre> df.head() Out[187]: name age job 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher 3 Julia 40 dentist 4 Brian 45 manager <p>if txt file delimiter is not comma, you can use define delimiter using keyword argument</p> In\u00a0[188]: Copied! <pre>df = pd.read_csv('data/friend_list_tab.txt', delimiter = \"\\t\")\n</pre> df = pd.read_csv('data/friend_list_tab.txt', delimiter = \"\\t\") In\u00a0[189]: Copied! <pre>df.head()\n</pre> df.head() Out[189]: name age job 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher 3 Julia 40 dentist 4 Brian 45 manager <p>if data file doesn't have header, Use header = None like below, so first column not to be your column header</p> In\u00a0[190]: Copied! <pre>df = pd.read_csv('data/friend_list_no_head.csv', header = None)\n</pre> df = pd.read_csv('data/friend_list_no_head.csv', header = None) In\u00a0[191]: Copied! <pre>df.head()\n</pre> df.head() Out[191]: 0 1 2 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher 3 Julia 40 dentist 4 Brian 45 manager <p>you can add column header after you create dataframe</p> In\u00a0[192]: Copied! <pre>df.columns = ['name', 'age', 'job']\n</pre> df.columns = ['name', 'age', 'job'] In\u00a0[193]: Copied! <pre>df.head()\n</pre> df.head() Out[193]: name age job 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher 3 Julia 40 dentist 4 Brian 45 manager <p>you can create column header for no header data at once</p> In\u00a0[194]: Copied! <pre>df = pd.read_csv('data/friend_list_no_head.csv', header = None, names=['name', 'age', 'job'])\n</pre> df = pd.read_csv('data/friend_list_no_head.csv', header = None, names=['name', 'age', 'job']) In\u00a0[195]: Copied! <pre>df.head()\n</pre> df.head() Out[195]: name age job 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher 3 Julia 40 dentist 4 Brian 45 manager In\u00a0[196]: Copied! <pre>friend_dict_list = [{'name': 'Jone', 'age': 20, 'job': 'student'},\n         {'name': 'Jenny', 'age': 30, 'job': 'developer'},\n         {'name': 'Nate', 'age': 30, 'job': 'teacher'}]\ndf = pd.DataFrame(friend_dict_list)\n</pre> friend_dict_list = [{'name': 'Jone', 'age': 20, 'job': 'student'},          {'name': 'Jenny', 'age': 30, 'job': 'developer'},          {'name': 'Nate', 'age': 30, 'job': 'teacher'}] df = pd.DataFrame(friend_dict_list) In\u00a0[197]: Copied! <pre>df.head()\n</pre> df.head() Out[197]: age job name 0 20 student Jone 1 30 developer Jenny 2 30 teacher Nate <p>if you need fixed column order, you can adjust column order like below,</p> In\u00a0[198]: Copied! <pre>df = df[['name', 'age', 'job']]\n</pre> df = df[['name', 'age', 'job']] In\u00a0[199]: Copied! <pre>df.head()\n</pre> df.head() Out[199]: name age job 0 Jone 20 student 1 Jenny 30 developer 2 Nate 30 teacher In\u00a0[200]: Copied! <pre>from collections import OrderedDict\n</pre> from collections import OrderedDict In\u00a0[201]: Copied! <pre>friend_ordered_dict = OrderedDict([ ('name', ['John', 'Jenny', 'Nate']),\n          ('age', [20, 30, 30]),\n          ('job', ['student', 'developer', 'teacher']) ] )\ndf = pd.DataFrame.from_dict(friend_ordered_dict)\n</pre> friend_ordered_dict = OrderedDict([ ('name', ['John', 'Jenny', 'Nate']),           ('age', [20, 30, 30]),           ('job', ['student', 'developer', 'teacher']) ] ) df = pd.DataFrame.from_dict(friend_ordered_dict) In\u00a0[202]: Copied! <pre>df.head()\n</pre> df.head() Out[202]: name age job 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher In\u00a0[203]: Copied! <pre>friend_list = [ ['John', 20, 'student'],['Jenny', 30, 'developer'],['Nate', 30, 'teacher'] ]\ncolumn_name = ['name', 'age', 'job']\ndf = pd.DataFrame.from_records(friend_list, columns=column_name)\n</pre> friend_list = [ ['John', 20, 'student'],['Jenny', 30, 'developer'],['Nate', 30, 'teacher'] ] column_name = ['name', 'age', 'job'] df = pd.DataFrame.from_records(friend_list, columns=column_name) In\u00a0[204]: Copied! <pre>df.head()\n</pre> df.head() Out[204]: name age job 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher In\u00a0[205]: Copied! <pre>friend_list = [ \n                ['name',['John', 'Jenny', 'Nate']],\n                ['age',[20,30,30]],\n                ['job',['student', 'developer', 'teacher']] \n              ]\ndf = pd.DataFrame.from_items(friend_list)\n</pre> friend_list = [                  ['name',['John', 'Jenny', 'Nate']],                 ['age',[20,30,30]],                 ['job',['student', 'developer', 'teacher']]                ] df = pd.DataFrame.from_items(friend_list) In\u00a0[206]: Copied! <pre>df.head()\n</pre> df.head() Out[206]: name age job 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher <p>here is one dataframe example with header</p> In\u00a0[207]: Copied! <pre>friend_list = [ \n                ['name',['John', 'Jenny', 'nate']],\n                ['age',[20,30,30]],\n                ['job',['student', 'developer', 'teacher']] \n              ]\ndf = pd.DataFrame.from_items(friend_list)\n</pre> friend_list = [                  ['name',['John', 'Jenny', 'nate']],                 ['age',[20,30,30]],                 ['job',['student', 'developer', 'teacher']]                ] df = pd.DataFrame.from_items(friend_list) In\u00a0[208]: Copied! <pre>df.head()\n</pre> df.head() Out[208]: name age job 0 John 20 student 1 Jenny 30 developer 2 nate 30 teacher <p>you can create csv file using below command,</p> In\u00a0[209]: Copied! <pre>df.to_csv('friend_list_from_df.csv')\n</pre> df.to_csv('friend_list_from_df.csv') <p>below is one example of dataframe doesn't have header</p> In\u00a0[210]: Copied! <pre>friend_list = [ ['John', 20, 'student'],['Jenny', 30, 'developer'],['Nate', 30, 'teacher'] ]\ndf = pd.DataFrame.from_records(friend_list)\n</pre> friend_list = [ ['John', 20, 'student'],['Jenny', 30, 'developer'],['Nate', 30, 'teacher'] ] df = pd.DataFrame.from_records(friend_list) In\u00a0[211]: Copied! <pre>df.head()\n</pre> df.head() Out[211]: 0 1 2 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher <p>you can write csv file using below command,</p> In\u00a0[212]: Copied! <pre>df.to_csv('friend_list_from_df.csv')\n</pre> df.to_csv('friend_list_from_df.csv') <p>you also can write txt file using same command</p> In\u00a0[213]: Copied! <pre>df.to_csv('friend_list_from_df.txt')\n</pre> df.to_csv('friend_list_from_df.txt') <p>by default, header and index are True like below, even if you don't mention it in the command</p> In\u00a0[214]: Copied! <pre>df.to_csv('friend_list_from_df.csv', header = True, index = True)\n</pre> df.to_csv('friend_list_from_df.csv', header = True, index = True) <p>header = False means you don't want to create column names. no 0,1,2 at column name index = False means you don't want to create row names.  no 0,1,2 at row name</p> In\u00a0[215]: Copied! <pre>df.to_csv('friend_list_from_df.csv', header = False, index = False)\n</pre> df.to_csv('friend_list_from_df.csv', header = False, index = False) <p>you can specify add column names by giving header with list</p> In\u00a0[216]: Copied! <pre>df.to_csv('friend_list_from_df.csv', header = ['name', 'age', 'job'])\n</pre> df.to_csv('friend_list_from_df.csv', header = ['name', 'age', 'job']) <p>below is dataframe has None value</p> In\u00a0[217]: Copied! <pre>friend_list = [ \n                ['name',['John', None, 'nate']],\n                ['age',[20,None,30]],\n                ['job',['student', 'developer', 'teacher']] \n              ]\ndf = pd.DataFrame.from_items(friend_list)\n</pre> friend_list = [                  ['name',['John', None, 'nate']],                 ['age',[20,None,30]],                 ['job',['student', 'developer', 'teacher']]                ] df = pd.DataFrame.from_items(friend_list) In\u00a0[218]: Copied! <pre>df.head()\n</pre> df.head() Out[218]: name age job 0 John 20.0 student 1 None NaN developer 2 nate 30.0 teacher In\u00a0[219]: Copied! <pre>df.to_csv('friend_list_from_df.csv')\n</pre> df.to_csv('friend_list_from_df.csv') <p>na_rep replace None with provided value</p> In\u00a0[220]: Copied! <pre>df.to_csv('friend_list_from_df.csv', na_rep = '-')\n</pre> df.to_csv('friend_list_from_df.csv', na_rep = '-') In\u00a0[221]: Copied! <pre>friend_list = [ \n                ['name',['John', 'Jenny', 'Nate']],\n                ['age',[20,30,30]],\n                ['job',['student', 'developer', 'teacher']] \n              ]\ndf = pd.DataFrame.from_items(friend_list)\n</pre> friend_list = [                  ['name',['John', 'Jenny', 'Nate']],                 ['age',[20,30,30]],                 ['job',['student', 'developer', 'teacher']]                ] df = pd.DataFrame.from_items(friend_list) In\u00a0[222]: Copied! <pre>df.head()\n</pre> df.head() Out[222]: name age job 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher <p>select rows from index 1 to index 2</p> In\u00a0[223]: Copied! <pre>df[1:3]\n</pre> df[1:3] Out[223]: name age job 1 Jenny 30 developer 2 Nate 30 teacher <p>select row index 0 and index 2</p> In\u00a0[224]: Copied! <pre>df.loc[[0,2]]\n</pre> df.loc[[0,2]] Out[224]: name age job 0 John 20 student 2 Nate 30 teacher In\u00a0[225]: Copied! <pre>df.head()\n</pre> df.head() Out[225]: name age job 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher In\u00a0[226]: Copied! <pre>df_filtered = df[df.age &gt; 25]\n</pre> df_filtered = df[df.age &gt; 25] In\u00a0[227]: Copied! <pre>df_filtered\n</pre> df_filtered Out[227]: name age job 1 Jenny 30 developer 2 Nate 30 teacher In\u00a0[228]: Copied! <pre>df_filtered = df.query('age&gt;25')\n</pre> df_filtered = df.query('age&gt;25') In\u00a0[229]: Copied! <pre>df_filtered\n</pre> df_filtered Out[229]: name age job 1 Jenny 30 developer 2 Nate 30 teacher In\u00a0[230]: Copied! <pre>df_filtered = df[(df.age &gt;25) &amp; (df.name == 'Nate')]\n</pre> df_filtered = df[(df.age &gt;25) &amp; (df.name == 'Nate')] In\u00a0[231]: Copied! <pre>df_filtered\n</pre> df_filtered Out[231]: name age job 2 Nate 30 teacher In\u00a0[232]: Copied! <pre>df\n</pre> df Out[232]: name age job 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher In\u00a0[233]: Copied! <pre>friend_list = [ ['John', 20, 'student'],['Jenny', 30, 'developer'],['Nate', 30, 'teacher'] ]\ndf = pd.DataFrame.from_records(friend_list)\ndf\n</pre> friend_list = [ ['John', 20, 'student'],['Jenny', 30, 'developer'],['Nate', 30, 'teacher'] ] df = pd.DataFrame.from_records(friend_list) df Out[233]: 0 1 2 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher <p>select all rows, from column 0 to column 1</p> In\u00a0[234]: Copied! <pre>df.iloc[:, 0:2]\n</pre> df.iloc[:, 0:2] Out[234]: 0 1 0 John 20 1 Jenny 30 2 Nate 30 <p>select all rows, column 0 and column 2</p> In\u00a0[235]: Copied! <pre>df.iloc[:,[0,2]]\n</pre> df.iloc[:,[0,2]] Out[235]: 0 2 0 John student 1 Jenny developer 2 Nate teacher In\u00a0[236]: Copied! <pre>df\n</pre> df Out[236]: 0 1 2 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher In\u00a0[237]: Copied! <pre># you can create column header for no header data at once\ndf = pd.read_csv('data/friend_list_no_head.csv', header = None, names=['name', 'age', 'job'])\ndf\n</pre> # you can create column header for no header data at once df = pd.read_csv('data/friend_list_no_head.csv', header = None, names=['name', 'age', 'job']) df Out[237]: name age job 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher 3 Julia 40 dentist 4 Brian 45 manager 5 Chris 25 intern In\u00a0[238]: Copied! <pre>df_filtered = df[['name', 'age']]\ndf_filtered\n</pre> df_filtered = df[['name', 'age']] df_filtered Out[238]: name age 0 John 20 1 Jenny 30 2 Nate 30 3 Julia 40 4 Brian 45 5 Chris 25 In\u00a0[239]: Copied! <pre>df.filter(items=['age', 'job'])\n</pre> df.filter(items=['age', 'job']) Out[239]: age job 0 20 student 1 30 developer 2 30 teacher 3 40 dentist 4 45 manager 5 25 intern In\u00a0[240]: Copied! <pre>df\n</pre> df Out[240]: name age job 0 John 20 student 1 Jenny 30 developer 2 Nate 30 teacher 3 Julia 40 dentist 4 Brian 45 manager 5 Chris 25 intern In\u00a0[241]: Copied! <pre># select columns containing 'a'\ndf.filter(like='a',axis=1)\n</pre> # select columns containing 'a' df.filter(like='a',axis=1) Out[241]: name age 0 John 20 1 Jenny 30 2 Nate 30 3 Julia 40 4 Brian 45 5 Chris 25 In\u00a0[242]: Copied! <pre># select columns using regex\ndf.filter(regex='b$',axis=1)\n</pre> # select columns using regex df.filter(regex='b$',axis=1) Out[242]: job 0 student 1 developer 2 teacher 3 dentist 4 manager 5 intern In\u00a0[243]: Copied! <pre>friend_dict_list = [{'age': 20, 'job': 'student'},\n         {'age': 30, 'job': 'developer'},\n         {'age': 30, 'job': 'teacher'}]\ndf = pd.DataFrame(friend_dict_list, index = ['John', 'Jenny', 'Nate'])\n</pre> friend_dict_list = [{'age': 20, 'job': 'student'},          {'age': 30, 'job': 'developer'},          {'age': 30, 'job': 'teacher'}] df = pd.DataFrame(friend_dict_list, index = ['John', 'Jenny', 'Nate']) In\u00a0[244]: Copied! <pre>df.head()\n</pre> df.head() Out[244]: age job John 20 student Jenny 30 developer Nate 30 teacher In\u00a0[245]: Copied! <pre>df.drop(['John', 'Nate'])\n</pre> df.drop(['John', 'Nate']) Out[245]: age job Jenny 30 developer In\u00a0[246]: Copied! <pre>df\n</pre> df Out[246]: age job John 20 student Jenny 30 developer Nate 30 teacher <p>you can assign the result to dataframe to keep the dropped result like below,</p> In\u00a0[247]: Copied! <pre>df = df.drop(['John', 'Nate'])\n</pre> df = df.drop(['John', 'Nate']) In\u00a0[248]: Copied! <pre>df\n</pre> df Out[248]: age job Jenny 30 developer In\u00a0[249]: Copied! <pre>friend_dict_list = [{'age': 20, 'job': 'student'},\n         {'age': 30, 'job': 'developer'},\n         {'age': 30, 'job': 'teacher'}]\ndf = pd.DataFrame(friend_dict_list, index = ['John', 'Jenny', 'Nate'])\n</pre> friend_dict_list = [{'age': 20, 'job': 'student'},          {'age': 30, 'job': 'developer'},          {'age': 30, 'job': 'teacher'}] df = pd.DataFrame(friend_dict_list, index = ['John', 'Jenny', 'Nate']) In\u00a0[250]: Copied! <pre>df.drop(['John', 'Nate'], inplace = True)\n</pre> df.drop(['John', 'Nate'], inplace = True) In\u00a0[251]: Copied! <pre>df\n</pre> df Out[251]: age job Jenny 30 developer In\u00a0[252]: Copied! <pre>friend_dict_list = [{'name': 'Jone', 'age': 20, 'job': 'student'},\n         {'name': 'Jenny', 'age': 30, 'job': 'developer'},\n         {'name': 'Nate', 'age': 30, 'job': 'teacher'}]\ndf = pd.DataFrame(friend_dict_list)\n</pre> friend_dict_list = [{'name': 'Jone', 'age': 20, 'job': 'student'},          {'name': 'Jenny', 'age': 30, 'job': 'developer'},          {'name': 'Nate', 'age': 30, 'job': 'teacher'}] df = pd.DataFrame(friend_dict_list) In\u00a0[253]: Copied! <pre>df\n</pre> df Out[253]: age job name 0 20 student Jone 1 30 developer Jenny 2 30 teacher Nate <p>you can drop rows by its index</p> In\u00a0[254]: Copied! <pre>df = df.drop(df.index[[0,2]])\n</pre> df = df.drop(df.index[[0,2]]) In\u00a0[255]: Copied! <pre>df\n</pre> df Out[255]: age job name 1 30 developer Jenny In\u00a0[256]: Copied! <pre>friend_dict_list = [{'name': 'Jone', 'age': 20, 'job': 'student'},\n         {'name': 'Jenny', 'age': 30, 'job': 'developer'},\n         {'name': 'Nate', 'age': 30, 'job': 'teacher'}]\ndf = pd.DataFrame(friend_dict_list)\ndf\n</pre> friend_dict_list = [{'name': 'Jone', 'age': 20, 'job': 'student'},          {'name': 'Jenny', 'age': 30, 'job': 'developer'},          {'name': 'Nate', 'age': 30, 'job': 'teacher'}] df = pd.DataFrame(friend_dict_list) df Out[256]: age job name 0 20 student Jone 1 30 developer Jenny 2 30 teacher Nate In\u00a0[257]: Copied! <pre>df = df[df.age != 30]\n</pre> df = df[df.age != 30] In\u00a0[258]: Copied! <pre>df\n</pre> df Out[258]: age job name 0 20 student Jone In\u00a0[259]: Copied! <pre>friend_dict_list = [{'name': 'Jone', 'age': 20, 'job': 'student'},\n         {'name': 'Jenny', 'age': 30, 'job': 'developer'},\n         {'name': 'Nate', 'age': 30, 'job': 'teacher'}]\ndf = pd.DataFrame(friend_dict_list)\ndf\n</pre> friend_dict_list = [{'name': 'Jone', 'age': 20, 'job': 'student'},          {'name': 'Jenny', 'age': 30, 'job': 'developer'},          {'name': 'Nate', 'age': 30, 'job': 'teacher'}] df = pd.DataFrame(friend_dict_list) df Out[259]: age job name 0 20 student Jone 1 30 developer Jenny 2 30 teacher Nate In\u00a0[260]: Copied! <pre>df = df.drop('age', axis=1)\n</pre> df = df.drop('age', axis=1) In\u00a0[261]: Copied! <pre>df\n</pre> df Out[261]: job name 0 student Jone 1 developer Jenny 2 teacher Nate In\u00a0[262]: Copied! <pre>friend_dict_list = [{'name': 'Jone', 'age': 15, 'job': 'student'},\n         {'name': 'Jenny', 'age': 30, 'job': 'developer'},\n         {'name': 'Nate', 'age': 30, 'job': 'teacher'}]\ndf = pd.DataFrame(friend_dict_list, columns = ['name', 'age', 'job'])\ndf\n</pre> friend_dict_list = [{'name': 'Jone', 'age': 15, 'job': 'student'},          {'name': 'Jenny', 'age': 30, 'job': 'developer'},          {'name': 'Nate', 'age': 30, 'job': 'teacher'}] df = pd.DataFrame(friend_dict_list, columns = ['name', 'age', 'job']) df Out[262]: name age job 0 Jone 15 student 1 Jenny 30 developer 2 Nate 30 teacher In\u00a0[263]: Copied! <pre>df['salary'] = 0\n</pre> df['salary'] = 0 In\u00a0[264]: Copied! <pre>df\n</pre> df Out[264]: name age job salary 0 Jone 15 student 0 1 Jenny 30 developer 0 2 Nate 30 teacher 0 In\u00a0[265]: Copied! <pre>friend_dict_list = [{'name': 'Jone', 'age': 15, 'job': 'student'},\n         {'name': 'Jenny', 'age': 30, 'job': 'developer'},\n         {'name': 'Nate', 'age': 30, 'job': 'teacher'}]\ndf = pd.DataFrame(friend_dict_list, columns = ['name', 'age', 'job'])\ndf\n</pre> friend_dict_list = [{'name': 'Jone', 'age': 15, 'job': 'student'},          {'name': 'Jenny', 'age': 30, 'job': 'developer'},          {'name': 'Nate', 'age': 30, 'job': 'teacher'}] df = pd.DataFrame(friend_dict_list, columns = ['name', 'age', 'job']) df Out[265]: name age job 0 Jone 15 student 1 Jenny 30 developer 2 Nate 30 teacher In\u00a0[266]: Copied! <pre>import numpy as np\ndf['salary'] = np.where(df['job'] != 'student' , 'yes', 'no')\n</pre> import numpy as np df['salary'] = np.where(df['job'] != 'student' , 'yes', 'no') In\u00a0[267]: Copied! <pre>df\n</pre> df Out[267]: name age job salary 0 Jone 15 student no 1 Jenny 30 developer yes 2 Nate 30 teacher yes In\u00a0[268]: Copied! <pre>friend_dict_list = [{'name': 'John', 'midterm': 95, 'final': 85},\n         {'name': 'Jenny', 'midterm': 85, 'final': 80},\n         {'name': 'Nate', 'midterm': 10, 'final': 30}]\ndf = pd.DataFrame(friend_dict_list, columns = ['name', 'midterm', 'final'])\ndf\n</pre> friend_dict_list = [{'name': 'John', 'midterm': 95, 'final': 85},          {'name': 'Jenny', 'midterm': 85, 'final': 80},          {'name': 'Nate', 'midterm': 10, 'final': 30}] df = pd.DataFrame(friend_dict_list, columns = ['name', 'midterm', 'final']) df Out[268]: name midterm final 0 John 95 85 1 Jenny 85 80 2 Nate 10 30 In\u00a0[269]: Copied! <pre>df['total'] = df['midterm'] + df['final']\n</pre> df['total'] = df['midterm'] + df['final'] In\u00a0[270]: Copied! <pre>df\n</pre> df Out[270]: name midterm final total 0 John 95 85 180 1 Jenny 85 80 165 2 Nate 10 30 40 In\u00a0[271]: Copied! <pre>df['average'] = df['total'] / 2\n</pre> df['average'] = df['total'] / 2 In\u00a0[272]: Copied! <pre>df\n</pre> df Out[272]: name midterm final total average 0 John 95 85 180 90.0 1 Jenny 85 80 165 82.5 2 Nate 10 30 40 20.0 In\u00a0[273]: Copied! <pre>grades = []\n\nfor row in df['average']:\n    if row &gt;= 90:\n        grades.append('A')\n    elif row &gt;= 80:\n        grades.append('B')\n    elif row &gt;= 70:\n        grades.append('C')\n    else:\n        grades.append('F')\n        \ndf['grade'] = grades\n</pre> grades = []  for row in df['average']:     if row &gt;= 90:         grades.append('A')     elif row &gt;= 80:         grades.append('B')     elif row &gt;= 70:         grades.append('C')     else:         grades.append('F')          df['grade'] = grades In\u00a0[274]: Copied! <pre>df\n</pre> df Out[274]: name midterm final total average grade 0 John 95 85 180 90.0 A 1 Jenny 85 80 165 82.5 B 2 Nate 10 30 40 20.0 F In\u00a0[275]: Copied! <pre>def pass_or_fail(row):\n    print(row)\n    if row != \"F\":\n        return 'Pass'\n    else:\n        return 'Fail'\n</pre> def pass_or_fail(row):     print(row)     if row != \"F\":         return 'Pass'     else:         return 'Fail' In\u00a0[276]: Copied! <pre>df.grade = df.grade.apply(pass_or_fail)\n</pre> df.grade = df.grade.apply(pass_or_fail) <pre>A\nB\nF\n</pre> In\u00a0[277]: Copied! <pre>df\n</pre> df Out[277]: name midterm final total average grade 0 John 95 85 180 90.0 Pass 1 Jenny 85 80 165 82.5 Pass 2 Nate 10 30 40 20.0 Fail In\u00a0[278]: Copied! <pre>date_list = [{'yyyy-mm-dd': '2000-06-27'},\n         {'yyyy-mm-dd': '2002-09-24'},\n         {'yyyy-mm-dd': '2005-12-20'}]\ndf = pd.DataFrame(date_list, columns = ['yyyy-mm-dd'])\ndf\n</pre> date_list = [{'yyyy-mm-dd': '2000-06-27'},          {'yyyy-mm-dd': '2002-09-24'},          {'yyyy-mm-dd': '2005-12-20'}] df = pd.DataFrame(date_list, columns = ['yyyy-mm-dd']) df Out[278]: yyyy-mm-dd 0 2000-06-27 1 2002-09-24 2 2005-12-20 In\u00a0[279]: Copied! <pre>def extract_year(row):\n    return row.split('-')[0]\n</pre> def extract_year(row):     return row.split('-')[0] In\u00a0[280]: Copied! <pre>df['year'] = df['yyyy-mm-dd'].apply(extract_year)\n</pre> df['year'] = df['yyyy-mm-dd'].apply(extract_year) In\u00a0[281]: Copied! <pre>df\n</pre> df Out[281]: yyyy-mm-dd year 0 2000-06-27 2000 1 2002-09-24 2002 2 2005-12-20 2005 In\u00a0[282]: Copied! <pre>def extract_year(year, current_year):\n    return current_year - int(year)\n</pre> def extract_year(year, current_year):     return current_year - int(year) In\u00a0[283]: Copied! <pre>df['age'] = df['year'].apply(extract_year, current_year=2018)\n</pre> df['age'] = df['year'].apply(extract_year, current_year=2018) In\u00a0[284]: Copied! <pre>df\n</pre> df Out[284]: yyyy-mm-dd year age 0 2000-06-27 2000 18 1 2002-09-24 2002 16 2 2005-12-20 2005 13 In\u00a0[285]: Copied! <pre>def get_introduce(age, prefix, suffix):\n    return prefix + str(age) + suffix\n</pre> def get_introduce(age, prefix, suffix):     return prefix + str(age) + suffix In\u00a0[286]: Copied! <pre>df['introduce'] = df['age'].apply(get_introduce, prefix=\"I am \", suffix=\" years old\")\n</pre> df['introduce'] = df['age'].apply(get_introduce, prefix=\"I am \", suffix=\" years old\") In\u00a0[287]: Copied! <pre>df\n</pre> df Out[287]: yyyy-mm-dd year age introduce 0 2000-06-27 2000 18 I am 18 years old 1 2002-09-24 2002 16 I am 16 years old 2 2005-12-20 2005 13 I am 13 years old In\u00a0[288]: Copied! <pre>def get_introduce2(row):\n    return \"I was born in \"+str(row.year)+\" my age is \"+str(row.age)\ndf.introduce = df.apply(get_introduce2, axis=1)\n\ndf\n</pre> def get_introduce2(row):     return \"I was born in \"+str(row.year)+\" my age is \"+str(row.age) df.introduce = df.apply(get_introduce2, axis=1)  df Out[288]: yyyy-mm-dd year age introduce 0 2000-06-27 2000 18 I was born in 2000 my age is 18 1 2002-09-24 2002 16 I was born in 2002 my age is 16 2 2005-12-20 2005 13 I was born in 2005 my age is 13 In\u00a0[289]: Copied! <pre>date_list = [{'yyyy-mm-dd': '2000-06-27'},\n         {'yyyy-mm-dd': '2002-09-24'},\n         {'yyyy-mm-dd': '2005-12-20'}]\ndf = pd.DataFrame(date_list, columns = ['yyyy-mm-dd'])\ndf\n</pre> date_list = [{'yyyy-mm-dd': '2000-06-27'},          {'yyyy-mm-dd': '2002-09-24'},          {'yyyy-mm-dd': '2005-12-20'}] df = pd.DataFrame(date_list, columns = ['yyyy-mm-dd']) df Out[289]: yyyy-mm-dd 0 2000-06-27 1 2002-09-24 2 2005-12-20 In\u00a0[290]: Copied! <pre>def extract_year(row):\n    return row.split('-')[0]\n</pre> def extract_year(row):     return row.split('-')[0] In\u00a0[291]: Copied! <pre>df['year'] = df['yyyy-mm-dd'].map(extract_year)\ndf\n</pre> df['year'] = df['yyyy-mm-dd'].map(extract_year) df Out[291]: yyyy-mm-dd year 0 2000-06-27 2000 1 2002-09-24 2002 2 2005-12-20 2005 <p>if you give dictionary as parameter, column will be updated with new value like new value = dict['old value']</p> In\u00a0[292]: Copied! <pre>job_list = [{'age': 20, 'job': 'student'},\n         {'age': 30, 'job': 'developer'},\n         {'age': 30, 'job': 'teacher'}]\ndf = pd.DataFrame(job_list)\ndf\n</pre> job_list = [{'age': 20, 'job': 'student'},          {'age': 30, 'job': 'developer'},          {'age': 30, 'job': 'teacher'}] df = pd.DataFrame(job_list) df Out[292]: age job 0 20 student 1 30 developer 2 30 teacher In\u00a0[293]: Copied! <pre>df.job = df.job.map({\"student\":1,\"developer\":2,\"teacher\":3})\ndf\n</pre> df.job = df.job.map({\"student\":1,\"developer\":2,\"teacher\":3}) df Out[293]: age job 0 20 1 1 30 2 2 30 3 In\u00a0[294]: Copied! <pre>x_y = [{'x': 5.5, 'y': -5.6},\n         {'x': -5.2, 'y': 5.5},\n         {'x': -1.6, 'y': -4.5}]\ndf = pd.DataFrame(x_y)\ndf\n</pre> x_y = [{'x': 5.5, 'y': -5.6},          {'x': -5.2, 'y': 5.5},          {'x': -1.6, 'y': -4.5}] df = pd.DataFrame(x_y) df Out[294]: x y 0 5.5 -5.6 1 -5.2 5.5 2 -1.6 -4.5 In\u00a0[295]: Copied! <pre>df = df.applymap(np.around)\ndf\n</pre> df = df.applymap(np.around) df Out[295]: x y 0 6.0 -6.0 1 -5.0 6.0 2 -2.0 -4.0 In\u00a0[296]: Copied! <pre>friend_dict_list = [{'name': 'John', 'midterm': 95, 'final': 85},\n         {'name': 'Jenny', 'midterm': 85, 'final': 80},\n         {'name': 'Nate', 'midterm': 10, 'final': 30}]\ndf = pd.DataFrame(friend_dict_list, columns = ['name', 'midterm', 'final'])\ndf\n</pre> friend_dict_list = [{'name': 'John', 'midterm': 95, 'final': 85},          {'name': 'Jenny', 'midterm': 85, 'final': 80},          {'name': 'Nate', 'midterm': 10, 'final': 30}] df = pd.DataFrame(friend_dict_list, columns = ['name', 'midterm', 'final']) df Out[296]: name midterm final 0 John 95 85 1 Jenny 85 80 2 Nate 10 30 In\u00a0[297]: Copied! <pre>df2 = pd.DataFrame([['Ben', 50,50]], columns = ['name', 'midterm', 'final'])\n</pre> df2 = pd.DataFrame([['Ben', 50,50]], columns = ['name', 'midterm', 'final']) In\u00a0[298]: Copied! <pre>df2.head()\n</pre> df2.head() Out[298]: name midterm final 0 Ben 50 50 In\u00a0[299]: Copied! <pre>df.append(df2, ignore_index=True)\n</pre> df.append(df2, ignore_index=True) Out[299]: name midterm final 0 John 95 85 1 Jenny 85 80 2 Nate 10 30 3 Ben 50 50 In\u00a0[300]: Copied! <pre>student_list = [{'name': 'John', 'major': \"Computer Science\", 'sex': \"male\"},\n                {'name': 'Nate', 'major': \"Computer Science\", 'sex': \"male\"},\n                {'name': 'Abraham', 'major': \"Physics\", 'sex': \"male\"},\n                {'name': 'Brian', 'major': \"Psychology\", 'sex': \"male\"},\n                {'name': 'Janny', 'major': \"Economics\", 'sex': \"female\"},\n                {'name': 'Yuna', 'major': \"Economics\", 'sex': \"female\"},\n                {'name': 'Jeniffer', 'major': \"Computer Science\", 'sex': \"female\"},\n                {'name': 'Edward', 'major': \"Computer Science\", 'sex': \"male\"},\n                {'name': 'Zara', 'major': \"Psychology\", 'sex': \"female\"},\n                {'name': 'Wendy', 'major': \"Economics\", 'sex': \"female\"},\n                {'name': 'Sera', 'major': \"Psychology\", 'sex': \"female\"}\n         ]\ndf = pd.DataFrame(student_list, columns = ['name', 'major', 'sex'])\ndf\n</pre> student_list = [{'name': 'John', 'major': \"Computer Science\", 'sex': \"male\"},                 {'name': 'Nate', 'major': \"Computer Science\", 'sex': \"male\"},                 {'name': 'Abraham', 'major': \"Physics\", 'sex': \"male\"},                 {'name': 'Brian', 'major': \"Psychology\", 'sex': \"male\"},                 {'name': 'Janny', 'major': \"Economics\", 'sex': \"female\"},                 {'name': 'Yuna', 'major': \"Economics\", 'sex': \"female\"},                 {'name': 'Jeniffer', 'major': \"Computer Science\", 'sex': \"female\"},                 {'name': 'Edward', 'major': \"Computer Science\", 'sex': \"male\"},                 {'name': 'Zara', 'major': \"Psychology\", 'sex': \"female\"},                 {'name': 'Wendy', 'major': \"Economics\", 'sex': \"female\"},                 {'name': 'Sera', 'major': \"Psychology\", 'sex': \"female\"}          ] df = pd.DataFrame(student_list, columns = ['name', 'major', 'sex']) df Out[300]: name major sex 0 John Computer Science male 1 Nate Computer Science male 2 Abraham Physics male 3 Brian Psychology male 4 Janny Economics female 5 Yuna Economics female 6 Jeniffer Computer Science female 7 Edward Computer Science male 8 Zara Psychology female 9 Wendy Economics female 10 Sera Psychology female In\u00a0[301]: Copied! <pre>groupby_major = df.groupby('major')\n</pre> groupby_major = df.groupby('major') In\u00a0[302]: Copied! <pre>groupby_major.groups\n</pre> groupby_major.groups Out[302]: <pre>{'Computer Science': Int64Index([0, 1, 6, 7], dtype='int64'),\n 'Economics': Int64Index([4, 5, 9], dtype='int64'),\n 'Physics': Int64Index([2], dtype='int64'),\n 'Psychology': Int64Index([3, 8, 10], dtype='int64')}</pre> <p>here we can see, computer science has mostly man, while economic has mostly woman students</p> In\u00a0[303]: Copied! <pre>for name, group in groupby_major:\n    print(name + \": \" + str(len(group)))\n    print(group)\n    print()\n</pre> for name, group in groupby_major:     print(name + \": \" + str(len(group)))     print(group)     print() <pre>Computer Science: 4\n       name             major     sex\n0      John  Computer Science    male\n1      Nate  Computer Science    male\n6  Jeniffer  Computer Science  female\n7    Edward  Computer Science    male\n\nEconomics: 3\n    name      major     sex\n4  Janny  Economics  female\n5   Yuna  Economics  female\n9  Wendy  Economics  female\n\nPhysics: 1\n      name    major   sex\n2  Abraham  Physics  male\n\nPsychology: 3\n     name       major     sex\n3   Brian  Psychology    male\n8    Zara  Psychology  female\n10   Sera  Psychology  female\n\n</pre> In\u00a0[304]: Copied! <pre>df_major_cnt = pd.DataFrame({'count' : groupby_major.size()}).reset_index()\ndf_major_cnt\n</pre> df_major_cnt = pd.DataFrame({'count' : groupby_major.size()}).reset_index() df_major_cnt Out[304]: major count 0 Computer Science 4 1 Economics 3 2 Physics 1 3 Psychology 3 In\u00a0[305]: Copied! <pre>groupby_sex = df.groupby('sex')\n</pre> groupby_sex = df.groupby('sex') <p>here we can see, this school has balanced woman and man ratio</p> In\u00a0[306]: Copied! <pre>for name, group in groupby_sex:\n    print(name + \": \" + str(len(group)))\n    print(group)\n    print()\n</pre> for name, group in groupby_sex:     print(name + \": \" + str(len(group)))     print(group)     print() <pre>female: 6\n        name             major     sex\n4      Janny         Economics  female\n5       Yuna         Economics  female\n6   Jeniffer  Computer Science  female\n8       Zara        Psychology  female\n9      Wendy         Economics  female\n10      Sera        Psychology  female\n\nmale: 5\n      name             major   sex\n0     John  Computer Science  male\n1     Nate  Computer Science  male\n2  Abraham           Physics  male\n3    Brian        Psychology  male\n7   Edward  Computer Science  male\n\n</pre> In\u00a0[307]: Copied! <pre>df_sex_cnt = pd.DataFrame({'count' : groupby_sex.size()}).reset_index()\ndf_sex_cnt\n</pre> df_sex_cnt = pd.DataFrame({'count' : groupby_sex.size()}).reset_index() df_sex_cnt Out[307]: sex count 0 female 6 1 male 5 In\u00a0[308]: Copied! <pre>student_list = [{'name': 'John', 'major': \"Computer Science\", 'sex': \"male\"},\n                {'name': 'Nate', 'major': \"Computer Science\", 'sex': \"male\"},\n                {'name': 'Abraham', 'major': \"Physics\", 'sex': \"male\"},\n                {'name': 'Brian', 'major': \"Psychology\", 'sex': \"male\"},\n                {'name': 'Janny', 'major': \"Economics\", 'sex': \"female\"},\n                {'name': 'Yuna', 'major': \"Economics\", 'sex': \"female\"},\n                {'name': 'Jeniffer', 'major': \"Computer Science\", 'sex': \"female\"},\n                {'name': 'Edward', 'major': \"Computer Science\", 'sex': \"male\"},\n                {'name': 'Zara', 'major': \"Psychology\", 'sex': \"female\"},\n                {'name': 'Wendy', 'major': \"Economics\", 'sex': \"female\"},\n                {'name': 'Sera', 'major': \"Psychology\", 'sex': \"female\"},\n                {'name': 'John', 'major': \"Computer Science\", 'sex': \"male\"},\n         ]\ndf = pd.DataFrame(student_list, columns = ['name', 'major', 'sex'])\ndf\n</pre> student_list = [{'name': 'John', 'major': \"Computer Science\", 'sex': \"male\"},                 {'name': 'Nate', 'major': \"Computer Science\", 'sex': \"male\"},                 {'name': 'Abraham', 'major': \"Physics\", 'sex': \"male\"},                 {'name': 'Brian', 'major': \"Psychology\", 'sex': \"male\"},                 {'name': 'Janny', 'major': \"Economics\", 'sex': \"female\"},                 {'name': 'Yuna', 'major': \"Economics\", 'sex': \"female\"},                 {'name': 'Jeniffer', 'major': \"Computer Science\", 'sex': \"female\"},                 {'name': 'Edward', 'major': \"Computer Science\", 'sex': \"male\"},                 {'name': 'Zara', 'major': \"Psychology\", 'sex': \"female\"},                 {'name': 'Wendy', 'major': \"Economics\", 'sex': \"female\"},                 {'name': 'Sera', 'major': \"Psychology\", 'sex': \"female\"},                 {'name': 'John', 'major': \"Computer Science\", 'sex': \"male\"},          ] df = pd.DataFrame(student_list, columns = ['name', 'major', 'sex']) df Out[308]: name major sex 0 John Computer Science male 1 Nate Computer Science male 2 Abraham Physics male 3 Brian Psychology male 4 Janny Economics female 5 Yuna Economics female 6 Jeniffer Computer Science female 7 Edward Computer Science male 8 Zara Psychology female 9 Wendy Economics female 10 Sera Psychology female 11 John Computer Science male In\u00a0[309]: Copied! <pre>df.duplicated()\n</pre> df.duplicated() Out[309]: <pre>0     False\n1     False\n2     False\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11     True\ndtype: bool</pre> In\u00a0[310]: Copied! <pre>df = df.drop_duplicates()\n</pre> df = df.drop_duplicates() In\u00a0[311]: Copied! <pre>df\n</pre> df Out[311]: name major sex 0 John Computer Science male 1 Nate Computer Science male 2 Abraham Physics male 3 Brian Psychology male 4 Janny Economics female 5 Yuna Economics female 6 Jeniffer Computer Science female 7 Edward Computer Science male 8 Zara Psychology female 9 Wendy Economics female 10 Sera Psychology female In\u00a0[312]: Copied! <pre>student_list = [{'name': 'John', 'major': \"Computer Science\", 'sex': \"male\"},\n                {'name': 'Nate', 'major': \"Computer Science\", 'sex': \"male\"},\n                {'name': 'Abraham', 'major': \"Physics\", 'sex': \"male\"},\n                {'name': 'Brian', 'major': \"Psychology\", 'sex': \"male\"},\n                {'name': 'Janny', 'major': \"Economics\", 'sex': \"female\"},\n                {'name': 'Yuna', 'major': \"Economics\", 'sex': \"female\"},\n                {'name': 'Jeniffer', 'major': \"Computer Science\", 'sex': \"female\"},\n                {'name': 'Edward', 'major': \"Computer Science\", 'sex': \"male\"},\n                {'name': 'Zara', 'major': \"Psychology\", 'sex': \"female\"},\n                {'name': 'Wendy', 'major': \"Economics\", 'sex': \"female\"},\n                {'name': 'Nate', 'major': None, 'sex': \"male\"},\n                {'name': 'John', 'major': \"Computer Science\", 'sex': None},\n         ]\ndf = pd.DataFrame(student_list, columns = ['name', 'major', 'sex'])\ndf\n</pre> student_list = [{'name': 'John', 'major': \"Computer Science\", 'sex': \"male\"},                 {'name': 'Nate', 'major': \"Computer Science\", 'sex': \"male\"},                 {'name': 'Abraham', 'major': \"Physics\", 'sex': \"male\"},                 {'name': 'Brian', 'major': \"Psychology\", 'sex': \"male\"},                 {'name': 'Janny', 'major': \"Economics\", 'sex': \"female\"},                 {'name': 'Yuna', 'major': \"Economics\", 'sex': \"female\"},                 {'name': 'Jeniffer', 'major': \"Computer Science\", 'sex': \"female\"},                 {'name': 'Edward', 'major': \"Computer Science\", 'sex': \"male\"},                 {'name': 'Zara', 'major': \"Psychology\", 'sex': \"female\"},                 {'name': 'Wendy', 'major': \"Economics\", 'sex': \"female\"},                 {'name': 'Nate', 'major': None, 'sex': \"male\"},                 {'name': 'John', 'major': \"Computer Science\", 'sex': None},          ] df = pd.DataFrame(student_list, columns = ['name', 'major', 'sex']) df Out[312]: name major sex 0 John Computer Science male 1 Nate Computer Science male 2 Abraham Physics male 3 Brian Psychology male 4 Janny Economics female 5 Yuna Economics female 6 Jeniffer Computer Science female 7 Edward Computer Science male 8 Zara Psychology female 9 Wendy Economics female 10 Nate None male 11 John Computer Science None In\u00a0[313]: Copied! <pre>df.duplicated(['name'])\n</pre> df.duplicated(['name']) Out[313]: <pre>0     False\n1     False\n2     False\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10     True\n11     True\ndtype: bool</pre> In\u00a0[314]: Copied! <pre>df.drop_duplicates(['name'], keep='last')\n</pre> df.drop_duplicates(['name'], keep='last') Out[314]: name major sex 2 Abraham Physics male 3 Brian Psychology male 4 Janny Economics female 5 Yuna Economics female 6 Jeniffer Computer Science female 7 Edward Computer Science male 8 Zara Psychology female 9 Wendy Economics female 10 Nate None male 11 John Computer Science None In\u00a0[315]: Copied! <pre>df\n</pre> df Out[315]: name major sex 0 John Computer Science male 1 Nate Computer Science male 2 Abraham Physics male 3 Brian Psychology male 4 Janny Economics female 5 Yuna Economics female 6 Jeniffer Computer Science female 7 Edward Computer Science male 8 Zara Psychology female 9 Wendy Economics female 10 Nate None male 11 John Computer Science None In\u00a0[316]: Copied! <pre>school_id_list = [{'name': 'John', 'job': \"teacher\", 'age': 40},\n                {'name': 'Nate', 'job': \"teacher\", 'age': 35},\n                {'name': 'Yuna', 'job': \"teacher\", 'age': 37},\n                {'name': 'Abraham', 'job': \"student\", 'age': 10},\n                {'name': 'Brian', 'job': \"student\", 'age': 12},\n                {'name': 'Janny', 'job': \"student\", 'age': 11},\n                {'name': 'Nate', 'job': \"teacher\", 'age': None},\n                {'name': 'John', 'job': \"student\", 'age': None}\n         ]\ndf = pd.DataFrame(school_id_list, columns = ['name', 'job', 'age'])\ndf\n</pre> school_id_list = [{'name': 'John', 'job': \"teacher\", 'age': 40},                 {'name': 'Nate', 'job': \"teacher\", 'age': 35},                 {'name': 'Yuna', 'job': \"teacher\", 'age': 37},                 {'name': 'Abraham', 'job': \"student\", 'age': 10},                 {'name': 'Brian', 'job': \"student\", 'age': 12},                 {'name': 'Janny', 'job': \"student\", 'age': 11},                 {'name': 'Nate', 'job': \"teacher\", 'age': None},                 {'name': 'John', 'job': \"student\", 'age': None}          ] df = pd.DataFrame(school_id_list, columns = ['name', 'job', 'age']) df Out[316]: name job age 0 John teacher 40.0 1 Nate teacher 35.0 2 Yuna teacher 37.0 3 Abraham student 10.0 4 Brian student 12.0 5 Janny student 11.0 6 Nate teacher NaN 7 John student NaN In\u00a0[317]: Copied! <pre>df.info()\n</pre> df.info() <pre>&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 8 entries, 0 to 7\nData columns (total 3 columns):\nname    8 non-null object\njob     8 non-null object\nage     6 non-null float64\ndtypes: float64(1), object(2)\nmemory usage: 272.0+ bytes\n</pre> In\u00a0[318]: Copied! <pre>df.isna()\n</pre> df.isna() Out[318]: name job age 0 False False False 1 False False False 2 False False False 3 False False False 4 False False False 5 False False False 6 False False True 7 False False True In\u00a0[319]: Copied! <pre>df.isnull()\n</pre> df.isnull() Out[319]: name job age 0 False False False 1 False False False 2 False False False 3 False False False 4 False False False 5 False False False 6 False False True 7 False False True In\u00a0[320]: Copied! <pre>tmp = df\ntmp[\"age\"] = tmp[\"age\"].fillna(0)\ntmp\n</pre> tmp = df tmp[\"age\"] = tmp[\"age\"].fillna(0) tmp Out[320]: name job age 0 John teacher 40.0 1 Nate teacher 35.0 2 Yuna teacher 37.0 3 Abraham student 10.0 4 Brian student 12.0 5 Janny student 11.0 6 Nate teacher 0.0 7 John student 0.0 In\u00a0[321]: Copied! <pre># fill missing age with median age for each group (teacher, student)\ndf[\"age\"].fillna(df.groupby(\"job\")[\"age\"].transform(\"median\"), inplace=True)\n</pre> # fill missing age with median age for each group (teacher, student) df[\"age\"].fillna(df.groupby(\"job\")[\"age\"].transform(\"median\"), inplace=True) In\u00a0[322]: Copied! <pre>df\n</pre> df Out[322]: name job age 0 John teacher 40.0 1 Nate teacher 35.0 2 Yuna teacher 37.0 3 Abraham student 10.0 4 Brian student 12.0 5 Janny student 11.0 6 Nate teacher 0.0 7 John student 0.0 In\u00a0[323]: Copied! <pre>job_list = [{'name': 'John', 'job': \"teacher\"},\n                {'name': 'Nate', 'job': \"teacher\"},\n                {'name': 'Fred', 'job': \"teacher\"},\n                {'name': 'Abraham', 'job': \"student\"},\n                {'name': 'Brian', 'job': \"student\"},\n                {'name': 'Janny', 'job': \"developer\"},\n                {'name': 'Nate', 'job': \"teacher\"},\n                {'name': 'Obrian', 'job': \"dentist\"},\n                {'name': 'Yuna', 'job': \"teacher\"},\n                {'name': 'Rob', 'job': \"lawyer\"},\n                {'name': 'Brian', 'job': \"student\"},\n                {'name': 'Matt', 'job': \"student\"},\n                {'name': 'Wendy', 'job': \"banker\"},\n                {'name': 'Edward', 'job': \"teacher\"},\n                {'name': 'Ian', 'job': \"teacher\"},\n                {'name': 'Chris', 'job': \"banker\"},\n                {'name': 'Philip', 'job': \"lawyer\"},\n                {'name': 'Janny', 'job': \"basketball player\"},\n                {'name': 'Gwen', 'job': \"teacher\"},\n                {'name': 'Jessy', 'job': \"student\"}\n         ]\ndf = pd.DataFrame(job_list, columns = ['name', 'job'])\n</pre> job_list = [{'name': 'John', 'job': \"teacher\"},                 {'name': 'Nate', 'job': \"teacher\"},                 {'name': 'Fred', 'job': \"teacher\"},                 {'name': 'Abraham', 'job': \"student\"},                 {'name': 'Brian', 'job': \"student\"},                 {'name': 'Janny', 'job': \"developer\"},                 {'name': 'Nate', 'job': \"teacher\"},                 {'name': 'Obrian', 'job': \"dentist\"},                 {'name': 'Yuna', 'job': \"teacher\"},                 {'name': 'Rob', 'job': \"lawyer\"},                 {'name': 'Brian', 'job': \"student\"},                 {'name': 'Matt', 'job': \"student\"},                 {'name': 'Wendy', 'job': \"banker\"},                 {'name': 'Edward', 'job': \"teacher\"},                 {'name': 'Ian', 'job': \"teacher\"},                 {'name': 'Chris', 'job': \"banker\"},                 {'name': 'Philip', 'job': \"lawyer\"},                 {'name': 'Janny', 'job': \"basketball player\"},                 {'name': 'Gwen', 'job': \"teacher\"},                 {'name': 'Jessy', 'job': \"student\"}          ] df = pd.DataFrame(job_list, columns = ['name', 'job']) <p>unique() gives you unique values of the column in list format</p> In\u00a0[324]: Copied! <pre>print( df.job.unique() )\n</pre> print( df.job.unique() ) <pre>['teacher' 'student' 'developer' 'dentist' 'lawyer' 'banker'\n 'basketball player']\n</pre> <p>value_counts() gives you the number of item for each unique columns</p> In\u00a0[325]: Copied! <pre>df.job.value_counts()\n</pre> df.job.value_counts() Out[325]: <pre>teacher              8\nstudent              5\nlawyer               2\nbanker               2\ndeveloper            1\ndentist              1\nbasketball player    1\nName: job, dtype: int64</pre> In\u00a0[326]: Copied! <pre>l1 = [{'name': 'John', 'job': \"teacher\"},\n      {'name': 'Nate', 'job': \"student\"},\n      {'name': 'Fred', 'job': \"developer\"}]\n\nl2 = [{'name': 'Ed', 'job': \"dentist\"},\n      {'name': 'Jack', 'job': \"farmer\"},\n      {'name': 'Ted', 'job': \"designer\"}]\n         \ndf1 = pd.DataFrame(l1, columns = ['name', 'job'])\ndf2 = pd.DataFrame(l2, columns = ['name', 'job'])\n</pre> l1 = [{'name': 'John', 'job': \"teacher\"},       {'name': 'Nate', 'job': \"student\"},       {'name': 'Fred', 'job': \"developer\"}]  l2 = [{'name': 'Ed', 'job': \"dentist\"},       {'name': 'Jack', 'job': \"farmer\"},       {'name': 'Ted', 'job': \"designer\"}]           df1 = pd.DataFrame(l1, columns = ['name', 'job']) df2 = pd.DataFrame(l2, columns = ['name', 'job']) In\u00a0[327]: Copied! <pre>frames = [df1, df2]\nresult = pd.concat(frames, ignore_index=True)\n</pre> frames = [df1, df2] result = pd.concat(frames, ignore_index=True) In\u00a0[328]: Copied! <pre>result\n</pre> result Out[328]: name job 0 John teacher 1 Nate student 2 Fred developer 3 Ed dentist 4 Jack farmer 5 Ted designer In\u00a0[329]: Copied! <pre>l1 = [{'name': 'John', 'job': \"teacher\"},\n      {'name': 'Nate', 'job': \"student\"},\n      {'name': 'Fred', 'job': \"developer\"}]\n\nl2 = [{'name': 'Ed', 'job': \"dentist\"},\n      {'name': 'Jack', 'job': \"farmer\"},\n      {'name': 'Ted', 'job': \"designer\"}]\n         \ndf1 = pd.DataFrame(l1, columns = ['name', 'job'])\ndf2 = pd.DataFrame(l2, columns = ['name', 'job'])\nresult = df1.append(df2, ignore_index=True)\n</pre> l1 = [{'name': 'John', 'job': \"teacher\"},       {'name': 'Nate', 'job': \"student\"},       {'name': 'Fred', 'job': \"developer\"}]  l2 = [{'name': 'Ed', 'job': \"dentist\"},       {'name': 'Jack', 'job': \"farmer\"},       {'name': 'Ted', 'job': \"designer\"}]           df1 = pd.DataFrame(l1, columns = ['name', 'job']) df2 = pd.DataFrame(l2, columns = ['name', 'job']) result = df1.append(df2, ignore_index=True) In\u00a0[330]: Copied! <pre>result\n</pre> result Out[330]: name job 0 John teacher 1 Nate student 2 Fred developer 3 Ed dentist 4 Jack farmer 5 Ted designer In\u00a0[331]: Copied! <pre>l1 = [{'name': 'John', 'job': \"teacher\"},\n      {'name': 'Nate', 'job': \"student\"},\n      {'name': 'Jack', 'job': \"developer\"}]\n\nl2 = [{'age': 25, 'country': \"U.S\"},\n      {'age': 30, 'country': \"U.K\"},\n      {'age': 45, 'country': \"Korea\"}]\n         \ndf1 = pd.DataFrame(l1, columns = ['name', 'job'])\ndf2 = pd.DataFrame(l2, columns = ['age', 'country'])\nresult = pd.concat([df1, df2], axis=1, ignore_index=True)\n</pre> l1 = [{'name': 'John', 'job': \"teacher\"},       {'name': 'Nate', 'job': \"student\"},       {'name': 'Jack', 'job': \"developer\"}]  l2 = [{'age': 25, 'country': \"U.S\"},       {'age': 30, 'country': \"U.K\"},       {'age': 45, 'country': \"Korea\"}]           df1 = pd.DataFrame(l1, columns = ['name', 'job']) df2 = pd.DataFrame(l2, columns = ['age', 'country']) result = pd.concat([df1, df2], axis=1, ignore_index=True) In\u00a0[332]: Copied! <pre>result\n</pre> result Out[332]: 0 1 2 3 0 John teacher 25 U.S 1 Nate student 30 U.K 2 Jack developer 45 Korea In\u00a0[333]: Copied! <pre>label = [1,2,3,4,5]\nprediction = [1,2,2,5,5]\n\ncomparison = pd.DataFrame(\n    {'label': label,\n     'prediction': prediction\n    })\n\ncomparison\n</pre> label = [1,2,3,4,5] prediction = [1,2,2,5,5]  comparison = pd.DataFrame(     {'label': label,      'prediction': prediction     })  comparison Out[333]: label prediction 0 1 1 1 2 2 2 3 2 3 4 5 4 5 5"},{"location":"pandas_cheatsheet/#pandas-fundamentals","title":"Pandas Fundamentals\u00b6","text":""},{"location":"pandas_cheatsheet/#what-is-pandas","title":"What is Pandas?\u00b6","text":"<p>python library for data manipulation and analysis</p>"},{"location":"pandas_cheatsheet/#what-is-dataframe","title":"What is DataFrame?\u00b6","text":"<p>dataframe is a 2-dimensional labeled data structure with columns</p>"},{"location":"pandas_cheatsheet/#what-is-series","title":"What is Series?\u00b6","text":"<p>Every single column in dataframe is series</p>"},{"location":"pandas_cheatsheet/#why-pandas","title":"Why Pandas?\u00b6","text":"<p>Very similar to Excel spreadsheet view, support various functions for data manipulation and analysis. Fast based on Numpy. Easy to manipulate data for your purpose</p>"},{"location":"pandas_cheatsheet/#read-file-to-dataframe","title":"Read File to DataFrame\u00b6","text":"<p>A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns.</p>"},{"location":"pandas_cheatsheet/#create-dataframe","title":"Create DataFrame\u00b6","text":"<p>when you want to create dataframe from your python code</p>"},{"location":"pandas_cheatsheet/#from-dictionary","title":"from dictionary\u00b6","text":""},{"location":"pandas_cheatsheet/#from-ordereddict","title":"from OrderedDict\u00b6","text":"<p>OrderedDict helps you to have fixed column order at once</p>"},{"location":"pandas_cheatsheet/#from-list","title":"from list\u00b6","text":""},{"location":"pandas_cheatsheet/#write-dataframe-to-file","title":"Write DataFrame to File\u00b6","text":""},{"location":"pandas_cheatsheet/#select-row","title":"Select Row\u00b6","text":""},{"location":"pandas_cheatsheet/#by-index","title":"by index\u00b6","text":""},{"location":"pandas_cheatsheet/#by-column-condition","title":"by column condition\u00b6","text":""},{"location":"pandas_cheatsheet/#filter-column","title":"Filter Column\u00b6","text":""},{"location":"pandas_cheatsheet/#by-index","title":"by index\u00b6","text":""},{"location":"pandas_cheatsheet/#by-column-name","title":"by column name\u00b6","text":""},{"location":"pandas_cheatsheet/#drop-rows","title":"Drop rows\u00b6","text":""},{"location":"pandas_cheatsheet/#by-row-name-index-name","title":"by row name (index name)\u00b6","text":""},{"location":"pandas_cheatsheet/#drop-row","title":"drop row\u00b6","text":"<p>dropped result will be shown, but dataframe keeps the dropped row</p>"},{"location":"pandas_cheatsheet/#drop-row-in-place","title":"drop row in place\u00b6","text":"<p>The dropped row will be deleted from dataframe with inplace keyword parameter</p>"},{"location":"pandas_cheatsheet/#by-row-id-index-number","title":"by row id (index number)\u00b6","text":""},{"location":"pandas_cheatsheet/#by-column-value","title":"By Column value\u00b6","text":""},{"location":"pandas_cheatsheet/#drop-column","title":"Drop column\u00b6","text":""},{"location":"pandas_cheatsheet/#add-column-update-column","title":"Add Column / Update Column\u00b6","text":""},{"location":"pandas_cheatsheet/#add-new-column-with-default-value","title":"Add New Column with default value\u00b6","text":""},{"location":"pandas_cheatsheet/#add-new-column-derived-from-existing-value","title":"Add New Column derived from existing value\u00b6","text":""},{"location":"pandas_cheatsheet/#one-liner-adding-column-by-true-or-false-condition","title":"one liner adding column by true or false condition\u00b6","text":""},{"location":"pandas_cheatsheet/#column-derived-from-adding-two-existing-columns","title":"column derived from adding two existing columns\u00b6","text":""},{"location":"pandas_cheatsheet/#columm-from-existing-column","title":"columm from existing column\u00b6","text":""},{"location":"pandas_cheatsheet/#column-by-conditional-condition","title":"column by conditional condition\u00b6","text":""},{"location":"pandas_cheatsheet/#how-to-use-apply-function","title":"how to use apply function\u00b6","text":"<p>apply function helps you code concisely. the function will be applied to selected column(s) on all rows</p>"},{"location":"pandas_cheatsheet/#info-extraction-using-dfapply","title":"info extraction using df.apply\u00b6","text":""},{"location":"pandas_cheatsheet/#passing-keyword-parameter-to-apply-function","title":"passing keyword parameter to apply function\u00b6","text":"<p>you also can send parameter to apply function</p>"},{"location":"pandas_cheatsheet/#passing-multiple-keyword-parameter-to-apply-function","title":"passing multiple keyword parameter to apply function\u00b6","text":"<p>you also can send multiple parameter to apply function</p>"},{"location":"pandas_cheatsheet/#passing-multiple-columns-to-apply-function","title":"passing multiple columns to apply function\u00b6","text":"<p>you can provide axis=1 in the apply function, so you send all column values to apply function</p>"},{"location":"pandas_cheatsheet/#how-to-use-map-function","title":"how to use map function\u00b6","text":"<p>if you give function as parameter, it works same as apply function on the column</p>"},{"location":"pandas_cheatsheet/#applymap","title":"Applymap\u00b6","text":"<p>update all elements in the dataframe at once</p>"},{"location":"pandas_cheatsheet/#add-row","title":"Add Row\u00b6","text":""},{"location":"pandas_cheatsheet/#group-by","title":"Group by\u00b6","text":"<p>group by command helps to get more information from given data</p>"},{"location":"pandas_cheatsheet/#group-object-to-dataframe","title":"group object to dataframe\u00b6","text":""},{"location":"pandas_cheatsheet/#drop-duplicate","title":"Drop Duplicate\u00b6","text":"<p>sometimes you need to drop duplicate rows and here is elegant way to to it</p>"},{"location":"pandas_cheatsheet/#check-if-there-is-duplicated-row","title":"check if there is duplicated row\u00b6","text":""},{"location":"pandas_cheatsheet/#how-to-manage-none-value","title":"How to manage None value?\u00b6","text":""},{"location":"pandas_cheatsheet/#how-to-check-if-there-is-null-or-nan","title":"how to check if there is Null or NaN\u00b6","text":""},{"location":"pandas_cheatsheet/#how-to-fill-null-or-nan","title":"how to fill Null or NaN\u00b6","text":""},{"location":"pandas_cheatsheet/#unique","title":"Unique\u00b6","text":""},{"location":"pandas_cheatsheet/#concatenate-two-dataframe","title":"Concatenate two dataframe\u00b6","text":""},{"location":"pandas_cheatsheet/#pdconcat","title":"pd.concat\u00b6","text":"<p>below is to add second dataframe as new rows in first dataframe</p>"},{"location":"pandas_cheatsheet/#dfappend","title":"df.append\u00b6","text":"<p>below is to add second dataframe as new rows in first dataframe</p>"},{"location":"pandas_cheatsheet/#pdconcat","title":"pd.concat\u00b6","text":"<p>below is to add second dataframe as new columns in first dataframe</p>"},{"location":"pandas_cheatsheet/#concatenate-two-list-as-a-dataframe","title":"Concatenate two list as a dataframe\u00b6","text":""},{"location":"python-cheatsheet/","title":"Python Fundamentals","text":""},{"location":"python-cheatsheet/#this-doc-was-provided-by-gto76","title":"This doc was provided by: gto76","text":"<p> 1. Collections: <code>List</code>, <code>Dictionary</code>, <code>Set</code>, <code>Tuple</code>, <code>Range</code>, <code>Enumerate</code>, <code>Iterator</code>, <code>Generator</code>. 2. Types: <code>Type</code>, <code>String</code>, <code>Regular_Exp</code>, <code>Format</code>, <code>Numbers</code>, <code>Combinatorics</code>, <code>Datetime</code>. 3. Syntax: <code>Args</code>, <code>Inline</code>, <code>Import</code>, <code>Decorator</code>, <code>Class</code>, <code>Duck_Types</code>, <code>Enum</code>, <code>Exception</code>. 4. System: <code>Exit</code>, <code>Print</code>, <code>Input</code>, <code>Command_Line_Arguments</code>, <code>Open</code>, <code>Path</code>, <code>OS_Commands</code>. 5. Data: <code>JSON</code>, <code>Pickle</code>, <code>CSV</code>, <code>SQLite</code>, <code>Bytes</code>, <code>Struct</code>, <code>Array</code>, <code>Memory_View</code>, <code>Deque</code>. 6. Advanced: <code>Threading</code>, <code>Operator</code>, <code>Match_Stmt</code>, <code>Logging</code>, <code>Introspection</code>, <code>Coroutines</code>. 7. Libraries: <code>Progress_Bar</code>, <code>Plots</code>, <code>Tables</code>, <code>Curses</code>, <code>GUIs</code>, <code>Scraping</code>, <code>Web</code>, <code>Profiling</code>. 8. Multimedia: <code>NumPy</code>, <code>Image</code>, <code>Animation</code>, <code>Audio</code>, <code>Synthesizer</code>, <code>Pygame</code>, <code>Pandas</code>, <code>Plotly</code>.</p>"},{"location":"python-cheatsheet/#main","title":"Main","text":"<pre><code>if __name__ == '__main__':      # Runs main() if file wasn't imported.\n    main()\n</code></pre>"},{"location":"python-cheatsheet/#list","title":"List","text":"<pre><code>&lt;list&gt; = &lt;list&gt;[&lt;slice&gt;]        # Or: &lt;list&gt;[from_inclusive : to_exclusive : \u00b1step]\n</code></pre> <pre><code>&lt;list&gt;.append(&lt;el&gt;)             # Or: &lt;list&gt; += [&lt;el&gt;]\n&lt;list&gt;.extend(&lt;collection&gt;)     # Or: &lt;list&gt; += &lt;collection&gt;\n</code></pre> <pre><code>&lt;list&gt;.sort()                   # Sorts in ascending order.\n&lt;list&gt;.reverse()                # Reverses the list in-place.\n&lt;list&gt; = sorted(&lt;collection&gt;)   # Returns a new sorted list.\n&lt;iter&gt; = reversed(&lt;list&gt;)       # Returns reversed iterator.\n</code></pre> <p><pre><code>sum_of_elements  = sum(&lt;collection&gt;)\nelementwise_sum  = [sum(pair) for pair in zip(list_a, list_b)]\nsorted_by_second = sorted(&lt;collection&gt;, key=lambda el: el[1])\nsorted_by_both   = sorted(&lt;collection&gt;, key=lambda el: (el[1], el[0]))\nflatter_list     = list(itertools.chain.from_iterable(&lt;list&gt;))\nproduct_of_elems = functools.reduce(lambda out, el: out * el, &lt;collection&gt;)\nlist_of_chars    = list(&lt;str&gt;)\n</code></pre> * For details about sorted(), min() and max() see sortable. * Module operator provides functions itemgetter() and mul() that offer the same functionality as lambda expressions above.</p> <pre><code>&lt;list&gt;.insert(&lt;int&gt;, &lt;el&gt;)      # Inserts item at index and moves the rest to the right.\n&lt;el&gt;  = &lt;list&gt;.pop([&lt;int&gt;])     # Removes and returns item at index or from the end.\n&lt;int&gt; = &lt;list&gt;.count(&lt;el&gt;)      # Returns number of occurrences. Also works on strings.\n&lt;int&gt; = &lt;list&gt;.index(&lt;el&gt;)      # Returns index of the first occurrence or raises ValueError.\n&lt;list&gt;.remove(&lt;el&gt;)             # Removes first occurrence of the item or raises ValueError.\n&lt;list&gt;.clear()                  # Removes all items. Also works on dictionary and set.\n</code></pre>"},{"location":"python-cheatsheet/#dictionary","title":"Dictionary","text":"<pre><code>&lt;view&gt; = &lt;dict&gt;.keys()                          # Coll. of keys that reflects changes.\n&lt;view&gt; = &lt;dict&gt;.values()                        # Coll. of values that reflects changes.\n&lt;view&gt; = &lt;dict&gt;.items()                         # Coll. of key-value tuples that reflects chgs.\n</code></pre> <pre><code>value  = &lt;dict&gt;.get(key, default=None)          # Returns default if key is missing.\nvalue  = &lt;dict&gt;.setdefault(key, default=None)   # Returns and writes default if key is missing.\n&lt;dict&gt; = collections.defaultdict(&lt;type&gt;)        # Returns a dict with default value `&lt;type&gt;()`.\n&lt;dict&gt; = collections.defaultdict(lambda: 1)     # Returns a dict with default value 1.\n</code></pre> <pre><code>&lt;dict&gt; = dict(&lt;collection&gt;)                     # Creates a dict from coll. of key-value pairs.\n&lt;dict&gt; = dict(zip(keys, values))                # Creates a dict from two collections.\n&lt;dict&gt; = dict.fromkeys(keys [, value])          # Creates a dict from collection of keys.\n</code></pre> <pre><code>&lt;dict&gt;.update(&lt;dict&gt;)                           # Adds items. Replaces ones with matching keys.\nvalue = &lt;dict&gt;.pop(key)                         # Removes item or raises KeyError if missing.\n{k for k, v in &lt;dict&gt;.items() if v == value}    # Returns set of keys that point to the value.\n{k: v for k, v in &lt;dict&gt;.items() if k in keys}  # Returns a dictionary, filtered by keys.\n</code></pre>"},{"location":"python-cheatsheet/#counter","title":"Counter","text":"<pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; colors = ['blue', 'blue', 'blue', 'red', 'red']\n&gt;&gt;&gt; counter = Counter(colors)\n&gt;&gt;&gt; counter['yellow'] += 1\nCounter({'blue': 3, 'red': 2, 'yellow': 1})\n&gt;&gt;&gt; counter.most_common()[0]\n('blue', 3)\n</code></pre>"},{"location":"python-cheatsheet/#set","title":"Set","text":"<pre><code>&lt;set&gt; = set()                                   # `{}` returns a dictionary.\n</code></pre> <pre><code>&lt;set&gt;.add(&lt;el&gt;)                                 # Or: &lt;set&gt; |= {&lt;el&gt;}\n&lt;set&gt;.update(&lt;collection&gt; [, ...])              # Or: &lt;set&gt; |= &lt;set&gt;\n</code></pre> <pre><code>&lt;set&gt;  = &lt;set&gt;.union(&lt;coll.&gt;)                   # Or: &lt;set&gt; | &lt;set&gt;\n&lt;set&gt;  = &lt;set&gt;.intersection(&lt;coll.&gt;)            # Or: &lt;set&gt; &amp; &lt;set&gt;\n&lt;set&gt;  = &lt;set&gt;.difference(&lt;coll.&gt;)              # Or: &lt;set&gt; - &lt;set&gt;\n&lt;set&gt;  = &lt;set&gt;.symmetric_difference(&lt;coll.&gt;)    # Or: &lt;set&gt; ^ &lt;set&gt;\n&lt;bool&gt; = &lt;set&gt;.issubset(&lt;coll.&gt;)                # Or: &lt;set&gt; &lt;= &lt;set&gt;\n&lt;bool&gt; = &lt;set&gt;.issuperset(&lt;coll.&gt;)              # Or: &lt;set&gt; &gt;= &lt;set&gt;\n</code></pre> <pre><code>&lt;el&gt; = &lt;set&gt;.pop()                              # Raises KeyError if empty.\n&lt;set&gt;.remove(&lt;el&gt;)                              # Raises KeyError if missing.\n&lt;set&gt;.discard(&lt;el&gt;)                             # Doesn't raise an error.\n</code></pre>"},{"location":"python-cheatsheet/#frozen-set","title":"Frozen Set","text":"<ul> <li>Is immutable and hashable.</li> <li>That means it can be used as a key in a dictionary or as an element in a set. <pre><code>&lt;frozenset&gt; = frozenset(&lt;collection&gt;)\n</code></pre></li> </ul>"},{"location":"python-cheatsheet/#tuple","title":"Tuple","text":"<p>Tuple is an immutable and hashable list. <pre><code>&lt;tuple&gt; = ()                               # Empty tuple.\n&lt;tuple&gt; = (&lt;el&gt;,)                          # Or: &lt;el&gt;,\n&lt;tuple&gt; = (&lt;el_1&gt;, &lt;el_2&gt; [, ...])         # Or: &lt;el_1&gt;, &lt;el_2&gt; [, ...]\n</code></pre></p>"},{"location":"python-cheatsheet/#named-tuple","title":"Named Tuple","text":"<p>Tuple's subclass with named elements.</p> <pre><code>&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; Point = namedtuple('Point', 'x y')\n&gt;&gt;&gt; p = Point(1, y=2)\nPoint(x=1, y=2)\n&gt;&gt;&gt; p[0]\n1\n&gt;&gt;&gt; p.x\n1\n&gt;&gt;&gt; getattr(p, 'y')\n2\n</code></pre>"},{"location":"python-cheatsheet/#range","title":"Range","text":"<p>Immutable and hashable sequence of integers. <pre><code>&lt;range&gt; = range(stop)                      # range(to_exclusive)\n&lt;range&gt; = range(start, stop)               # range(from_inclusive, to_exclusive)\n&lt;range&gt; = range(start, stop, \u00b1step)        # range(from_inclusive, to_exclusive, \u00b1step_size)\n</code></pre></p> <pre><code>&gt;&gt;&gt; [i for i in range(3)]\n[0, 1, 2]\n</code></pre>"},{"location":"python-cheatsheet/#enumerate","title":"Enumerate","text":"<pre><code>for i, el in enumerate(&lt;collection&gt; [, i_start]):\n    ...\n</code></pre>"},{"location":"python-cheatsheet/#iterator","title":"Iterator","text":"<pre><code>&lt;iter&gt; = iter(&lt;collection&gt;)                # `iter(&lt;iter&gt;)` returns unmodified iterator.\n&lt;iter&gt; = iter(&lt;function&gt;, to_exclusive)    # A sequence of return values until 'to_exclusive'.\n&lt;el&gt;   = next(&lt;iter&gt; [, default])          # Raises StopIteration or returns 'default' on end.\n&lt;list&gt; = list(&lt;iter&gt;)                      # Returns a list of iterator's remaining elements.\n</code></pre>"},{"location":"python-cheatsheet/#itertools","title":"Itertools","text":"<pre><code>import itertools as it\n</code></pre> <pre><code>&lt;iter&gt; = it.count(start=0, step=1)         # Returns updated value endlessly. Accepts floats.\n&lt;iter&gt; = it.repeat(&lt;el&gt; [, times])         # Returns element endlessly or 'times' times.\n&lt;iter&gt; = it.cycle(&lt;collection&gt;)            # Repeats the sequence endlessly.\n</code></pre> <pre><code>&lt;iter&gt; = it.chain(&lt;coll&gt;, &lt;coll&gt; [, ...])  # Empties collections in order (figuratively).\n&lt;iter&gt; = it.chain.from_iterable(&lt;coll&gt;)    # Empties collections inside a collection in order.\n</code></pre> <pre><code>&lt;iter&gt; = it.islice(&lt;coll&gt;, to_exclusive)   # Only returns first 'to_exclusive' elements.\n&lt;iter&gt; = it.islice(&lt;coll&gt;, from_inc, \u2026)    # `to_exclusive, +step_size`. Indices can be None.\n</code></pre>"},{"location":"python-cheatsheet/#generator","title":"Generator","text":"<ul> <li>Any function that contains a yield statement returns a generator.</li> <li>Generators and iterators are interchangeable.</li> </ul> <pre><code>def count(start, step):\n    while True:\n        yield start\n        start += step\n</code></pre> <pre><code>&gt;&gt;&gt; counter = count(10, 2)\n&gt;&gt;&gt; next(counter), next(counter), next(counter)\n(10, 12, 14)\n</code></pre>"},{"location":"python-cheatsheet/#type","title":"Type","text":"<ul> <li>Everything is an object.</li> <li>Every object has a type.</li> <li>Type and class are synonymous.</li> </ul> <pre><code>&lt;type&gt; = type(&lt;el&gt;)                          # Or: &lt;el&gt;.__class__\n&lt;bool&gt; = isinstance(&lt;el&gt;, &lt;type&gt;)            # Or: issubclass(type(&lt;el&gt;), &lt;type&gt;)\n</code></pre> <pre><code>&gt;&gt;&gt; type('a'), 'a'.__class__, str\n(&lt;class 'str'&gt;, &lt;class 'str'&gt;, &lt;class 'str'&gt;)\n</code></pre>"},{"location":"python-cheatsheet/#some-types-do-not-have-built-in-names-so-they-must-be-imported","title":"Some types do not have built-in names, so they must be imported:","text":"<pre><code>from types import FunctionType, MethodType, LambdaType, GeneratorType, ModuleType\n</code></pre>"},{"location":"python-cheatsheet/#abstract-base-classes","title":"Abstract Base Classes","text":"<p>Each abstract base class specifies a set of virtual subclasses. These classes are then recognized by isinstance() and issubclass() as subclasses of the ABC, although they are really not. ABC can also manually decide whether or not a specific class is its virtual subclass, usually based on which methods the class has implemented. For instance, Iterable ABC looks for method iter(), while Collection ABC looks for iter(), contains() and len().</p> <pre><code>&gt;&gt;&gt; from collections.abc import Iterable, Collection, Sequence\n&gt;&gt;&gt; isinstance([1, 2, 3], Iterable)\nTrue\n</code></pre> <pre><code>+------------------+------------+------------+------------+\n|                  |  Iterable  | Collection |  Sequence  |\n+------------------+------------+------------+------------+\n| list, range, str |    yes     |    yes     |    yes     |\n| dict, set        |    yes     |    yes     |            |\n| iter             |    yes     |            |            |\n+------------------+------------+------------+------------+\n</code></pre> <pre><code>&gt;&gt;&gt; from numbers import Number, Complex, Real, Rational, Integral\n&gt;&gt;&gt; isinstance(123, Number)\nTrue\n</code></pre> <pre><code>+--------------------+----------+----------+----------+----------+----------+\n|                    |  Number  |  Complex |   Real   | Rational | Integral |\n+--------------------+----------+----------+----------+----------+----------+\n| int                |   yes    |   yes    |   yes    |   yes    |   yes    |\n| fractions.Fraction |   yes    |   yes    |   yes    |   yes    |          |\n| float              |   yes    |   yes    |   yes    |          |          |\n| complex            |   yes    |   yes    |          |          |          |\n| decimal.Decimal    |   yes    |          |          |          |          |\n+--------------------+----------+----------+----------+----------+----------+\n</code></pre>"},{"location":"python-cheatsheet/#string","title":"String","text":"<p>Immutable sequence of characters.</p> <pre><code>&lt;str&gt;  = &lt;str&gt;.strip()                       # Strips all whitespace characters from both ends.\n&lt;str&gt;  = &lt;str&gt;.strip('&lt;chars&gt;')              # Strips passed characters. Also lstrip/rstrip().\n</code></pre> <pre><code>&lt;list&gt; = &lt;str&gt;.split()                       # Splits on one or more whitespace characters.\n&lt;list&gt; = &lt;str&gt;.split(sep=None, maxsplit=-1)  # Splits on 'sep' str at most 'maxsplit' times.\n&lt;list&gt; = &lt;str&gt;.splitlines(keepends=False)    # On [\\n\\r\\f\\v\\x1c-\\x1e\\x85\\u2028\\u2029] and \\r\\n.\n&lt;str&gt;  = &lt;str&gt;.join(&lt;coll_of_strings&gt;)       # Joins elements using string as a separator.\n</code></pre> <pre><code>&lt;bool&gt; = &lt;sub_str&gt; in &lt;str&gt;                  # Checks if string contains the substring.\n&lt;bool&gt; = &lt;str&gt;.startswith(&lt;sub_str&gt;)         # Pass tuple of strings for multiple options.\n&lt;int&gt;  = &lt;str&gt;.find(&lt;sub_str&gt;)               # Returns start index of the first match or -1.\n&lt;int&gt;  = &lt;str&gt;.index(&lt;sub_str&gt;)              # Same, but raises ValueError if missing.\n</code></pre> <pre><code>&lt;str&gt;  = &lt;str&gt;.lower()                       # Changes the case. Also upper/capitalize/title().\n&lt;str&gt;  = &lt;str&gt;.replace(old, new [, count])   # Replaces 'old' with 'new' at most 'count' times.\n&lt;str&gt;  = &lt;str&gt;.translate(&lt;table&gt;)            # Use `str.maketrans(&lt;dict&gt;)` to generate table.\n</code></pre> <p><pre><code>&lt;str&gt;  = chr(&lt;int&gt;)                          # Converts int to Unicode character.\n&lt;int&gt;  = ord(&lt;str&gt;)                          # Converts Unicode character to int.\n</code></pre> * Use <code>'unicodedata.normalize(\"NFC\", &lt;str&gt;)'</code> on strings like <code>'Mot\u00f6rhead'</code> before comparing them to other strings, because <code>'\u00f6'</code> can be stored as one or two characters. * <code>'NFC'</code> converts such characters to a single character, while <code>'NFD'</code> converts them to two.</p>"},{"location":"python-cheatsheet/#property-methods","title":"Property Methods","text":"<pre><code>&lt;bool&gt; = &lt;str&gt;.isdecimal()                   # Checks for [0-9]. Also [\u0966-\u096f] and [\u0660-\u0669].\n&lt;bool&gt; = &lt;str&gt;.isdigit()                     # Checks for [\u00b2\u00b3\u00b9\u2026] and isdecimal().\n&lt;bool&gt; = &lt;str&gt;.isnumeric()                   # Checks for [\u00bc\u00bd\u00be], [\u96f6\u3007\u4e00\u2026] and isdigit().\n&lt;bool&gt; = &lt;str&gt;.isalnum()                     # Checks for [a-zA-Z\u2026] and isnumeric().\n&lt;bool&gt; = &lt;str&gt;.isprintable()                 # Checks for [ !#$%\u2026] and isalnum().\n&lt;bool&gt; = &lt;str&gt;.isspace()                     # Checks for [ \\t\\n\\r\\f\\v\\x1c-\\x1f\\x85\\xa0\u2026].\n</code></pre>"},{"location":"python-cheatsheet/#regex","title":"Regex","text":"<p>Functions for regular expression matching.</p> <pre><code>import re\n&lt;str&gt;   = re.sub(&lt;regex&gt;, new, text, count=0)  # Substitutes all occurrences with 'new'.\n&lt;list&gt;  = re.findall(&lt;regex&gt;, text)            # Returns all occurrences as strings.\n&lt;list&gt;  = re.split(&lt;regex&gt;, text, maxsplit=0)  # Add brackets around regex to include matches.\n&lt;Match&gt; = re.search(&lt;regex&gt;, text)             # First occurrence of the pattern or None.\n&lt;Match&gt; = re.match(&lt;regex&gt;, text)              # Searches only at the beginning of the text.\n&lt;iter&gt;  = re.finditer(&lt;regex&gt;, text)           # Returns all occurrences as Match objects.\n</code></pre> <ul> <li>Argument 'new' can be a function that accepts a Match object and returns a string.</li> <li>Argument <code>'flags=re.IGNORECASE'</code> can be used with all functions.</li> <li>Argument <code>'flags=re.MULTILINE'</code> makes <code>'^'</code> and <code>'$'</code> match the start/end of each line.</li> <li>Argument <code>'flags=re.DOTALL'</code> makes <code>'.'</code> also accept the <code>'\\n'</code>.</li> <li>Use <code>r'\\1'</code> or <code>'\\\\1'</code> for backreference (<code>'\\1'</code> returns a character with octal code 1).</li> <li>Add <code>'?'</code> after <code>'*'</code> and <code>'+'</code> to make them non-greedy.</li> <li><code>'re.compile(&lt;regex&gt;)'</code> returns a Pattern object with listed methods.</li> </ul>"},{"location":"python-cheatsheet/#match-object","title":"Match Object","text":"<pre><code>&lt;str&gt;   = &lt;Match&gt;.group()                      # Returns the whole match. Also group(0).\n&lt;str&gt;   = &lt;Match&gt;.group(1)                     # Returns part inside the first brackets.\n&lt;tuple&gt; = &lt;Match&gt;.groups()                     # Returns all bracketed parts.\n&lt;int&gt;   = &lt;Match&gt;.start()                      # Returns start index of the match.\n&lt;int&gt;   = &lt;Match&gt;.end()                        # Returns exclusive end index of the match.\n</code></pre>"},{"location":"python-cheatsheet/#special-sequences","title":"Special Sequences","text":"<pre><code>'\\d' == '[0-9]'                                # Also [\u0966-\u096f\u2026]. Matches a decimal character.\n'\\w' == '[a-zA-Z0-9_]'                         # Also [\u00aa\u00b2\u00b3\u2026]. Matches an alphanumeric or _.\n'\\s' == '[ \\t\\n\\r\\f\\v]'                        # Also [\\x1c-\\x1f\u2026]. Matches a whitespace.\n</code></pre> <ul> <li>By default, decimal characters, alphanumerics and whitespaces from all alphabets are matched unless <code>'flags=re.ASCII'</code> argument is used.</li> <li>It restricts special sequence matches to <code>'[\\x00-\\x7f]'</code> (the first 128 characters) and also prevents <code>'\\s'</code> from accepting <code>'[\\x1c-\\x1f]'</code> (the so-called separator characters).</li> <li>Use a capital letter for negation (all non-ASCII characters will be matched when used in combination with ASCII flag).</li> </ul>"},{"location":"python-cheatsheet/#format","title":"Format","text":"<pre><code>&lt;str&gt; = f'{&lt;el_1&gt;}, {&lt;el_2&gt;}'            # Curly brackets can also contain expressions.\n&lt;str&gt; = '{}, {}'.format(&lt;el_1&gt;, &lt;el_2&gt;)  # Or: '{0}, {a}'.format(&lt;el_1&gt;, a=&lt;el_2&gt;)\n&lt;str&gt; = '%s, %s' % (&lt;el_1&gt;, &lt;el_2&gt;)      # Redundant and inferior C-style formatting.\n</code></pre>"},{"location":"python-cheatsheet/#example","title":"Example","text":"<pre><code>&gt;&gt;&gt; Person = collections.namedtuple('Person', 'name height')\n&gt;&gt;&gt; person = Person('Jean-Luc', 187)\n&gt;&gt;&gt; f'{person.name} is {person.height / 100} meters tall.'\n'Jean-Luc is 1.87 meters tall.'\n</code></pre>"},{"location":"python-cheatsheet/#general-options","title":"General Options","text":"<p><pre><code>{&lt;el&gt;:&lt;10}                               # '&lt;el&gt;      '\n{&lt;el&gt;:^10}                               # '   &lt;el&gt;   '\n{&lt;el&gt;:&gt;10}                               # '      &lt;el&gt;'\n{&lt;el&gt;:.&lt;10}                              # '&lt;el&gt;......'\n{&lt;el&gt;:0}                                 # '&lt;el&gt;'\n</code></pre> * Objects are rendered using <code>'format(&lt;el&gt;, &lt;options&gt;)'</code>. * Options can be generated dynamically: <code>f'{&lt;el&gt;:{&lt;str/int&gt;}[\u2026]}'</code>. * Adding <code>'='</code> to the expression prepends it to the output: <code>f'{1+1=}'</code> returns <code>'1+1=2'</code>. * Adding <code>'!r'</code> to the expression converts object to string by calling its repr() method.</p>"},{"location":"python-cheatsheet/#strings","title":"Strings","text":"<pre><code>{'abcde':10}                             # 'abcde     '\n{'abcde':10.3}                           # 'abc       '\n{'abcde':.3}                             # 'abc'\n{'abcde'!r:10}                           # \"'abcde'   \"\n</code></pre>"},{"location":"python-cheatsheet/#numbers","title":"Numbers","text":"<pre><code>{123456:10}                              # '    123456'\n{123456:10,}                             # '   123,456'\n{123456:10_}                             # '   123_456'\n{123456:+10}                             # '   +123456'\n{123456:=+10}                            # '+   123456'\n{123456: }                               # ' 123456'\n{-123456: }                              # '-123456'\n</code></pre>"},{"location":"python-cheatsheet/#floats","title":"Floats","text":"<pre><code>{1.23456:10.3}                           # '      1.23'\n{1.23456:10.3f}                          # '     1.235'\n{1.23456:10.3e}                          # ' 1.235e+00'\n{1.23456:10.3%}                          # '  123.456%'\n</code></pre>"},{"location":"python-cheatsheet/#comparison-of-presentation-types","title":"Comparison of presentation types:","text":"<pre><code>+--------------+----------------+----------------+----------------+----------------+\n|              |    {&lt;float&gt;}   |   {&lt;float&gt;:f}  |   {&lt;float&gt;:e}  |   {&lt;float&gt;:%}  |\n+--------------+----------------+----------------+----------------+----------------+\n|  0.000056789 |   '5.6789e-05' |    '0.000057'  | '5.678900e-05' |    '0.005679%' |\n|  0.00056789  |   '0.00056789' |    '0.000568'  | '5.678900e-04' |    '0.056789%' |\n|  0.0056789   |   '0.0056789'  |    '0.005679'  | '5.678900e-03' |    '0.567890%' |\n|  0.056789    |   '0.056789'   |    '0.056789'  | '5.678900e-02' |    '5.678900%' |\n|  0.56789     |   '0.56789'    |    '0.567890'  | '5.678900e-01' |   '56.789000%' |\n|  5.6789      |   '5.6789'     |    '5.678900'  | '5.678900e+00' |  '567.890000%' |\n| 56.789       |  '56.789'      |   '56.789000'  | '5.678900e+01' | '5678.900000%' |\n+--------------+----------------+----------------+----------------+----------------+\n</code></pre> <p><pre><code>+--------------+----------------+----------------+----------------+----------------+\n|              |  {&lt;float&gt;:.2}  |  {&lt;float&gt;:.2f} |  {&lt;float&gt;:.2e} |  {&lt;float&gt;:.2%} |\n+--------------+----------------+----------------+----------------+----------------+\n|  0.000056789 |    '5.7e-05'   |      '0.00'    |   '5.68e-05'   |      '0.01%'   |\n|  0.00056789  |    '0.00057'   |      '0.00'    |   '5.68e-04'   |      '0.06%'   |\n|  0.0056789   |    '0.0057'    |      '0.01'    |   '5.68e-03'   |      '0.57%'   |\n|  0.056789    |    '0.057'     |      '0.06'    |   '5.68e-02'   |      '5.68%'   |\n|  0.56789     |    '0.57'      |      '0.57'    |   '5.68e-01'   |     '56.79%'   |\n|  5.6789      |    '5.7'       |      '5.68'    |   '5.68e+00'   |    '567.89%'   |\n| 56.789       |    '5.7e+01'   |     '56.79'    |   '5.68e+01'   |   '5678.90%'   |\n+--------------+----------------+----------------+----------------+----------------+\n</code></pre> * <code>'{&lt;float&gt;:g}'</code> is <code>'{&lt;float&gt;:.6}'</code> with stripped zeros, exponent starting at <code>'1e+06'</code>. * When both rounding up and rounding down are possible, the one that returns result with even last digit is chosen. That makes <code>'{6.5:.0f}'</code> a <code>'6'</code> and <code>'{7.5:.0f}'</code> an <code>'8'</code>. * This rule only effects numbers that can be represented exactly by a float (<code>.5</code>, <code>.25</code>, \u2026).</p>"},{"location":"python-cheatsheet/#ints","title":"Ints","text":"<pre><code>{90:c}                                   # 'Z'\n{90:b}                                   # '1011010'\n{90:X}                                   # '5A'\n</code></pre>"},{"location":"python-cheatsheet/#numbers_1","title":"Numbers","text":"<p><pre><code>&lt;int&gt;      = int(&lt;float/str/bool&gt;)                # Or: math.floor(&lt;float&gt;)\n&lt;float&gt;    = float(&lt;int/str/bool&gt;)                # Or: &lt;int/float&gt;e\u00b1&lt;int&gt;\n&lt;complex&gt;  = complex(real=0, imag=0)              # Or: &lt;int/float&gt; \u00b1 &lt;int/float&gt;j\n&lt;Fraction&gt; = fractions.Fraction(0, 1)             # Or: Fraction(numerator=0, denominator=1)\n&lt;Decimal&gt;  = decimal.Decimal(&lt;str/int&gt;)           # Or: Decimal((sign, digits, exponent))\n</code></pre> * <code>'int(&lt;str&gt;)'</code> and <code>'float(&lt;str&gt;)'</code> raise ValueError on malformed strings. * Decimal numbers are stored exactly, unlike most floats where <code>'1.1 + 2.2 != 3.3'</code>. * Floats can be compared with: <code>'math.isclose(&lt;float&gt;, &lt;float&gt;)'</code>. * Precision of decimal operations is set with: <code>'decimal.getcontext().prec = &lt;int&gt;'</code>.</p>"},{"location":"python-cheatsheet/#basic-functions","title":"Basic Functions","text":"<pre><code>&lt;num&gt; = pow(&lt;num&gt;, &lt;num&gt;)                         # Or: &lt;num&gt; ** &lt;num&gt;\n&lt;num&gt; = abs(&lt;num&gt;)                                # &lt;float&gt; = abs(&lt;complex&gt;)\n&lt;num&gt; = round(&lt;num&gt; [, \u00b1ndigits])                 # `round(126, -1) == 130`\n</code></pre>"},{"location":"python-cheatsheet/#math","title":"Math","text":"<pre><code>from math import e, pi, inf, nan, isinf, isnan    # `&lt;el&gt; == nan` is always False.\nfrom math import sin, cos, tan, asin, acos, atan  # Also: degrees, radians.\nfrom math import log, log10, log2                 # Log can accept base as second arg.\n</code></pre>"},{"location":"python-cheatsheet/#statistics","title":"Statistics","text":"<pre><code>from statistics import mean, median, variance     # Also: stdev, quantiles, groupby.\n</code></pre>"},{"location":"python-cheatsheet/#random","title":"Random","text":"<pre><code>from random import random, randint, choice        # Also: shuffle, gauss, triangular, seed.\n&lt;float&gt; = random()                                # A float inside [0, 1).\n&lt;int&gt;   = randint(from_inc, to_inc)               # An int inside [from_inc, to_inc].\n&lt;el&gt;    = choice(&lt;sequence&gt;)                      # Keeps the sequence intact.\n</code></pre>"},{"location":"python-cheatsheet/#bin-hex","title":"Bin, Hex","text":"<pre><code>&lt;int&gt; = \u00b10b&lt;bin&gt;                                  # Or: \u00b10x&lt;hex&gt;\n&lt;int&gt; = int('\u00b1&lt;bin&gt;', 2)                          # Or: int('\u00b1&lt;hex&gt;', 16)\n&lt;int&gt; = int('\u00b10b&lt;bin&gt;', 0)                        # Or: int('\u00b10x&lt;hex&gt;', 0)\n&lt;str&gt; = bin(&lt;int&gt;)                                # Returns '[-]0b&lt;bin&gt;'.\n</code></pre>"},{"location":"python-cheatsheet/#bitwise-operators","title":"Bitwise Operators","text":"<pre><code>&lt;int&gt; = &lt;int&gt; &amp; &lt;int&gt;                             # And (0b1100 &amp; 0b1010 == 0b1000).\n&lt;int&gt; = &lt;int&gt; | &lt;int&gt;                             # Or  (0b1100 | 0b1010 == 0b1110).\n&lt;int&gt; = &lt;int&gt; ^ &lt;int&gt;                             # Xor (0b1100 ^ 0b1010 == 0b0110).\n&lt;int&gt; = &lt;int&gt; &lt;&lt; n_bits                           # Left shift. Use &gt;&gt; for right.\n&lt;int&gt; = ~&lt;int&gt;                                    # Not. Also -&lt;int&gt; - 1.\n</code></pre>"},{"location":"python-cheatsheet/#combinatorics","title":"Combinatorics","text":"<pre><code>import itertools as it\n</code></pre> <pre><code>&gt;&gt;&gt; list(it.product([0, 1], repeat=3))\n[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1),\n (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]\n</code></pre> <pre><code>&gt;&gt;&gt; list(it.product('abc', 'abc'))                    #   a  b  c\n[('a', 'a'), ('a', 'b'), ('a', 'c'),                  # a x  x  x\n ('b', 'a'), ('b', 'b'), ('b', 'c'),                  # b x  x  x\n ('c', 'a'), ('c', 'b'), ('c', 'c')]                  # c x  x  x\n</code></pre> <pre><code>&gt;&gt;&gt; list(it.combinations('abc', 2))                   #   a  b  c\n[('a', 'b'), ('a', 'c'),                              # a .  x  x\n ('b', 'c')]                                          # b .  .  x\n</code></pre> <pre><code>&gt;&gt;&gt; list(it.combinations_with_replacement('abc', 2))  #   a  b  c\n[('a', 'a'), ('a', 'b'), ('a', 'c'),                  # a x  x  x\n ('b', 'b'), ('b', 'c'),                              # b .  x  x\n ('c', 'c')]                                          # c .  .  x\n</code></pre> <pre><code>&gt;&gt;&gt; list(it.permutations('abc', 2))                   #   a  b  c\n[('a', 'b'), ('a', 'c'),                              # a .  x  x\n ('b', 'a'), ('b', 'c'),                              # b x  .  x\n ('c', 'a'), ('c', 'b')]                              # c x  x  .\n</code></pre>"},{"location":"python-cheatsheet/#datetime","title":"Datetime","text":"<p>Provides 'date', 'time', 'datetime' and 'timedelta' classes. All are immutable and hashable.</p> <pre><code># $ pip3 install python-dateutil\nfrom datetime import date, time, datetime, timedelta, timezone\nfrom dateutil.tz import tzlocal, gettz\n</code></pre> <p><pre><code>&lt;D&gt;  = date(year, month, day)               # Only accepts valid dates from 1 to 9999 AD.\n&lt;T&gt;  = time(hour=0, minute=0, second=0)     # Also: `microsecond=0, tzinfo=None, fold=0`.\n&lt;DT&gt; = datetime(year, month, day, hour=0)   # Also: `minute=0, second=0, microsecond=0, \u2026`.\n&lt;TD&gt; = timedelta(weeks=0, days=0, hours=0)  # Also: `minutes=0, seconds=0, microseconds=0`.\n</code></pre> * Aware <code>&lt;a&gt;</code> time and datetime objects have defined timezone, while naive <code>&lt;n&gt;</code> don't. If object is naive, it is presumed to be in the system's timezone! * <code>'fold=1'</code> means the second pass in case of time jumping back for one hour. * Timedelta normalizes arguments to \u00b1days, seconds (&lt; 86\u202f400) and microseconds (&lt; 1M). * Use <code>'&lt;D/DT&gt;.weekday()'</code> to get the day of the week as an int, with Monday being 0.</p>"},{"location":"python-cheatsheet/#now","title":"Now","text":"<p><pre><code>&lt;D/DTn&gt;  = D/DT.today()                     # Current local date or naive DT. Also DT.now().\n&lt;DTa&gt;    = DT.now(&lt;tzinfo&gt;)                 # Aware DT from current time in passed timezone.\n</code></pre> * To extract time use <code>'&lt;DTn&gt;.time()'</code>, <code>'&lt;DTa&gt;.time()'</code> or <code>'&lt;DTa&gt;.timetz()'</code>.</p>"},{"location":"python-cheatsheet/#timezone","title":"Timezone","text":"<p><pre><code>&lt;tzinfo&gt; = timezone.utc                     # London without daylight saving time (DST).\n&lt;tzinfo&gt; = timezone(&lt;timedelta&gt;)            # Timezone with fixed offset from UTC.\n&lt;tzinfo&gt; = tzlocal()                        # Local tz with dynamic offset. Also gettz().\n&lt;tzinfo&gt; = gettz('&lt;Continent&gt;/&lt;City&gt;')      # 'Continent/City_Name' timezone or None.\n&lt;DTa&gt;    = &lt;DT&gt;.astimezone([&lt;tzinfo&gt;])      # Converts DT to the passed or local fixed zone.\n&lt;Ta/DTa&gt; = &lt;T/DT&gt;.replace(tzinfo=&lt;tzinfo&gt;)  # Changes object's timezone without conversion.\n</code></pre> * Timezones returned by gettz(), tzlocal(), and implicit local timezone of naive objects have offsets that vary through time due to DST and historical changes of the zone's base offset. * Standard library's zoneinfo.ZoneInfo() can be used instead of gettz() on Python 3.9 and later. It requires 'tzdata' package on Windows. It doesn't return local tz if arg. is omitted.</p>"},{"location":"python-cheatsheet/#encode","title":"Encode","text":"<p><pre><code>&lt;D/T/DT&gt; = D/T/DT.fromisoformat(&lt;str&gt;)      # Object from ISO string. Raises ValueError.\n&lt;DT&gt;     = DT.strptime(&lt;str&gt;, '&lt;format&gt;')   # Datetime from str, according to format.\n&lt;D/DTn&gt;  = D/DT.fromordinal(&lt;int&gt;)          # D/DTn from days since the Gregorian NYE 1.\n&lt;DTn&gt;    = DT.fromtimestamp(&lt;float&gt;)        # Local time DTn from seconds since the Epoch.\n&lt;DTa&gt;    = DT.fromtimestamp(&lt;float&gt;, &lt;tz&gt;)  # Aware datetime from seconds since the Epoch.\n</code></pre> * ISO strings come in following forms: <code>'YYYY-MM-DD'</code>, <code>'HH:MM:SS.mmmuuu[\u00b1HH:MM]'</code>, or both separated by an arbitrary character. All parts following the hours are optional. * Python uses the Unix Epoch: <code>'1970-01-01 00:00 UTC'</code>, <code>'1970-01-01 01:00 CET'</code>, ...</p>"},{"location":"python-cheatsheet/#decode","title":"Decode","text":"<pre><code>&lt;str&gt;    = &lt;D/T/DT&gt;.isoformat(sep='T')      # Also `timespec='auto/hours/minutes/seconds/\u2026'`.\n&lt;str&gt;    = &lt;D/T/DT&gt;.strftime('&lt;format&gt;')    # Custom string representation of the object.\n&lt;int&gt;    = &lt;D/DT&gt;.toordinal()               # Days since Gregorian NYE 1, ignoring time and tz.\n&lt;float&gt;  = &lt;DTn&gt;.timestamp()                # Seconds since the Epoch, from DTn in local tz.\n&lt;float&gt;  = &lt;DTa&gt;.timestamp()                # Seconds since the Epoch, from aware datetime.\n</code></pre>"},{"location":"python-cheatsheet/#format_1","title":"Format","text":"<p><pre><code>&gt;&gt;&gt; dt = datetime.strptime('2025-08-14 23:39:00.00 +0200', '%Y-%m-%d %H:%M:%S.%f %z')\n&gt;&gt;&gt; dt.strftime(\"%dth of %B '%y (%a), %I:%M %p %Z\")\n\"14th of August '25 (Thu), 11:39 PM UTC+02:00\"\n</code></pre> * <code>'%z'</code> accepts <code>'\u00b1HH[:]MM'</code> and returns <code>'\u00b1HHMM'</code> or empty string if datetime is naive. * <code>'%Z'</code> accepts <code>'UTC/GMT'</code> and local timezone's code and returns timezone's name, <code>'UTC[\u00b1HH:MM]'</code> if timezone is nameless, or an empty string if datetime is naive.</p>"},{"location":"python-cheatsheet/#arithmetics","title":"Arithmetics","text":"<pre><code>&lt;bool&gt;   = &lt;D/T/DTn&gt; &gt; &lt;D/T/DTn&gt;            # Ignores time jumps (fold attribute). Also ==.\n&lt;bool&gt;   = &lt;DTa&gt;     &gt; &lt;DTa&gt;                # Ignores time jumps if they share tzinfo object.\n&lt;TD&gt;     = &lt;D/DTn&gt;   - &lt;D/DTn&gt;              # Ignores jumps. Convert to UTC for actual delta.\n&lt;TD&gt;     = &lt;DTa&gt;     - &lt;DTa&gt;                # Ignores time jumps if they share tzinfo object.\n&lt;D/DT&gt;   = &lt;D/DT&gt;    \u00b1 &lt;TD&gt;                 # Returned datetime can fall into missing hour.\n&lt;TD&gt;     = &lt;TD&gt;      * &lt;float&gt;              # Also: &lt;TD&gt; = abs(&lt;TD&gt;) and &lt;TD&gt; = &lt;TD&gt; \u00b1% &lt;TD&gt;.\n&lt;float&gt;  = &lt;TD&gt;      / &lt;TD&gt;                 # How many hours/weeks/years are in TD. Also //.\n</code></pre>"},{"location":"python-cheatsheet/#arguments","title":"Arguments","text":""},{"location":"python-cheatsheet/#inside-function-call","title":"Inside Function Call","text":"<pre><code>func(&lt;positional_args&gt;)                           # func(0, 0)\nfunc(&lt;keyword_args&gt;)                              # func(x=0, y=0)\nfunc(&lt;positional_args&gt;, &lt;keyword_args&gt;)           # func(0, y=0)\n</code></pre>"},{"location":"python-cheatsheet/#inside-function-definition","title":"Inside Function Definition","text":"<p><pre><code>def func(&lt;nondefault_args&gt;): ...                  # def func(x, y): ...\ndef func(&lt;default_args&gt;): ...                     # def func(x=0, y=0): ...\ndef func(&lt;nondefault_args&gt;, &lt;default_args&gt;): ...  # def func(x, y=0): ...\n</code></pre> * Default values are evaluated when function is first encountered in the scope. * Any mutation of a mutable default value will persist between invocations!</p>"},{"location":"python-cheatsheet/#splat-operator","title":"Splat Operator","text":""},{"location":"python-cheatsheet/#inside-function-call_1","title":"Inside Function Call","text":"<p>Splat expands a collection into positional arguments, while splatty-splat expands a dictionary into keyword arguments. <pre><code>args   = (1, 2)\nkwargs = {'x': 3, 'y': 4, 'z': 5}\nfunc(*args, **kwargs)\n</code></pre></p>"},{"location":"python-cheatsheet/#is-the-same-as","title":"Is the same as:","text":"<pre><code>func(1, 2, x=3, y=4, z=5)\n</code></pre>"},{"location":"python-cheatsheet/#inside-function-definition_1","title":"Inside Function Definition","text":"<p>Splat combines zero or more positional arguments into a tuple, while splatty-splat combines zero or more keyword arguments into a dictionary. <pre><code>def add(*a):\n    return sum(a)\n</code></pre></p> <pre><code>&gt;&gt;&gt; add(1, 2, 3)\n6\n</code></pre>"},{"location":"python-cheatsheet/#legal-argument-combinations","title":"Legal argument combinations:","text":"<pre><code>def f(*args): ...               # f(1, 2, 3)\ndef f(x, *args): ...            # f(1, 2, 3)\ndef f(*args, z): ...            # f(1, 2, z=3)\n</code></pre> <pre><code>def f(**kwargs): ...            # f(x=1, y=2, z=3)\ndef f(x, **kwargs): ...         # f(x=1, y=2, z=3) | f(1, y=2, z=3)\n</code></pre> <pre><code>def f(*args, **kwargs): ...     # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)\ndef f(x, *args, **kwargs): ...  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)\ndef f(*args, y, **kwargs): ...  # f(x=1, y=2, z=3) | f(1, y=2, z=3)\n</code></pre> <pre><code>def f(*, x, y, z): ...          # f(x=1, y=2, z=3)\ndef f(x, *, y, z): ...          # f(x=1, y=2, z=3) | f(1, y=2, z=3)\ndef f(x, y, *, z): ...          # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)\n</code></pre>"},{"location":"python-cheatsheet/#other-uses","title":"Other Uses","text":"<pre><code>&lt;list&gt;  = [*&lt;coll.&gt; [, ...]]    # Or: list(&lt;collection&gt;) [+ ...]\n&lt;tuple&gt; = (*&lt;coll.&gt;, [...])     # Or: tuple(&lt;collection&gt;) [+ ...]\n&lt;set&gt;   = {*&lt;coll.&gt; [, ...]}    # Or: set(&lt;collection&gt;) [| ...]\n&lt;dict&gt;  = {**&lt;dict&gt; [, ...]}    # Or: dict(&lt;dict&gt;) [| ...] (since 3.9)\n</code></pre> <pre><code>head, *body, tail = &lt;coll.&gt;     # Head or tail can be omitted.\n</code></pre>"},{"location":"python-cheatsheet/#inline","title":"Inline","text":""},{"location":"python-cheatsheet/#lambda","title":"Lambda","text":"<pre><code>&lt;func&gt; = lambda: &lt;return_value&gt;                     # A single statement function.\n&lt;func&gt; = lambda &lt;arg_1&gt;, &lt;arg_2&gt;: &lt;return_value&gt;    # Also accepts default arguments.\n</code></pre>"},{"location":"python-cheatsheet/#comprehensions","title":"Comprehensions","text":"<pre><code>&lt;list&gt; = [i+1 for i in range(10)]                   # Or: [1, 2, ..., 10]\n&lt;iter&gt; = (i for i in range(10) if i &gt; 5)            # Or: iter([6, 7, 8, 9])\n&lt;set&gt;  = {i+5 for i in range(10)}                   # Or: {5, 6, ..., 14}\n&lt;dict&gt; = {i: i*2 for i in range(10)}                # Or: {0: 0, 1: 2, ..., 9: 18}\n</code></pre> <pre><code>&gt;&gt;&gt; [l+r for l in 'abc' for r in 'abc']\n['aa', 'ab', 'ac', ..., 'cc']\n</code></pre>"},{"location":"python-cheatsheet/#map-filter-reduce","title":"Map, Filter, Reduce","text":"<pre><code>from functools import reduce\n</code></pre> <pre><code>&lt;iter&gt; = map(lambda x: x + 1, range(10))            # Or: iter([1, 2, ..., 10])\n&lt;iter&gt; = filter(lambda x: x &gt; 5, range(10))         # Or: iter([6, 7, 8, 9])\n&lt;obj&gt;  = reduce(lambda out, x: out + x, range(10))  # Or: 45\n</code></pre>"},{"location":"python-cheatsheet/#any-all","title":"Any, All","text":"<pre><code>&lt;bool&gt; = any(&lt;collection&gt;)                          # Is `bool(&lt;el&gt;)` True for any element.\n&lt;bool&gt; = all(&lt;collection&gt;)                          # Is True for all elements or empty.\n</code></pre>"},{"location":"python-cheatsheet/#conditional-expression","title":"Conditional Expression","text":"<pre><code>&lt;obj&gt; = &lt;exp&gt; if &lt;condition&gt; else &lt;exp&gt;             # Only one expression gets evaluated.\n</code></pre> <pre><code>&gt;&gt;&gt; [a if a else 'zero' for a in (0, 1, 2, 3)]      # `any([0, '', [], None]) == False`\n['zero', 1, 2, 3]\n</code></pre>"},{"location":"python-cheatsheet/#named-tuple-enum-dataclass","title":"Named Tuple, Enum, Dataclass","text":"<pre><code>from collections import namedtuple\nPoint = namedtuple('Point', 'x y')                  # Creates a tuple's subclass.\npoint = Point(0, 0)                                 # Returns its instance.\n</code></pre> <pre><code>from enum import Enum\nDirection = Enum('Direction', 'N E S W')            # Creates an enum.\ndirection = Direction.N                             # Returns its member.\n</code></pre> <pre><code>from dataclasses import make_dataclass\nPlayer = make_dataclass('Player', ['loc', 'dir'])   # Creates a class.\nplayer = Player(point, direction)                   # Returns its instance.\n</code></pre>"},{"location":"python-cheatsheet/#imports","title":"Imports","text":"<p><pre><code>import &lt;module&gt;            # Imports a built-in or '&lt;module&gt;.py'.\nimport &lt;package&gt;           # Imports a built-in or '&lt;package&gt;/__init__.py'.\nimport &lt;package&gt;.&lt;module&gt;  # Imports a built-in or '&lt;package&gt;/&lt;module&gt;.py'.\n</code></pre> * Package is a collection of modules, but it can also define its own objects. * On a filesystem this corresponds to a directory of Python files with an optional init script. * Running <code>'import &lt;package&gt;'</code> does not automatically provide access to the package's modules unless they are explicitly imported in its init script.</p>"},{"location":"python-cheatsheet/#closure","title":"Closure","text":"<p>We have/get a closure in Python when: * A nested function references a value of its enclosing function and then * the enclosing function returns the nested function.</p> <pre><code>def get_multiplier(a):\n    def out(b):\n        return a * b\n    return out\n</code></pre> <pre><code>&gt;&gt;&gt; multiply_by_3 = get_multiplier(3)\n&gt;&gt;&gt; multiply_by_3(10)\n30\n</code></pre> <ul> <li>If multiple nested functions within enclosing function reference the same value, that value gets shared.</li> <li>To dynamically access function's first free variable use <code>'&lt;function&gt;.__closure__[0].cell_contents'</code>.</li> </ul>"},{"location":"python-cheatsheet/#partial","title":"Partial","text":"<pre><code>from functools import partial\n&lt;function&gt; = partial(&lt;function&gt; [, &lt;arg_1&gt;, &lt;arg_2&gt;, ...])\n</code></pre> <p><pre><code>&gt;&gt;&gt; def multiply(a, b):\n...     return a * b\n&gt;&gt;&gt; multiply_by_3 = partial(multiply, 3)\n&gt;&gt;&gt; multiply_by_3(10)\n30\n</code></pre> * Partial is also useful in cases when function needs to be passed as an argument because it enables us to set its arguments beforehand. * A few examples being: <code>'defaultdict(&lt;func&gt;)'</code>, <code>'iter(&lt;func&gt;, to_exc)'</code> and dataclass's <code>'field(default_factory=&lt;func&gt;)'</code>.</p>"},{"location":"python-cheatsheet/#non-local","title":"Non-Local","text":"<p>If variable is being assigned to anywhere in the scope, it is regarded as a local variable, unless it is declared as a 'global' or a 'nonlocal'.</p> <pre><code>def get_counter():\n    i = 0\n    def out():\n        nonlocal i\n        i += 1\n        return i\n    return out\n</code></pre> <pre><code>&gt;&gt;&gt; counter = get_counter()\n&gt;&gt;&gt; counter(), counter(), counter()\n(1, 2, 3)\n</code></pre>"},{"location":"python-cheatsheet/#decorator","title":"Decorator","text":"<ul> <li>A decorator takes a function, adds some functionality and returns it.</li> <li>It can be any callable, but is usually implemented as a function that returns a closure.</li> </ul> <pre><code>@decorator_name\ndef function_that_gets_passed_to_decorator():\n    ...\n</code></pre>"},{"location":"python-cheatsheet/#debugger-example","title":"Debugger Example","text":"<p>Decorator that prints function's name every time the function is called.</p> <p><pre><code>from functools import wraps\n\ndef debug(func):\n    @wraps(func)\n    def out(*args, **kwargs):\n        print(func.__name__)\n        return func(*args, **kwargs)\n    return out\n\n@debug\ndef add(x, y):\n    return x + y\n</code></pre> * Wraps is a helper decorator that copies the metadata of the passed function (func) to the function it is wrapping (out). * Without it, <code>'add.__name__'</code> would return <code>'out'</code>.</p>"},{"location":"python-cheatsheet/#lru-cache","title":"LRU Cache","text":"<p>Decorator that caches function's return values. All function's arguments must be hashable.</p> <p><pre><code>from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    return n if n &lt; 2 else fib(n-2) + fib(n-1)\n</code></pre> * Default size of the cache is 128 values. Passing <code>'maxsize=None'</code> makes it unbounded. * CPython interpreter limits recursion depth to 1000 by default. To increase it use <code>'sys.setrecursionlimit(&lt;depth&gt;)'</code>.</p>"},{"location":"python-cheatsheet/#parametrized-decorator","title":"Parametrized Decorator","text":"<p>A decorator that accepts arguments and returns a normal decorator that accepts a function. <pre><code>from functools import wraps\n\ndef debug(print_result=False):\n    def decorator(func):\n        @wraps(func)\n        def out(*args, **kwargs):\n            result = func(*args, **kwargs)\n            print(func.__name__, result if print_result else '')\n            return result\n        return out\n    return decorator\n\n@debug(print_result=True)\ndef add(x, y):\n    return x + y\n</code></pre> * Using only <code>'@debug'</code> to decorate the add() function would not work here, because debug would then receive the add() function as a 'print_result' argument. Decorators can however manually check if the argument they received is a function and act accordingly.</p>"},{"location":"python-cheatsheet/#class","title":"Class","text":"<p><pre><code>class &lt;name&gt;:\n    def __init__(self, a):\n        self.a = a\n    def __repr__(self):\n        class_name = self.__class__.__name__\n        return f'{class_name}({self.a!r})'\n    def __str__(self):\n        return str(self.a)\n\n    @classmethod\n    def get_class_name(cls):\n        return cls.__name__\n</code></pre> * Return value of repr() should be unambiguous and of str() readable. * If only repr() is defined, it will also be used for str(). * Methods decorated with <code>'@staticmethod'</code> do not receive 'self' nor 'cls' as their first arg.</p>"},{"location":"python-cheatsheet/#expressions-that-call-the-str-method","title":"Expressions that call the str() method:","text":"<pre><code>print(&lt;el&gt;)\nf'{&lt;el&gt;}'\nlogging.warning(&lt;el&gt;)\ncsv.writer(&lt;file&gt;).writerow([&lt;el&gt;])\nraise Exception(&lt;el&gt;)\n</code></pre>"},{"location":"python-cheatsheet/#expressions-that-call-the-repr-method","title":"Expressions that call the repr() method:","text":"<pre><code>print/str/repr([&lt;el&gt;])\nprint/str/repr({&lt;el&gt;: &lt;el&gt;})\nf'{&lt;el&gt;!r}'\nZ = dataclasses.make_dataclass('Z', ['a']); print/str/repr(Z(&lt;el&gt;))\n&gt;&gt;&gt; &lt;el&gt;\n</code></pre>"},{"location":"python-cheatsheet/#constructor-overloading","title":"Constructor Overloading","text":"<pre><code>class &lt;name&gt;:\n    def __init__(self, a=None):\n        self.a = a\n</code></pre>"},{"location":"python-cheatsheet/#inheritance","title":"Inheritance","text":"<pre><code>class Person:\n    def __init__(self, name):\n        self.name = name\n\nclass Employee(Person):\n    def __init__(self, name, staff_num):\n        super().__init__(name)\n        self.staff_num = staff_num\n</code></pre>"},{"location":"python-cheatsheet/#multiple-inheritance","title":"Multiple Inheritance","text":"<pre><code>class A: pass\nclass B: pass\nclass C(A, B): pass\n</code></pre> <p>MRO determines the order in which parent classes are traversed when searching for a method or an attribute: <pre><code>&gt;&gt;&gt; C.mro()\n[&lt;class 'C'&gt;, &lt;class 'A'&gt;, &lt;class 'B'&gt;, &lt;class 'object'&gt;]\n</code></pre></p>"},{"location":"python-cheatsheet/#property","title":"Property","text":"<p>Pythonic way of implementing getters and setters. <pre><code>class Person:\n    @property\n    def name(self):\n        return ' '.join(self._name)\n\n    @name.setter\n    def name(self, value):\n        self._name = value.split()\n</code></pre></p> <pre><code>&gt;&gt;&gt; person = Person()\n&gt;&gt;&gt; person.name = '\\t Guido  van Rossum \\n'\n&gt;&gt;&gt; person.name\n'Guido van Rossum'\n</code></pre>"},{"location":"python-cheatsheet/#dataclass","title":"Dataclass","text":"<p>Decorator that automatically generates init(), repr() and eq() special methods. <pre><code>from dataclasses import dataclass, field\n\n@dataclass(order=False, frozen=False)\nclass &lt;class_name&gt;:\n    &lt;attr_name&gt;: &lt;type&gt;\n    &lt;attr_name&gt;: &lt;type&gt; = &lt;default_value&gt;\n    &lt;attr_name&gt;: list/dict/set = field(default_factory=list/dict/set)\n</code></pre> * Objects can be made sortable with <code>'order=True'</code> and immutable with <code>'frozen=True'</code>. * For object to be hashable, all attributes must be hashable and 'frozen' must be True. * Function field() is needed because <code>'&lt;attr_name&gt;: list = []'</code> would make a list that is shared among all instances. Its 'default_factory' argument can be any callable. * For attributes of arbitrary type use <code>'typing.Any'</code>.</p>"},{"location":"python-cheatsheet/#inline_1","title":"Inline:","text":"<pre><code>from dataclasses import make_dataclass\n&lt;class&gt; = make_dataclass('&lt;class_name&gt;', &lt;coll_of_attribute_names&gt;)\n&lt;class&gt; = make_dataclass('&lt;class_name&gt;', &lt;coll_of_tuples&gt;)\n&lt;tuple&gt; = ('&lt;attr_name&gt;', &lt;type&gt; [, &lt;default_value&gt;])\n</code></pre>"},{"location":"python-cheatsheet/#rest-of-type-annotations-cpython-interpreter-ignores-them-all","title":"Rest of type annotations (CPython interpreter ignores them all):","text":"<pre><code>import collections.abc as abc, typing as tp\n&lt;var_name&gt;: list/set/abc.Iterable/abc.Sequence/tp.Optional[&lt;type&gt;] [= &lt;obj&gt;]\n&lt;var_name&gt;: dict/tuple/tp.Union[&lt;type&gt;, ...] [= &lt;obj&gt;]\ndef func(&lt;arg_name&gt;: &lt;type&gt; [= &lt;obj&gt;]) -&gt; &lt;type&gt;: ...\n</code></pre>"},{"location":"python-cheatsheet/#slots","title":"Slots","text":"<p>Mechanism that restricts objects to attributes listed in 'slots' and significantly reduces their memory footprint.</p> <pre><code>class MyClassWithSlots:\n    __slots__ = ['a']\n    def __init__(self):\n        self.a = 1\n</code></pre>"},{"location":"python-cheatsheet/#copy","title":"Copy","text":"<pre><code>from copy import copy, deepcopy\n&lt;object&gt; = copy(&lt;object&gt;)\n&lt;object&gt; = deepcopy(&lt;object&gt;)\n</code></pre>"},{"location":"python-cheatsheet/#duck-types","title":"Duck Types","text":"<p>A duck type is an implicit type that prescribes a set of special methods. Any object that has those methods defined is considered a member of that duck type.</p>"},{"location":"python-cheatsheet/#comparable","title":"Comparable","text":"<ul> <li>If eq() method is not overridden, it returns <code>'id(self) == id(other)'</code>, which is the same as <code>'self is other'</code>.</li> <li>That means all objects compare not equal by default.</li> <li>Only the left side object has eq() method called, unless it returns NotImplemented, in which case the right object is consulted. False is returned if both return NotImplemented.</li> <li>Ne() automatically works on any object that has eq() defined.</li> </ul> <pre><code>class MyComparable:\n    def __init__(self, a):\n        self.a = a\n    def __eq__(self, other):\n        if isinstance(other, type(self)):\n            return self.a == other.a\n        return NotImplemented\n</code></pre>"},{"location":"python-cheatsheet/#hashable","title":"Hashable","text":"<ul> <li>Hashable object needs both hash() and eq() methods and its hash value should never change.</li> <li>Hashable objects that compare equal must have the same hash value, meaning default hash() that returns <code>'id(self)'</code> will not do.</li> <li>That is why Python automatically makes classes unhashable if you only implement eq().</li> </ul> <pre><code>class MyHashable:\n    def __init__(self, a):\n        self._a = a\n    @property\n    def a(self):\n        return self._a\n    def __eq__(self, other):\n        if isinstance(other, type(self)):\n            return self.a == other.a\n        return NotImplemented\n    def __hash__(self):\n        return hash(self.a)\n</code></pre>"},{"location":"python-cheatsheet/#sortable","title":"Sortable","text":"<ul> <li>With 'total_ordering' decorator, you only need to provide eq() and one of lt(), gt(), le() or ge() special methods and the rest will be automatically generated.</li> <li>Functions sorted() and min() only require lt() method, while max() only requires gt(). However, it is best to define them all so that confusion doesn't arise in other contexts.</li> <li>When two lists, strings or dataclasses are compared, their values get compared in order until a pair of unequal values is found. The comparison of this two values is then returned. The shorter sequence is considered smaller in case of all values being equal.</li> <li>For proper alphabetical order pass <code>'key=locale.strxfrm'</code> to sorted() after running <code>'locale.setlocale(locale.LC_COLLATE, \"en_US.UTF-8\")'</code>.</li> </ul> <pre><code>from functools import total_ordering\n\n@total_ordering\nclass MySortable:\n    def __init__(self, a):\n        self.a = a\n    def __eq__(self, other):\n        if isinstance(other, type(self)):\n            return self.a == other.a\n        return NotImplemented\n    def __lt__(self, other):\n        if isinstance(other, type(self)):\n            return self.a &lt; other.a\n        return NotImplemented\n</code></pre>"},{"location":"python-cheatsheet/#iterator_1","title":"Iterator","text":"<ul> <li>Any object that has methods next() and iter() is an iterator.</li> <li>Next() should return next item or raise StopIteration exception.</li> <li>Iter() should return 'self'. <pre><code>class Counter:\n    def __init__(self):\n        self.i = 0\n    def __next__(self):\n        self.i += 1\n        return self.i\n    def __iter__(self):\n        return self\n</code></pre></li> </ul> <pre><code>&gt;&gt;&gt; counter = Counter()\n&gt;&gt;&gt; next(counter), next(counter), next(counter)\n(1, 2, 3)\n</code></pre>"},{"location":"python-cheatsheet/#python-has-many-different-iterator-objects","title":"Python has many different iterator objects:","text":"<ul> <li>Sequence iterators returned by the iter() function, such as list_iterator and set_iterator.</li> <li>Objects returned by the itertools module, such as count, repeat and cycle.</li> <li>Generators returned by the generator functions and generator expressions.</li> <li>File objects returned by the open() function, etc.</li> </ul>"},{"location":"python-cheatsheet/#callable","title":"Callable","text":"<ul> <li>All functions and classes have a call() method, hence are callable.</li> <li>When this cheatsheet uses <code>'&lt;function&gt;'</code> as an argument, it actually means <code>'&lt;callable&gt;'</code>. <pre><code>class Counter:\n    def __init__(self):\n        self.i = 0\n    def __call__(self):\n        self.i += 1\n        return self.i\n</code></pre></li> </ul> <pre><code>&gt;&gt;&gt; counter = Counter()\n&gt;&gt;&gt; counter(), counter(), counter()\n(1, 2, 3)\n</code></pre>"},{"location":"python-cheatsheet/#context-manager","title":"Context Manager","text":"<ul> <li>With statements only work with objects that have enter() and exit() special methods.</li> <li>Enter() should lock the resources and optionally return an object.</li> <li>Exit() should release the resources.</li> <li>Any exception that happens inside the with block is passed to the exit() method.</li> <li>The exit() method can suppress the exception by returning a true value. <pre><code>class MyOpen:\n    def __init__(self, filename):\n        self.filename = filename\n    def __enter__(self):\n        self.file = open(self.filename)\n        return self.file\n    def __exit__(self, exc_type, exception, traceback):\n        self.file.close()\n</code></pre></li> </ul> <pre><code>&gt;&gt;&gt; with open('test.txt', 'w') as file:\n...     file.write('Hello World!')\n&gt;&gt;&gt; with MyOpen('test.txt') as file:\n...     print(file.read())\nHello World!\n</code></pre>"},{"location":"python-cheatsheet/#iterable-duck-types","title":"Iterable Duck Types","text":""},{"location":"python-cheatsheet/#iterable","title":"Iterable","text":"<ul> <li>Only required method is iter(). It should return an iterator of object's items.</li> <li>Contains() automatically works on any object that has iter() defined. <pre><code>class MyIterable:\n    def __init__(self, a):\n        self.a = a\n    def __iter__(self):\n        return iter(self.a)\n    def __contains__(self, el):\n        return el in self.a\n</code></pre></li> </ul> <pre><code>&gt;&gt;&gt; obj = MyIterable([1, 2, 3])\n&gt;&gt;&gt; [el for el in obj]\n[1, 2, 3]\n&gt;&gt;&gt; 1 in obj\nTrue\n</code></pre>"},{"location":"python-cheatsheet/#collection","title":"Collection","text":"<ul> <li>Only required methods are iter() and len(). Len() should return the number of items.</li> <li>This cheatsheet actually means <code>'&lt;iterable&gt;'</code> when it uses <code>'&lt;collection&gt;'</code>.</li> <li>I chose not to use the name 'iterable' because it sounds scarier and more vague than 'collection'. The only drawback of this decision is that the reader could think a certain function doesn't accept iterators when it does, since iterators are the only built-in objects that are iterable but are not collections. <pre><code>class MyCollection:\n    def __init__(self, a):\n        self.a = a\n    def __iter__(self):\n        return iter(self.a)\n    def __contains__(self, el):\n        return el in self.a\n    def __len__(self):\n        return len(self.a)\n</code></pre></li> </ul>"},{"location":"python-cheatsheet/#sequence","title":"Sequence","text":"<ul> <li>Only required methods are getitem() and len().</li> <li>Getitem() should return an item at the passed index or raise IndexError.</li> <li>Iter() and contains() automatically work on any object that has getitem() defined.</li> <li>Reversed() automatically works on any object that has getitem() and len() defined. <pre><code>class MySequence:\n    def __init__(self, a):\n        self.a = a\n    def __iter__(self):\n        return iter(self.a)\n    def __contains__(self, el):\n        return el in self.a\n    def __len__(self):\n        return len(self.a)\n    def __getitem__(self, i):\n        return self.a[i]\n    def __reversed__(self):\n        return reversed(self.a)\n</code></pre></li> </ul>"},{"location":"python-cheatsheet/#discrepancies-between-glossary-definitions-and-abstract-base-classes","title":"Discrepancies between glossary definitions and abstract base classes:","text":"<ul> <li>Glossary defines iterable as any object with iter() or getitem() and sequence as any object with getitem() and len(). It does not define collection.</li> <li>Passing ABC Iterable to isinstance() or issubclass() checks whether object/class has method iter(), while ABC Collection checks for iter(), contains() and len().</li> </ul>"},{"location":"python-cheatsheet/#abc-sequence","title":"ABC Sequence","text":"<ul> <li>It's a richer interface than the basic sequence.</li> <li>Extending it generates iter(), contains(), reversed(), index() and count().</li> <li>Unlike <code>'abc.Iterable'</code> and <code>'abc.Collection'</code>, it is not a duck type. That is why <code>'issubclass(MySequence, abc.Sequence)'</code> would return False even if MySequence had all the methods defined. It however recognizes list, tuple, range, str, bytes, bytearray, array, memoryview and deque, because they are registered as its virtual subclasses. <pre><code>from collections import abc\n\nclass MyAbcSequence(abc.Sequence):\n    def __init__(self, a):\n        self.a = a\n    def __len__(self):\n        return len(self.a)\n    def __getitem__(self, i):\n        return self.a[i]\n</code></pre></li> </ul>"},{"location":"python-cheatsheet/#table-of-required-and-automatically-available-special-methods","title":"Table of required and automatically available special methods:","text":"<p><pre><code>+------------+------------+------------+------------+--------------+\n|            |  Iterable  | Collection |  Sequence  | abc.Sequence |\n+------------+------------+------------+------------+--------------+\n| iter()     |    REQ     |    REQ     |    Yes     |     Yes      |\n| contains() |    Yes     |    Yes     |    Yes     |     Yes      |\n| len()      |            |    REQ     |    REQ     |     REQ      |\n| getitem()  |            |            |    REQ     |     REQ      |\n| reversed() |            |            |    Yes     |     Yes      |\n| index()    |            |            |            |     Yes      |\n| count()    |            |            |            |     Yes      |\n+------------+------------+------------+------------+--------------+\n</code></pre> * Other ABCs that generate missing methods are: MutableSequence, Set, MutableSet, Mapping and MutableMapping. * Names of their required methods are stored in <code>'&lt;abc&gt;.__abstractmethods__'</code>.</p>"},{"location":"python-cheatsheet/#enum","title":"Enum","text":"<pre><code>from enum import Enum, auto\n</code></pre> <p><pre><code>class &lt;enum_name&gt;(Enum):\n    &lt;member_name&gt; = auto()\n    &lt;member_name&gt; = &lt;value&gt;\n    &lt;member_name&gt; = &lt;value&gt;, &lt;value&gt;\n</code></pre> * Function auto() returns an increment of the last numeric value or 1. * Accessing a member named after a reserved keyword causes SyntaxError. * Methods receive the member they were called on as the 'self' argument.</p> <pre><code>&lt;member&gt; = &lt;enum&gt;.&lt;member_name&gt;           # Returns a member.\n&lt;member&gt; = &lt;enum&gt;['&lt;member_name&gt;']        # Returns a member. Raises KeyError.\n&lt;member&gt; = &lt;enum&gt;(&lt;value&gt;)                # Returns a member. Raises ValueError.\n&lt;str&gt;    = &lt;member&gt;.name                  # Returns member's name.\n&lt;obj&gt;    = &lt;member&gt;.value                 # Returns member's value.\n</code></pre> <pre><code>&lt;list&gt;   = list(&lt;enum&gt;)                   # Returns enum's members.\n&lt;list&gt;   = [a.name for a in &lt;enum&gt;]       # Returns enum's member names.\n&lt;list&gt;   = [a.value for a in &lt;enum&gt;]      # Returns enum's member values.\n&lt;member&gt; = random.choice(list(&lt;enum&gt;))    # Returns a random member.\n</code></pre> <pre><code>def get_next_member(member):\n    members = list(type(member))\n    index = members.index(member) + 1\n    return members[index % len(members)]\n</code></pre>"},{"location":"python-cheatsheet/#inline_2","title":"Inline","text":"<pre><code>Cutlery = Enum('Cutlery', 'FORK KNIFE SPOON')\nCutlery = Enum('Cutlery', ['FORK', 'KNIFE', 'SPOON'])\nCutlery = Enum('Cutlery', {'FORK': 1, 'KNIFE': 2, 'SPOON': 3})\n</code></pre>"},{"location":"python-cheatsheet/#user-defined-functions-cannot-be-values-so-they-must-be-wrapped","title":"User-defined functions cannot be values, so they must be wrapped:","text":"<pre><code>from functools import partial\nLogicOp = Enum('LogicOp', {'AND': partial(lambda l, r: l and r),\n                           'OR':  partial(lambda l, r: l or r)})\n</code></pre>"},{"location":"python-cheatsheet/#exceptions","title":"Exceptions","text":"<pre><code>try:\n    &lt;code&gt;\nexcept &lt;exception&gt;:\n    &lt;code&gt;\n</code></pre>"},{"location":"python-cheatsheet/#complex-example","title":"Complex Example","text":"<p><pre><code>try:\n    &lt;code_1&gt;\nexcept &lt;exception_a&gt;:\n    &lt;code_2_a&gt;\nexcept &lt;exception_b&gt;:\n    &lt;code_2_b&gt;\nelse:\n    &lt;code_2_c&gt;\nfinally:\n    &lt;code_3&gt;\n</code></pre> * Code inside the <code>'else'</code> block will only be executed if <code>'try'</code> block had no exceptions. * Code inside the <code>'finally'</code> block will always be executed (unless a signal is received). * All variables that are initialized in executed blocks are also visible in all subsequent blocks, as well as outside the try/except clause (only function block delimits scope). * To catch signals use <code>'signal.signal(signal_number, &lt;func&gt;)'</code>.</p>"},{"location":"python-cheatsheet/#catching-exceptions","title":"Catching Exceptions","text":"<p><pre><code>except &lt;exception&gt;: ...\nexcept &lt;exception&gt; as &lt;name&gt;: ...\nexcept (&lt;exception&gt;, [...]): ...\nexcept (&lt;exception&gt;, [...]) as &lt;name&gt;: ...\n</code></pre> * Also catches subclasses of the exception. * Use <code>'traceback.print_exc()'</code> to print the error message to stderr. * Use <code>'print(&lt;name&gt;)'</code> to print just the cause of the exception (its arguments). * Use <code>'logging.exception(&lt;message&gt;)'</code> to log the passed message, followed by the full error message of the caught exception.</p>"},{"location":"python-cheatsheet/#raising-exceptions","title":"Raising Exceptions","text":"<pre><code>raise &lt;exception&gt;\nraise &lt;exception&gt;()\nraise &lt;exception&gt;(&lt;el&gt; [, ...])\n</code></pre>"},{"location":"python-cheatsheet/#re-raising-caught-exception","title":"Re-raising caught exception:","text":"<pre><code>except &lt;exception&gt; [as &lt;name&gt;]:\n    ...\n    raise\n</code></pre>"},{"location":"python-cheatsheet/#exception-object","title":"Exception Object","text":"<pre><code>arguments = &lt;name&gt;.args\nexc_type  = &lt;name&gt;.__class__\nfilename  = &lt;name&gt;.__traceback__.tb_frame.f_code.co_filename\nfunc_name = &lt;name&gt;.__traceback__.tb_frame.f_code.co_name\nline      = linecache.getline(filename, &lt;name&gt;.__traceback__.tb_lineno)\ntrace_str = ''.join(traceback.format_tb(&lt;name&gt;.__traceback__))\nerror_msg = ''.join(traceback.format_exception(type(&lt;name&gt;), &lt;name&gt;, &lt;name&gt;.__traceback__))\n</code></pre>"},{"location":"python-cheatsheet/#built-in-exceptions","title":"Built-in Exceptions","text":"<pre><code>BaseException\n +-- SystemExit                   # Raised by the sys.exit() function.\n +-- KeyboardInterrupt            # Raised when the user hits the interrupt key (ctrl-c).\n +-- Exception                    # User-defined exceptions should be derived from this class.\n      +-- ArithmeticError         # Base class for arithmetic errors such as ZeroDivisionError.\n      +-- AssertionError          # Raised by `assert &lt;exp&gt;` if expression returns false value.\n      +-- AttributeError          # Raised when object doesn't have requested attribute/method.\n      +-- EOFError                # Raised by input() when it hits an end-of-file condition.\n      +-- LookupError             # Base class for errors when a collection can't find an item.\n      |    +-- IndexError         # Raised when a sequence index is out of range.\n      |    +-- KeyError           # Raised when a dictionary key or set element is missing.\n      +-- MemoryError             # Out of memory. Could be too late to start deleting vars.\n      +-- NameError               # Raised when nonexistent name (variable/func/class) is used.\n      |    +-- UnboundLocalError  # Raised when local name is used before it's being defined.\n      +-- OSError                 # Errors such as FileExistsError/PermissionError (see #Open).\n      |    +-- ConnectionError    # Errors such as BrokenPipeError/ConnectionAbortedError.\n      +-- RuntimeError            # Raised by errors that don't fall into other categories.\n      |    +-- NotImplementedEr\u2026  # Can be raised by abstract methods or by unfinished code.\n      |    +-- RecursionError     # Raised when the maximum recursion depth is exceeded.\n      +-- StopIteration           # Raised by next() when run on an empty iterator.\n      +-- TypeError               # Raised when an argument is of the wrong type.\n      +-- ValueError              # When argument has the right type but inappropriate value.\n</code></pre>"},{"location":"python-cheatsheet/#collections-and-their-exceptions","title":"Collections and their exceptions:","text":"<pre><code>+-----------+------------+------------+------------+\n|           |    List    |    Set     |    Dict    |\n+-----------+------------+------------+------------+\n| getitem() | IndexError |            |  KeyError  |\n| pop()     | IndexError |  KeyError  |  KeyError  |\n| remove()  | ValueError |  KeyError  |            |\n| index()   | ValueError |            |            |\n+-----------+------------+------------+------------+\n</code></pre>"},{"location":"python-cheatsheet/#useful-built-in-exceptions","title":"Useful built-in exceptions:","text":"<pre><code>raise TypeError('Argument is of the wrong type!')\nraise ValueError('Argument has the right type but an inappropriate value!')\nraise RuntimeError('I am too lazy to define my own exception!')\n</code></pre>"},{"location":"python-cheatsheet/#user-defined-exceptions","title":"User-defined Exceptions","text":"<pre><code>class MyError(Exception): pass\nclass MyInputError(MyError): pass\n</code></pre>"},{"location":"python-cheatsheet/#exit","title":"Exit","text":"<p>Exits the interpreter by raising SystemExit exception. <pre><code>import sys\nsys.exit()                        # Exits with exit code 0 (success).\nsys.exit(&lt;el&gt;)                    # Prints to stderr and exits with 1.\nsys.exit(&lt;int&gt;)                   # Exits with the passed exit code.\n</code></pre></p>"},{"location":"python-cheatsheet/#print","title":"Print","text":"<p><pre><code>print(&lt;el_1&gt;, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n</code></pre> * Use <code>'file=sys.stderr'</code> for messages about errors. * Use <code>'flush=True'</code> to forcibly flush the stream.</p>"},{"location":"python-cheatsheet/#pretty-print","title":"Pretty Print","text":"<p><pre><code>from pprint import pprint\npprint(&lt;collection&gt;, width=80, depth=None, compact=False, sort_dicts=True)\n</code></pre> * Levels deeper than 'depth' get replaced by '...'.</p>"},{"location":"python-cheatsheet/#input","title":"Input","text":"<p>Reads a line from the user input or pipe if present.</p> <p><pre><code>&lt;str&gt; = input(prompt=None)\n</code></pre> * Trailing newline gets stripped. * Prompt string is printed to the standard output before reading input. * Raises EOFError when user hits EOF (ctrl-d/ctrl-z\u23ce) or input stream gets exhausted.</p>"},{"location":"python-cheatsheet/#command-line-arguments","title":"Command Line Arguments","text":"<pre><code>import sys\nscripts_path = sys.argv[0]\narguments    = sys.argv[1:]\n</code></pre>"},{"location":"python-cheatsheet/#argument-parser","title":"Argument Parser","text":"<pre><code>from argparse import ArgumentParser, FileType\np = ArgumentParser(description=&lt;str&gt;)\np.add_argument('-&lt;short_name&gt;', '--&lt;name&gt;', action='store_true')  # Flag.\np.add_argument('-&lt;short_name&gt;', '--&lt;name&gt;', type=&lt;type&gt;)          # Option.\np.add_argument('&lt;name&gt;', type=&lt;type&gt;, nargs=1)                    # First argument.\np.add_argument('&lt;name&gt;', type=&lt;type&gt;, nargs='+')                  # Remaining arguments.\np.add_argument('&lt;name&gt;', type=&lt;type&gt;, nargs='*')                  # Optional arguments.\nargs  = p.parse_args()                                            # Exits on error.\nvalue = args.&lt;name&gt;\n</code></pre> <ul> <li>Use <code>'help=&lt;str&gt;'</code> to set argument description that will be displayed in help message.</li> <li>Use <code>'default=&lt;el&gt;'</code> to set argument's default value.</li> <li>Use <code>'type=FileType(&lt;mode&gt;)'</code> for files. Accepts 'encoding', but 'newline' is None.</li> </ul>"},{"location":"python-cheatsheet/#open","title":"Open","text":"<p>Opens the file and returns a corresponding file object.</p> <p><pre><code>&lt;file&gt; = open(&lt;path&gt;, mode='r', encoding=None, newline=None)\n</code></pre> * <code>'encoding=None'</code> means that the default encoding is used, which is platform dependent. Best practice is to use <code>'encoding=\"utf-8\"'</code> whenever possible. * <code>'newline=None'</code> means all different end of line combinations are converted to '\\n' on read, while on write all '\\n' characters are converted to system's default line separator. * <code>'newline=\"\"'</code> means no conversions take place, but input is still broken into chunks by readline() and readlines() on every '\\n', '\\r' and '\\r\\n'.</p>"},{"location":"python-cheatsheet/#modes","title":"Modes","text":"<ul> <li><code>'r'</code>  - Read (default).</li> <li><code>'w'</code>  - Write (truncate).</li> <li><code>'x'</code>  - Write or fail if the file already exists.</li> <li><code>'a'</code>  - Append.</li> <li><code>'w+'</code> - Read and write (truncate).</li> <li><code>'r+'</code> - Read and write from the start.</li> <li><code>'a+'</code> - Read and write from the end.</li> <li><code>'b'</code>  - Binary mode (<code>'br'</code>, <code>'bw'</code>, <code>'bx'</code>, \u2026).</li> </ul>"},{"location":"python-cheatsheet/#exceptions_1","title":"Exceptions","text":"<ul> <li><code>'FileNotFoundError'</code> can be raised when reading with <code>'r'</code> or <code>'r+'</code>.</li> <li><code>'FileExistsError'</code> can be raised when writing with <code>'x'</code>.</li> <li><code>'IsADirectoryError'</code> and <code>'PermissionError'</code> can be raised by any.</li> <li><code>'OSError'</code> is the parent class of all listed exceptions.</li> </ul>"},{"location":"python-cheatsheet/#file-object","title":"File Object","text":"<pre><code>&lt;file&gt;.seek(0)                      # Moves to the start of the file.\n&lt;file&gt;.seek(offset)                 # Moves 'offset' chars/bytes from the start.\n&lt;file&gt;.seek(0, 2)                   # Moves to the end of the file.\n&lt;bin_file&gt;.seek(\u00b1offset, &lt;anchor&gt;)  # Anchor: 0 start, 1 current position, 2 end.\n</code></pre> <pre><code>&lt;str/bytes&gt; = &lt;file&gt;.read(size=-1)  # Reads 'size' chars/bytes or until EOF.\n&lt;str/bytes&gt; = &lt;file&gt;.readline()     # Returns a line or empty string/bytes on EOF.\n&lt;list&gt;      = &lt;file&gt;.readlines()    # Returns a list of remaining lines.\n&lt;str/bytes&gt; = next(&lt;file&gt;)          # Returns a line using buffer. Do not mix.\n</code></pre> <p><pre><code>&lt;file&gt;.write(&lt;str/bytes&gt;)           # Writes a string or bytes object.\n&lt;file&gt;.writelines(&lt;collection&gt;)     # Writes a coll. of strings or bytes objects.\n&lt;file&gt;.flush()                      # Flushes write buffer. Runs every 4096/8192 B.\n&lt;file&gt;.close()                      # Closes the file after flushing.\n</code></pre> * Methods do not add or strip trailing newlines, not even writelines().</p>"},{"location":"python-cheatsheet/#read-text-from-file","title":"Read Text from File","text":"<pre><code>def read_file(filename):\n    with open(filename, encoding='utf-8') as file:\n        return file.readlines()\n</code></pre>"},{"location":"python-cheatsheet/#write-text-to-file","title":"Write Text to File","text":"<pre><code>def write_to_file(filename, text):\n    with open(filename, 'w', encoding='utf-8') as file:\n        file.write(text)\n</code></pre>"},{"location":"python-cheatsheet/#paths","title":"Paths","text":"<pre><code>import os, glob\nfrom pathlib import Path\n</code></pre> <pre><code>&lt;str&gt;  = os.getcwd()                # Returns the current working directory.\n&lt;str&gt;  = os.path.join(&lt;path&gt;, ...)  # Joins two or more pathname components.\n&lt;str&gt;  = os.path.realpath(&lt;path&gt;)   # Resolves symlinks and calls path.abspath().\n</code></pre> <pre><code>&lt;str&gt;  = os.path.basename(&lt;path&gt;)   # Returns final component of the path.\n&lt;str&gt;  = os.path.dirname(&lt;path&gt;)    # Returns path without the final component.\n&lt;tup.&gt; = os.path.splitext(&lt;path&gt;)   # Splits on last period of the final component.\n</code></pre> <pre><code>&lt;list&gt; = os.listdir(path='.')       # Returns filenames located at the path.\n&lt;list&gt; = glob.glob('&lt;pattern&gt;')     # Returns paths matching the wildcard pattern.\n</code></pre> <pre><code>&lt;bool&gt; = os.path.exists(&lt;path&gt;)     # Or: &lt;Path&gt;.exists()\n&lt;bool&gt; = os.path.isfile(&lt;path&gt;)     # Or: &lt;DirEntry/Path&gt;.is_file()\n&lt;bool&gt; = os.path.isdir(&lt;path&gt;)      # Or: &lt;DirEntry/Path&gt;.is_dir()\n</code></pre> <pre><code>&lt;stat&gt; = os.stat(&lt;path&gt;)            # Or: &lt;DirEntry/Path&gt;.stat()\n&lt;real&gt; = &lt;stat&gt;.st_mtime/st_size/\u2026  # Modification time, size in bytes, ...\n</code></pre>"},{"location":"python-cheatsheet/#direntry","title":"DirEntry","text":"<p>Unlike listdir(), scandir() returns DirEntry objects that cache isfile, isdir and on Windows also stat information, thus significantly increasing the performance of code that requires it.</p> <pre><code>&lt;iter&gt; = os.scandir(path='.')       # Returns DirEntry objects located at the path.\n&lt;str&gt;  = &lt;DirEntry&gt;.path            # Returns the whole path as a string.\n&lt;str&gt;  = &lt;DirEntry&gt;.name            # Returns final component as a string.\n&lt;file&gt; = open(&lt;DirEntry&gt;)           # Opens the file and returns a file object.\n</code></pre>"},{"location":"python-cheatsheet/#path-object","title":"Path Object","text":"<pre><code>&lt;Path&gt; = Path(&lt;path&gt; [, ...])       # Accepts strings, Paths and DirEntry objects.\n&lt;Path&gt; = &lt;path&gt; / &lt;path&gt; [/ ...]    # First or second path must be a Path object.\n&lt;Path&gt; = &lt;Path&gt;.resolve()           # Returns absolute path with resolved symlinks.\n</code></pre> <pre><code>&lt;Path&gt; = Path()                     # Returns relative cwd. Also Path('.').\n&lt;Path&gt; = Path.cwd()                 # Returns absolute cwd. Also Path().resolve().\n&lt;Path&gt; = Path.home()                # Returns user's home directory (absolute).\n&lt;Path&gt; = Path(__file__).resolve()   # Returns script's path if cwd wasn't changed.\n</code></pre> <pre><code>&lt;Path&gt; = &lt;Path&gt;.parent              # Returns Path without the final component.\n&lt;str&gt;  = &lt;Path&gt;.name                # Returns final component as a string.\n&lt;str&gt;  = &lt;Path&gt;.stem                # Returns final component without extension.\n&lt;str&gt;  = &lt;Path&gt;.suffix              # Returns final component's extension.\n&lt;tup.&gt; = &lt;Path&gt;.parts               # Returns all components as strings.\n</code></pre> <pre><code>&lt;iter&gt; = &lt;Path&gt;.iterdir()           # Returns directory contents as Path objects.\n&lt;iter&gt; = &lt;Path&gt;.glob('&lt;pattern&gt;')   # Returns Paths matching the wildcard pattern.\n</code></pre> <pre><code>&lt;str&gt;  = str(&lt;Path&gt;)                # Returns path as a string.\n&lt;file&gt; = open(&lt;Path&gt;)               # Also &lt;Path&gt;.read/write_text/bytes().\n</code></pre>"},{"location":"python-cheatsheet/#os-commands","title":"OS Commands","text":"<pre><code>import os, shutil, subprocess\n</code></pre> <pre><code>os.chdir(&lt;path&gt;)                    # Changes the current working directory.\nos.mkdir(&lt;path&gt;, mode=0o777)        # Creates a directory. Permissions are in octal.\nos.makedirs(&lt;path&gt;, mode=0o777)     # Creates all path's dirs. Also `exist_ok=False`.\n</code></pre> <pre><code>shutil.copy(from, to)               # Copies the file. 'to' can exist or be a dir.\nshutil.copy2(from, to)              # Also copies creation and modification time.\nshutil.copytree(from, to)           # Copies the directory. 'to' must not exist.\n</code></pre> <pre><code>os.rename(from, to)                 # Renames/moves the file or directory.\nos.replace(from, to)                # Same, but overwrites file 'to' even on Windows.\nshutil.move(from, to)               # Rename() that moves into 'to' if it's a dir.\n</code></pre> <p><pre><code>os.remove(&lt;path&gt;)                   # Deletes the file.\nos.rmdir(&lt;path&gt;)                    # Deletes the empty directory.\nshutil.rmtree(&lt;path&gt;)               # Deletes the directory.\n</code></pre> * Paths can be either strings, Paths or DirEntry objects. * Functions report OS related errors by raising either OSError or one of its subclasses.</p>"},{"location":"python-cheatsheet/#shell-commands","title":"Shell Commands","text":"<pre><code>&lt;pipe&gt; = os.popen('&lt;command&gt;')      # Executes command in sh/cmd. Returns its stdout pipe.\n&lt;str&gt;  = &lt;pipe&gt;.read(size=-1)       # Reads 'size' chars or until EOF. Also readline/s().\n&lt;int&gt;  = &lt;pipe&gt;.close()             # Closes the pipe. Returns None on success (returncode 0).\n</code></pre>"},{"location":"python-cheatsheet/#sends-1-1-to-the-basic-calculator-and-captures-its-output","title":"Sends '1 + 1' to the basic calculator and captures its output:","text":"<pre><code>&gt;&gt;&gt; subprocess.run('bc', input='1 + 1\\n', capture_output=True, text=True)\nCompletedProcess(args='bc', returncode=0, stdout='2\\n', stderr='')\n</code></pre>"},{"location":"python-cheatsheet/#sends-testin-to-the-basic-calculator-running-in-standard-mode-and-saves-its-output-to-testout","title":"Sends test.in to the basic calculator running in standard mode and saves its output to test.out:","text":"<pre><code>&gt;&gt;&gt; from shlex import split\n&gt;&gt;&gt; os.popen('echo 1 + 1 &gt; test.in')\n&gt;&gt;&gt; subprocess.run(split('bc -s'), stdin=open('test.in'), stdout=open('test.out', 'w'))\nCompletedProcess(args=['bc', '-s'], returncode=0)\n&gt;&gt;&gt; open('test.out').read()\n'2\\n'\n</code></pre>"},{"location":"python-cheatsheet/#json","title":"JSON","text":"<p>Text file format for storing collections of strings and numbers.</p> <pre><code>import json\n&lt;str&gt;    = json.dumps(&lt;object&gt;)     # Converts object to JSON string.\n&lt;object&gt; = json.loads(&lt;str&gt;)        # Converts JSON string to object.\n</code></pre>"},{"location":"python-cheatsheet/#read-object-from-json-file","title":"Read Object from JSON File","text":"<pre><code>def read_json_file(filename):\n    with open(filename, encoding='utf-8') as file:\n        return json.load(file)\n</code></pre>"},{"location":"python-cheatsheet/#write-object-to-json-file","title":"Write Object to JSON File","text":"<pre><code>def write_to_json_file(filename, an_object):\n    with open(filename, 'w', encoding='utf-8') as file:\n        json.dump(an_object, file, ensure_ascii=False, indent=2)\n</code></pre>"},{"location":"python-cheatsheet/#pickle","title":"Pickle","text":"<p>Binary file format for storing Python objects.</p> <pre><code>import pickle\n&lt;bytes&gt;  = pickle.dumps(&lt;object&gt;)   # Converts object to bytes object.\n&lt;object&gt; = pickle.loads(&lt;bytes&gt;)    # Converts bytes object to object.\n</code></pre>"},{"location":"python-cheatsheet/#read-object-from-file","title":"Read Object from File","text":"<pre><code>def read_pickle_file(filename):\n    with open(filename, 'rb') as file:\n        return pickle.load(file)\n</code></pre>"},{"location":"python-cheatsheet/#write-object-to-file","title":"Write Object to File","text":"<pre><code>def write_to_pickle_file(filename, an_object):\n    with open(filename, 'wb') as file:\n        pickle.dump(an_object, file)\n</code></pre>"},{"location":"python-cheatsheet/#csv","title":"CSV","text":"<p>Text file format for storing spreadsheets.</p> <pre><code>import csv\n</code></pre>"},{"location":"python-cheatsheet/#read","title":"Read","text":"<p><pre><code>&lt;reader&gt; = csv.reader(&lt;file&gt;)       # Also: `dialect='excel', delimiter=','`.\n&lt;list&gt;   = next(&lt;reader&gt;)           # Returns next row as a list of strings.\n&lt;list&gt;   = list(&lt;reader&gt;)           # Returns a list of remaining rows.\n</code></pre> * File must be opened with a <code>'newline=\"\"'</code> argument, or newlines embedded inside quoted fields will not be interpreted correctly! * To print the spreadsheet to the console use Tabulate library. * For XML and binary Excel files (xlsx, xlsm and xlsb) use Pandas library. * Reader accepts any iterator of strings, not just files.</p>"},{"location":"python-cheatsheet/#write","title":"Write","text":"<p><pre><code>&lt;writer&gt; = csv.writer(&lt;file&gt;)       # Also: `dialect='excel', delimiter=','`.\n&lt;writer&gt;.writerow(&lt;collection&gt;)     # Encodes objects using `str(&lt;el&gt;)`.\n&lt;writer&gt;.writerows(&lt;coll_of_coll&gt;)  # Appends multiple rows.\n</code></pre> * File must be opened with a <code>'newline=\"\"'</code> argument, or '\\r' will be added in front of every '\\n' on platforms that use '\\r\\n' line endings! * Open existing file with <code>'mode=\"w\"'</code> to overwrite it or <code>'mode=\"a\"'</code> to append to it.</p>"},{"location":"python-cheatsheet/#parameters","title":"Parameters","text":"<ul> <li><code>'dialect'</code> - Master parameter that sets the default values. String or a 'csv.Dialect' object.</li> <li><code>'delimiter'</code> - A one-character string used to separate fields.</li> <li><code>'quotechar'</code> - Character for quoting fields that contain special characters.</li> <li><code>'doublequote'</code> - Whether quotechars inside fields are/get doubled or escaped.</li> <li><code>'skipinitialspace'</code> - Is space character at the start of the field stripped by the reader.</li> <li><code>'lineterminator'</code> - How writer terminates rows. Reader is hardcoded to '\\n', '\\r', '\\r\\n'.</li> <li><code>'quoting'</code> - 0: As necessary, 1: All, 2: All but numbers which are read as floats, 3: None.</li> <li><code>'escapechar'</code> - Character for escaping quotechars if 'doublequote' is False.</li> </ul>"},{"location":"python-cheatsheet/#dialects","title":"Dialects","text":"<pre><code>+------------------+--------------+--------------+--------------+\n|                  |     excel    |   excel-tab  |     unix     |\n+------------------+--------------+--------------+--------------+\n| delimiter        |       ','    |      '\\t'    |       ','    |\n| quotechar        |       '\"'    |       '\"'    |       '\"'    |\n| doublequote      |      True    |      True    |      True    |\n| skipinitialspace |     False    |     False    |     False    |\n| lineterminator   |    '\\r\\n'    |    '\\r\\n'    |      '\\n'    |\n| quoting          |         0    |         0    |         1    |\n| escapechar       |      None    |      None    |      None    |\n+------------------+--------------+--------------+--------------+\n</code></pre>"},{"location":"python-cheatsheet/#read-rows-from-csv-file","title":"Read Rows from CSV File","text":"<pre><code>def read_csv_file(filename, dialect='excel', **params):\n    with open(filename, encoding='utf-8', newline='') as file:\n        return list(csv.reader(file, dialect, **params))\n</code></pre>"},{"location":"python-cheatsheet/#write-rows-to-csv-file","title":"Write Rows to CSV File","text":"<pre><code>def write_to_csv_file(filename, rows, mode='w', dialect='excel', **params):\n    with open(filename, mode, encoding='utf-8', newline='') as file:\n        writer = csv.writer(file, dialect, **params)\n        writer.writerows(rows)\n</code></pre>"},{"location":"python-cheatsheet/#sqlite","title":"SQLite","text":"<p>A server-less database engine that stores each database into a separate file.</p> <pre><code>import sqlite3\n&lt;conn&gt; = sqlite3.connect(&lt;path&gt;)                # Opens existing or new file. Also ':memory:'.\n&lt;conn&gt;.close()                                  # Closes the connection.\n</code></pre>"},{"location":"python-cheatsheet/#read_1","title":"Read","text":"<pre><code>&lt;cursor&gt; = &lt;conn&gt;.execute('&lt;query&gt;')            # Can raise a subclass of sqlite3.Error.\n&lt;tuple&gt;  = &lt;cursor&gt;.fetchone()                  # Returns next row. Also next(&lt;cursor&gt;).\n&lt;list&gt;   = &lt;cursor&gt;.fetchall()                  # Returns remaining rows. Also list(&lt;cursor&gt;).\n</code></pre>"},{"location":"python-cheatsheet/#write_1","title":"Write","text":"<pre><code>&lt;conn&gt;.execute('&lt;query&gt;')                       # Can raise a subclass of sqlite3.Error.\n&lt;conn&gt;.commit()                                 # Saves all changes since the last commit.\n&lt;conn&gt;.rollback()                               # Discards all changes since the last commit.\n</code></pre>"},{"location":"python-cheatsheet/#or","title":"Or:","text":"<pre><code>with &lt;conn&gt;:                                    # Exits the block with commit() or rollback(),\n    &lt;conn&gt;.execute('&lt;query&gt;')                   # depending on whether any exception occurred.\n</code></pre>"},{"location":"python-cheatsheet/#placeholders","title":"Placeholders","text":"<p><pre><code>&lt;conn&gt;.execute('&lt;query&gt;', &lt;list/tuple&gt;)         # Replaces '?'s in query with values.\n&lt;conn&gt;.execute('&lt;query&gt;', &lt;dict/namedtuple&gt;)    # Replaces ':&lt;key&gt;'s with values.\n&lt;conn&gt;.executemany('&lt;query&gt;', &lt;coll_of_above&gt;)  # Runs execute() multiple times.\n</code></pre> * Passed values can be of type str, int, float, bytes, None, bool, datetime.date or datetime.datetime. * Bools will be stored and returned as ints and dates as ISO formatted strings.</p>"},{"location":"python-cheatsheet/#example_1","title":"Example","text":"<p>Values are not actually saved in this example because <code>'conn.commit()'</code> is omitted! <pre><code>&gt;&gt;&gt; conn = sqlite3.connect('test.db')\n&gt;&gt;&gt; conn.execute('CREATE TABLE person (person_id INTEGER PRIMARY KEY, name, height)')\n&gt;&gt;&gt; conn.execute('INSERT INTO person VALUES (NULL, ?, ?)', ('Jean-Luc', 187)).lastrowid\n1\n&gt;&gt;&gt; conn.execute('SELECT * FROM person').fetchall()\n[(1, 'Jean-Luc', 187)]\n</code></pre></p>"},{"location":"python-cheatsheet/#sqlalchemy","title":"SqlAlchemy","text":"<pre><code># $ pip3 install sqlalchemy\nfrom sqlalchemy import create_engine, text\n&lt;engine&gt; = create_engine('&lt;url&gt;')               # Url: 'dialect://user:password@host/dbname'.\n&lt;conn&gt;   = &lt;engine&gt;.connect()                   # Creates a connection. Also &lt;conn&gt;.close().\n&lt;cursor&gt; = &lt;conn&gt;.execute(text('&lt;query&gt;'), \u2026)   # Replaces ':&lt;key&gt;'s with keyword arguments.\nwith &lt;conn&gt;.begin(): ...                        # Exits the block with commit or rollback.\n</code></pre> <pre><code>+------------+--------------+----------+----------------------------------+\n| Dialect    | pip3 install | import   |           Dependencies           |\n+------------+--------------+----------+----------------------------------+\n| mysql      | mysqlclient  | MySQLdb  | www.pypi.org/project/mysqlclient |\n| postgresql | psycopg2     | psycopg2 | www.pypi.org/project/psycopg2    |\n| mssql      | pyodbc       | pyodbc   | www.pypi.org/project/pyodbc      |\n| oracle     | oracledb     | oracledb | www.pypi.org/project/oracledb    |\n+------------+--------------+----------+----------------------------------+\n</code></pre>"},{"location":"python-cheatsheet/#bytes","title":"Bytes","text":"<p>Bytes object is an immutable sequence of single bytes. Mutable version is called bytearray.</p> <pre><code>&lt;bytes&gt; = b'&lt;str&gt;'                          # Only accepts ASCII characters and \\x00-\\xff.\n&lt;int&gt;   = &lt;bytes&gt;[&lt;index&gt;]                  # Returns an int in range from 0 to 255.\n&lt;bytes&gt; = &lt;bytes&gt;[&lt;slice&gt;]                  # Returns bytes even if it has only one element.\n&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_bytes&gt;)     # Joins elements using bytes as a separator.\n</code></pre>"},{"location":"python-cheatsheet/#encode_1","title":"Encode","text":"<pre><code>&lt;bytes&gt; = bytes(&lt;coll_of_ints&gt;)             # Ints must be in range from 0 to 255.\n&lt;bytes&gt; = bytes(&lt;str&gt;, 'utf-8')             # Or: &lt;str&gt;.encode('utf-8')\n&lt;bytes&gt; = &lt;int&gt;.to_bytes(n_bytes, \u2026)        # `byteorder='big/little', signed=False`.\n&lt;bytes&gt; = bytes.fromhex('&lt;hex&gt;')            # Hex pairs can be separated by whitespaces.\n</code></pre>"},{"location":"python-cheatsheet/#decode_1","title":"Decode","text":"<pre><code>&lt;list&gt;  = list(&lt;bytes&gt;)                     # Returns ints in range from 0 to 255.\n&lt;str&gt;   = str(&lt;bytes&gt;, 'utf-8')             # Or: &lt;bytes&gt;.decode('utf-8')\n&lt;int&gt;   = int.from_bytes(&lt;bytes&gt;, \u2026)        # `byteorder='big/little', signed=False`.\n'&lt;hex&gt;' = &lt;bytes&gt;.hex()                     # Returns hex pairs. Accepts `sep=&lt;str&gt;`.\n</code></pre>"},{"location":"python-cheatsheet/#read-bytes-from-file","title":"Read Bytes from File","text":"<pre><code>def read_bytes(filename):\n    with open(filename, 'rb') as file:\n        return file.read()\n</code></pre>"},{"location":"python-cheatsheet/#write-bytes-to-file","title":"Write Bytes to File","text":"<pre><code>def write_bytes(filename, bytes_obj):\n    with open(filename, 'wb') as file:\n        file.write(bytes_obj)\n</code></pre>"},{"location":"python-cheatsheet/#struct","title":"Struct","text":"<ul> <li>Module that performs conversions between a sequence of numbers and a bytes object.</li> <li>System\u2019s type sizes, byte order, and alignment rules are used by default.</li> </ul> <pre><code>from struct import pack, unpack\n&lt;bytes&gt; = pack('&lt;format&gt;', &lt;el_1&gt; [, ...])  # Packages arguments or raises struct.error.\n&lt;tuple&gt; = unpack('&lt;format&gt;', &lt;bytes&gt;)       # Use iter_unpack() for iterator of tuples.\n</code></pre> <pre><code>&gt;&gt;&gt; pack('&gt;hhl', 1, 2, 3)\nb'\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x03'\n&gt;&gt;&gt; unpack('&gt;hhl', b'\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x03')\n(1, 2, 3)\n</code></pre>"},{"location":"python-cheatsheet/#format_2","title":"Format","text":""},{"location":"python-cheatsheet/#for-standard-type-sizes-and-manual-alignment-padding-start-format-string-with","title":"For standard type sizes and manual alignment (padding) start format string with:","text":"<ul> <li><code>'='</code> - System's byte order (usually little-endian).</li> <li><code>'&lt;'</code> - Little-endian.</li> <li><code>'&gt;'</code> - Big-endian (also <code>'!'</code>).</li> </ul>"},{"location":"python-cheatsheet/#besides-numbers-pack-and-unpack-also-support-bytes-objects-as-part-of-the-sequence","title":"Besides numbers, pack() and unpack() also support bytes objects as part of the sequence:","text":"<ul> <li><code>'c'</code> - A bytes object with a single element. For pad byte use <code>'x'</code>.</li> <li><code>'&lt;n&gt;s'</code> - A bytes object with n elements.</li> </ul>"},{"location":"python-cheatsheet/#integer-types-use-a-capital-letter-for-unsigned-type-minimum-and-standard-sizes-are-in-brackets","title":"Integer types. Use a capital letter for unsigned type. Minimum and standard sizes are in brackets:","text":"<ul> <li><code>'b'</code> - char (1/1)</li> <li><code>'h'</code> - short (2/2)</li> <li><code>'i'</code> - int (2/4)</li> <li><code>'l'</code> - long (4/4)</li> <li><code>'q'</code> - long long (8/8)</li> </ul>"},{"location":"python-cheatsheet/#floating-point-types-struct-always-uses-standard-sizes","title":"Floating point types (struct always uses standard sizes):","text":"<ul> <li><code>'f'</code> - float (4/4)</li> <li><code>'d'</code> - double (8/8)</li> </ul>"},{"location":"python-cheatsheet/#array","title":"Array","text":"<p>List that can only hold numbers of a predefined type. Available types and their minimum sizes in bytes are listed above. Type sizes and byte order are always determined by the system, however bytes of each element can be swapped with byteswap() method.</p> <pre><code>from array import array\n&lt;array&gt; = array('&lt;typecode&gt;', &lt;collection&gt;)    # Array from collection of numbers.\n&lt;array&gt; = array('&lt;typecode&gt;', &lt;bytes&gt;)         # Array from bytes object.\n&lt;array&gt; = array('&lt;typecode&gt;', &lt;array&gt;)         # Treats array as a sequence of numbers.\n&lt;array&gt;.fromfile(&lt;file&gt;, n_items)              # Appends items. Raises EOFError on end.\n&lt;bytes&gt; = bytes(&lt;array&gt;)                       # Or: &lt;array&gt;.tobytes()\n&lt;file&gt;.write(&lt;array&gt;)                          # Writes array to the binary file.\n</code></pre>"},{"location":"python-cheatsheet/#memory-view","title":"Memory View","text":"<ul> <li>A sequence object that points to the memory of another bytes-like object.</li> <li>Each element can reference a single or multiple consecutive bytes, depending on format.</li> <li>Order and number of elements can be changed with slicing.</li> <li>Casting only works between char and other types and uses system's sizes.</li> <li>Byte order is always determined by the system.</li> </ul> <pre><code>&lt;mview&gt; = memoryview(&lt;bytes/bytearray/array&gt;)  # Immutable if bytes, else mutable.\n&lt;real&gt;  = &lt;mview&gt;[&lt;index&gt;]                     # Returns an int or a float.\n&lt;mview&gt; = &lt;mview&gt;[&lt;slice&gt;]                     # Mview with rearranged elements.\n&lt;mview&gt; = &lt;mview&gt;.cast('&lt;typecode&gt;')           # Casts memoryview to the new format.\n&lt;mview&gt;.release()                              # Releases the object's memory buffer.\n</code></pre> <pre><code>&lt;bytes&gt; = bytes(&lt;mview&gt;)                       # Returns a new bytes object.\n&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_mviews&gt;)       # Joins mviews using bytes object as sep.\n&lt;array&gt; = array('&lt;typecode&gt;', &lt;mview&gt;)         # Treats mview as a sequence of numbers.\n&lt;file&gt;.write(&lt;mview&gt;)                          # Writes mview to the binary file.\n</code></pre> <pre><code>&lt;list&gt;  = list(&lt;mview&gt;)                        # Returns a list of ints or floats.\n&lt;str&gt;   = str(&lt;mview&gt;, 'utf-8')                # Treats mview as a bytes object.\n&lt;int&gt;   = int.from_bytes(&lt;mview&gt;, \u2026)           # `byteorder='big/little', signed=False`.\n'&lt;hex&gt;' = &lt;mview&gt;.hex()                        # Treats mview as a bytes object.\n</code></pre>"},{"location":"python-cheatsheet/#deque","title":"Deque","text":"<p>A thread-safe list with efficient appends and pops from either side. Pronounced \"deck\".</p> <pre><code>from collections import deque\n&lt;deque&gt; = deque(&lt;collection&gt;)                  # Also `maxlen=None`.\n&lt;deque&gt;.appendleft(&lt;el&gt;)                       # Opposite element is dropped if full.\n&lt;deque&gt;.extendleft(&lt;collection&gt;)               # Collection gets reversed.\n&lt;el&gt; = &lt;deque&gt;.popleft()                       # Raises IndexError if empty.\n&lt;deque&gt;.rotate(n=1)                            # Rotates elements to the right.\n</code></pre>"},{"location":"python-cheatsheet/#threading","title":"Threading","text":"<p>CPython interpreter can only run a single thread at a time. Using multiple threads won't result in a faster execution, unless at least one of the threads contains an I/O operation. <pre><code>from threading import Thread, Timer, RLock, Semaphore, Event, Barrier\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n</code></pre></p>"},{"location":"python-cheatsheet/#thread","title":"Thread","text":"<p><pre><code>&lt;Thread&gt; = Thread(target=&lt;function&gt;)           # Use `args=&lt;collection&gt;` to set the arguments.\n&lt;Thread&gt;.start()                               # Starts the thread.\n&lt;bool&gt; = &lt;Thread&gt;.is_alive()                   # Checks if the thread has finished executing.\n&lt;Thread&gt;.join()                                # Waits for the thread to finish.\n</code></pre> * Use <code>'kwargs=&lt;dict&gt;'</code> to pass keyword arguments to the function. * Use <code>'daemon=True'</code>, or the program will not be able to exit while the thread is alive. * To delay thread execution use <code>'Timer(seconds, &lt;func&gt;)'</code> instead of Thread().</p>"},{"location":"python-cheatsheet/#lock","title":"Lock","text":"<pre><code>&lt;lock&gt; = RLock()                               # Lock that can only be released by acquirer.\n&lt;lock&gt;.acquire()                               # Waits for the lock to be available.\n&lt;lock&gt;.release()                               # Makes the lock available again.\n</code></pre>"},{"location":"python-cheatsheet/#or_1","title":"Or:","text":"<pre><code>with &lt;lock&gt;:                                   # Enters the block by calling acquire() and\n    ...                                        # exits it with release(), even on error.\n</code></pre>"},{"location":"python-cheatsheet/#semaphore-event-barrier","title":"Semaphore, Event, Barrier","text":"<pre><code>&lt;Semaphore&gt; = Semaphore(value=1)               # Lock that can be acquired by 'value' threads.\n&lt;Event&gt;     = Event()                          # Method wait() blocks until set() is called.\n&lt;Barrier&gt;   = Barrier(n_times)                 # Wait() blocks until it's called n_times.\n</code></pre>"},{"location":"python-cheatsheet/#queue","title":"Queue","text":"<pre><code>&lt;Queue&gt; = queue.Queue(maxsize=0)               # A thread-safe first-in-first-out queue.\n&lt;Queue&gt;.put(&lt;el&gt;)                              # Blocks until queue stops being full.\n&lt;Queue&gt;.put_nowait(&lt;el&gt;)                       # Raises queue.Full exception if full.\n&lt;el&gt; = &lt;Queue&gt;.get()                           # Blocks until queue stops being empty.\n&lt;el&gt; = &lt;Queue&gt;.get_nowait()                    # Raises queue.Empty exception if empty.\n</code></pre>"},{"location":"python-cheatsheet/#thread-pool-executor","title":"Thread Pool Executor","text":"<pre><code>&lt;Exec&gt; = ThreadPoolExecutor(max_workers=None)  # Or: `with ThreadPoolExecutor() as &lt;name&gt;: ...`\n&lt;iter&gt; = &lt;Exec&gt;.map(&lt;func&gt;, &lt;args_1&gt;, ...)     # Multithreaded and non-lazy map(). Keeps order.\n&lt;Futr&gt; = &lt;Exec&gt;.submit(&lt;func&gt;, &lt;arg_1&gt;, ...)   # Creates a thread and returns its Future obj.\n&lt;Exec&gt;.shutdown()                              # Blocks until all threads finish executing.\n</code></pre> <p><pre><code>&lt;bool&gt; = &lt;Future&gt;.done()                       # Checks if the thread has finished executing.\n&lt;obj&gt;  = &lt;Future&gt;.result(timeout=None)         # Waits for thread to finish and returns result.\n&lt;bool&gt; = &lt;Future&gt;.cancel()                     # Cancels or returns False if running/finished.\n&lt;iter&gt; = as_completed(&lt;coll_of_Futures&gt;)       # Next() waits for next completed Future.\n</code></pre> * Map() and as_completed() also accept 'timeout' argument that causes TimeoutError if result isn't available in 'timeout' seconds after next() is called. * Exceptions that happen inside threads are raised when next() is called on map's iterator or when result() is called on a Future. Its exception() method returns exception or None. * ProcessPoolExecutor provides true parallelism, but everything sent to/from workers must be pickable. Queues must be sent using executor's 'initargs' and 'initializer' parameters.</p>"},{"location":"python-cheatsheet/#operator","title":"Operator","text":"<p>Module of functions that provide the functionality of operators. Functions are ordered by operator precedence, starting with least binding. <pre><code>import operator as op\n&lt;bool&gt; = op.not_(&lt;obj&gt;)                                         # or, and, not (or/and missing)\n&lt;bool&gt; = op.eq/ne/lt/le/gt/ge/contains/is_(&lt;obj&gt;, &lt;obj&gt;)        # ==, !=, &lt;, &lt;=, &gt;, &gt;=, in, is\n&lt;obj&gt;  = op.or_/xor/and_(&lt;int/set&gt;, &lt;int/set&gt;)                  # |, ^, &amp;\n&lt;int&gt;  = op.lshift/rshift(&lt;int&gt;, &lt;int&gt;)                         # &lt;&lt;, &gt;&gt;\n&lt;obj&gt;  = op.add/sub/mul/truediv/floordiv/mod(&lt;obj&gt;, &lt;obj&gt;)      # +, -, *, /, //, %\n&lt;num&gt;  = op.neg/invert(&lt;num&gt;)                                   # -, ~\n&lt;num&gt;  = op.pow(&lt;num&gt;, &lt;num&gt;)                                   # **\n&lt;func&gt; = op.itemgetter/attrgetter/methodcaller(&lt;obj&gt; [, ...])   # [index/key], .name, .name()\n</code></pre></p> <p><pre><code>elementwise_sum  = map(op.add, list_a, list_b)\nsorted_by_second = sorted(&lt;collection&gt;, key=op.itemgetter(1))\nsorted_by_both   = sorted(&lt;collection&gt;, key=op.itemgetter(1, 0))\nproduct_of_elems = functools.reduce(op.mul, &lt;collection&gt;)\nfirst_element    = op.methodcaller('pop', 0)(&lt;list&gt;)\n</code></pre> * Bitwise operators require objects to have or(), xor(), and(), lshift(), rshift() and invert() special methods, unlike logical operators that work on all types of objects. * Also: <code>'&lt;bool&gt; = &lt;bool&gt; &amp;|^ &lt;bool&gt;'</code> and <code>'&lt;int&gt; = &lt;bool&gt; &amp;|^ &lt;int&gt;'</code>.</p>"},{"location":"python-cheatsheet/#match-statement","title":"Match Statement","text":"<p>Executes the first block with matching pattern. Added in Python 3.10.</p> <pre><code>match &lt;object/expression&gt;:\n    case &lt;pattern&gt; [if &lt;condition&gt;]:\n        &lt;code&gt;\n    ...\n</code></pre>"},{"location":"python-cheatsheet/#patterns","title":"Patterns","text":"<p><pre><code>&lt;value_pattern&gt; = 1/'abc'/True/None/math.pi          # Matches the literal or a dotted name.\n&lt;class_pattern&gt; = &lt;type&gt;()                           # Matches any object of that type.\n&lt;wildcard_patt&gt; = _                                  # Matches any object.\n&lt;capture_patt&gt;  = &lt;name&gt;                             # Matches any object and binds it to name.\n&lt;or_pattern&gt;    = &lt;pattern&gt; | &lt;pattern&gt; [| ...]      # Matches any of the patterns.\n&lt;as_pattern&gt;    = &lt;pattern&gt; as &lt;name&gt;                # Binds the match to the name.\n&lt;sequence_patt&gt; = [&lt;pattern&gt;, ...]                   # Matches sequence with matching items.\n&lt;mapping_patt&gt;  = {&lt;value_pattern&gt;: &lt;pattern&gt;, ...}  # Matches dictionary with matching items.\n&lt;class_pattern&gt; = &lt;type&gt;(&lt;attr_name&gt;=&lt;patt&gt;, ...)    # Matches object with matching attributes.\n</code></pre> * Sequence pattern can also be written as a tuple. * Use <code>'*&lt;name&gt;'</code> and <code>'**&lt;name&gt;'</code> in sequence/mapping patterns to bind remaining items. * Sequence pattern must match all items, while mapping pattern does not. * Patterns can be surrounded with brackets to override precedence (<code>'|'</code> &gt; <code>'as'</code> &gt; <code>','</code>). * Built-in types allow a single positional pattern that is matched against the entire object. * All names that are bound in the matching case, as well as variables initialized in its block, are visible after the match statement.</p>"},{"location":"python-cheatsheet/#example_2","title":"Example","text":"<pre><code>&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; match Path('/home/gto/python-cheatsheet/README.md'):\n...     case Path(\n...         parts=['/', 'home', user, *_],\n...         stem=stem,\n...         suffix=('.md' | '.txt') as suffix\n...     ) if stem.lower() == 'readme':\n...         print(f'{stem}{suffix} is a readme file that belongs to user {user}.')\n'README.md is a readme file that belongs to user gto.'\n</code></pre>"},{"location":"python-cheatsheet/#logging","title":"Logging","text":"<pre><code>import logging\n</code></pre> <pre><code>logging.basicConfig(filename=&lt;path&gt;, level='DEBUG')  # Configures the root logger (see Setup).\nlogging.debug/info/warning/error/critical(&lt;str&gt;)     # Logs to the root logger.\n&lt;Logger&gt; = logging.getLogger(__name__)               # Logger named after the module.\n&lt;Logger&gt;.&lt;level&gt;(&lt;str&gt;)                              # Logs to the logger.\n&lt;Logger&gt;.exception(&lt;str&gt;)                            # Calls error() with caught exception.\n</code></pre>"},{"location":"python-cheatsheet/#setup","title":"Setup","text":"<pre><code>logging.basicConfig(\n    filename=None,                                   # Logs to console (stderr) by default.\n    format='%(levelname)s:%(name)s:%(message)s',     # Add '%(asctime)s' for local datetime.\n    level=logging.WARNING,                           # Drops messages with lower priority.\n    handlers=[logging.StreamHandler(sys.stderr)]     # Uses FileHandler if filename is set.\n)\n</code></pre> <p><pre><code>&lt;Formatter&gt; = logging.Formatter('&lt;format&gt;')          # Creates a Formatter.\n&lt;Handler&gt; = logging.FileHandler(&lt;path&gt;, mode='a')    # Creates a Handler. Also `encoding=None`.\n&lt;Handler&gt;.setFormatter(&lt;Formatter&gt;)                  # Adds Formatter to the Handler.\n&lt;Handler&gt;.setLevel(&lt;int/str&gt;)                        # Processes all messages by default.\n&lt;Logger&gt;.addHandler(&lt;Handler&gt;)                       # Adds Handler to the Logger.\n&lt;Logger&gt;.setLevel(&lt;int/str&gt;)                         # What is sent to its/ancestor's handlers.\n</code></pre> * Parent logger can be specified by naming the child logger <code>'&lt;parent&gt;.&lt;name&gt;'</code>. * If logger doesn't have a set level it inherits it from the first ancestor that does. * Formatter also accepts: pathname, filename, funcName, lineno, thread and process. * A <code>'handlers.RotatingFileHandler'</code> creates and deletes log files based on 'maxBytes' and 'backupCount' arguments.</p>"},{"location":"python-cheatsheet/#creates-a-logger-that-writes-all-messages-to-file-and-sends-them-to-the-roots-handler-that-prints-warnings-or-higher","title":"Creates a logger that writes all messages to file and sends them to the root's handler that prints warnings or higher:","text":"<pre><code>&gt;&gt;&gt; logger = logging.getLogger('my_module')\n&gt;&gt;&gt; handler = logging.FileHandler('test.log', encoding='utf-8')\n&gt;&gt;&gt; formatter = logging.Formatter('%(asctime)s %(levelname)s:%(name)s:%(message)s')\n&gt;&gt;&gt; handler.setFormatter(formatter)\n&gt;&gt;&gt; logger.addHandler(handler)\n&gt;&gt;&gt; logging.basicConfig(level='DEBUG')\n&gt;&gt;&gt; logging.root.handlers[0].setLevel('WARNING')\n&gt;&gt;&gt; logger.critical('Running out of disk space.')\nCRITICAL:my_module:Running out of disk space.\n&gt;&gt;&gt; print(open('test.log').read())\n2023-02-07 23:21:01,430 CRITICAL:my_module:Running out of disk space.\n</code></pre>"},{"location":"python-cheatsheet/#introspection","title":"Introspection","text":"<pre><code>&lt;list&gt; = dir()                             # Names of local variables, functions, classes, etc.\n&lt;dict&gt; = vars()                            # Dict of local variables, etc. Also locals().\n&lt;dict&gt; = globals()                         # Dict of global vars, etc. (incl. '__builtins__').\n</code></pre> <pre><code>&lt;list&gt; = dir(&lt;object&gt;)                     # Names of object's attributes (including methods).\n&lt;dict&gt; = vars(&lt;object&gt;)                    # Dict of writable attributes. Also &lt;obj&gt;.__dict__.\n&lt;bool&gt; = hasattr(&lt;object&gt;, '&lt;attr_name&gt;')  # Checks if getattr() raises an AttributeError.\nvalue  = getattr(&lt;object&gt;, '&lt;attr_name&gt;')  # Raises AttributeError if attribute is missing.\nsetattr(&lt;object&gt;, '&lt;attr_name&gt;', value)    # Only works on objects with '__dict__' attribute.\ndelattr(&lt;object&gt;, '&lt;attr_name&gt;')           # Same. Also `del &lt;object&gt;.&lt;attr_name&gt;`.\n</code></pre> <pre><code>&lt;Sig&gt;  = inspect.signature(&lt;function&gt;)     # Function's Signature object.\n&lt;dict&gt; = &lt;Sig&gt;.parameters                  # Dict of Parameter objects.\n&lt;memb&gt; = &lt;Param&gt;.kind                      # Member of ParameterKind enum.\n&lt;obj&gt;  = &lt;Param&gt;.default                   # Default value or Parameter.empty.\n&lt;type&gt; = &lt;Param&gt;.annotation                # Type or Parameter.empty.\n</code></pre>"},{"location":"python-cheatsheet/#coroutines","title":"Coroutines","text":"<ul> <li>Coroutines have a lot in common with threads, but unlike threads, they only give up control when they call another coroutine and they don\u2019t use as much memory.</li> <li>Coroutine definition starts with <code>'async'</code> and its call with <code>'await'</code>.</li> <li><code>'asyncio.run(&lt;coroutine&gt;)'</code> is the main entry point for asynchronous programs.</li> <li>Functions wait(), gather() and as_completed() start multiple coroutines at the same time.</li> <li>Asyncio module also provides its own Queue, Event, Lock and Semaphore classes.</li> </ul>"},{"location":"python-cheatsheet/#runs-a-terminal-game-where-you-control-an-asterisk-that-must-avoid-numbers","title":"Runs a terminal game where you control an asterisk that must avoid numbers:","text":"<p><pre><code>import asyncio, collections, curses, curses.textpad, enum, random, time\n\nP = collections.namedtuple('P', 'x y')         # Position\nD = enum.Enum('D', 'n e s w')                  # Direction\nW, H = 15, 7                                   # Width, Height\n\ndef main(screen):\n    curses.curs_set(0)                         # Makes cursor invisible.\n    screen.nodelay(True)                       # Makes getch() non-blocking.\n    asyncio.run(main_coroutine(screen))        # Starts running asyncio code.\n\nasync def main_coroutine(screen):\n    moves = asyncio.Queue()\n    state = {'*': P(0, 0), **{id_: P(W//2, H//2) for id_ in range(10)}}\n    ai    = [random_controller(id_, moves) for id_ in range(10)]\n    mvc   = [human_controller(screen, moves), model(moves, state), view(state, screen)]\n    tasks = [asyncio.create_task(cor) for cor in ai + mvc]\n    await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)\n\nasync def random_controller(id_, moves):\n    while True:\n        d = random.choice(list(D))\n        moves.put_nowait((id_, d))\n        await asyncio.sleep(random.triangular(0.01, 0.65))\n\nasync def human_controller(screen, moves):\n    while True:\n        key_mappings = {258: D.s, 259: D.n, 260: D.w, 261: D.e}\n        ch = screen.getch()\n        if d := key_mappings.get(ch):\n            moves.put_nowait(('*', d))\n        await asyncio.sleep(0.005)\n\nasync def model(moves, state):\n    while state['*'] not in (state[id_] for id_ in range(10)):\n        id_, d = await moves.get()\n        x, y   = state[id_]\n        deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}\n        dx, dy = deltas[d]\n        state[id_] = P((x + dx) % W, (y + dy) % H)\n\nasync def view(state, screen):\n    offset = P(curses.COLS//2 - W//2, curses.LINES//2 - H//2)\n    while True:\n        screen.erase()\n        curses.textpad.rectangle(screen, offset.y-1, offset.x-1, offset.y+H, offset.x+W)\n        for id_, p in state.items():\n            screen.addstr(\n                offset.y + (p.y - state['*'].y + H//2) % H,\n                offset.x + (p.x - state['*'].x + W//2) % W,\n                str(id_)\n            )\n        screen.refresh()\n        await asyncio.sleep(0.005)\n\nif __name__ == '__main__':\n    start_time = time.perf_counter()\n    curses.wrapper(main)\n    print(f'You survived {time.perf_counter() - start_time:.2f} seconds.')\n</code></pre> </p>"},{"location":"python-cheatsheet/#libraries","title":"Libraries","text":""},{"location":"python-cheatsheet/#progress-bar","title":"Progress Bar","text":"<pre><code># $ pip3 install tqdm\n&gt;&gt;&gt; import tqdm, time\n&gt;&gt;&gt; for el in tqdm.tqdm([1, 2, 3], desc='Processing'):\n...     time.sleep(1)\nProcessing: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:03&lt;00:00,  1.00s/it]\n</code></pre>"},{"location":"python-cheatsheet/#plot","title":"Plot","text":"<pre><code># $ pip3 install matplotlib\nimport matplotlib.pyplot as plt\n\nplt.plot/bar/scatter(x_data, y_data [, label=&lt;str&gt;])  # Or: plt.plot(y_data)\nplt.legend()                                          # Adds a legend.\nplt.savefig(&lt;path&gt;)                                   # Saves the figure.\nplt.show()                                            # Displays the figure.\nplt.clf()                                             # Clears the figure.\n</code></pre>"},{"location":"python-cheatsheet/#table","title":"Table","text":""},{"location":"python-cheatsheet/#prints-a-csv-file-as-an-ascii-table","title":"Prints a CSV file as an ASCII table:","text":"<pre><code># $ pip3 install tabulate\nimport csv, tabulate\nwith open('test.csv', encoding='utf-8', newline='') as file:\n    rows = list(csv.reader(file))\nprint(tabulate.tabulate(rows, headers='firstrow'))\n</code></pre>"},{"location":"python-cheatsheet/#curses","title":"Curses","text":""},{"location":"python-cheatsheet/#runs-a-basic-file-explorer-in-the-console","title":"Runs a basic file explorer in the console:","text":"<pre><code># $ pip3 install windows-curses\nimport curses, os\nfrom curses import A_REVERSE, KEY_DOWN, KEY_UP, KEY_LEFT, KEY_RIGHT, KEY_ENTER\n\ndef main(screen):\n    ch, first, selected, paths = 0, 0, 0, os.listdir()\n    while ch != ord('q'):\n        height, width = screen.getmaxyx()\n        screen.erase()\n        for y, filename in enumerate(paths[first : first+height]):\n            color = A_REVERSE if filename == paths[selected] else 0\n            screen.addnstr(y, 0, filename, width-1, color)\n        ch = screen.getch()\n        selected += (ch == KEY_DOWN) - (ch == KEY_UP)\n        selected = max(0, min(len(paths)-1, selected))\n        first += (selected &gt;= first + height) - (selected &lt; first)\n        if ch in [KEY_LEFT, KEY_RIGHT, KEY_ENTER, ord('\\n'), ord('\\r')]:\n            new_dir = '..' if ch == KEY_LEFT else paths[selected]\n            if os.path.isdir(new_dir):\n                os.chdir(new_dir)\n                first, selected, paths = 0, 0, os.listdir()\n\nif __name__ == '__main__':\n    curses.wrapper(main)\n</code></pre>"},{"location":"python-cheatsheet/#pysimplegui","title":"PySimpleGUI","text":""},{"location":"python-cheatsheet/#a-weight-converter-gui-application","title":"A weight converter GUI application:","text":"<pre><code># $ pip3 install PySimpleGUI\nimport PySimpleGUI as sg\n\ntext_box = sg.Input(default_text='100', enable_events=True, key='-VALUE-')\ndropdown = sg.InputCombo(['g', 'kg', 't'], 'kg', readonly=True, enable_events=True, k='-UNIT-')\nlabel    = sg.Text('100 kg is 220.462 lbs.', key='-OUTPUT-')\nbutton   = sg.Button('Close')\nwindow   = sg.Window('Weight Converter', [[text_box, dropdown], [label], [button]])\n\nwhile True:\n    event, values = window.read()\n    if event in [sg.WIN_CLOSED, 'Close']:\n        break\n    try:\n        value = float(values['-VALUE-'])\n    except ValueError:\n        continue\n    unit = values['-UNIT-']\n    factors = {'g': 0.001, 'kg': 1, 't': 1000}\n    lbs = value * factors[unit] / 0.45359237\n    window['-OUTPUT-'].update(value=f'{value} {unit} is {lbs:g} lbs.')\nwindow.close()\n</code></pre>"},{"location":"python-cheatsheet/#scraping","title":"Scraping","text":""},{"location":"python-cheatsheet/#scrapes-pythons-url-and-logo-from-its-wikipedia-page","title":"Scrapes Python's URL and logo from its Wikipedia page:","text":"<pre><code># $ pip3 install requests beautifulsoup4\nimport requests, bs4, os\n\nresponse   = requests.get('https://en.wikipedia.org/wiki/Python_(programming_language)')\ndocument   = bs4.BeautifulSoup(response.text, 'html.parser')\ntable      = document.find('table', class_='infobox vevent')\npython_url = table.find('th', text='Website').next_sibling.a['href']\nlogo_url   = table.find('img')['src']\nlogo       = requests.get(f'https:{logo_url}').content\nfilename   = os.path.basename(logo_url)\nwith open(filename, 'wb') as file:\n    file.write(logo)\nprint(f'{python_url}, file://{os.path.abspath(filename)}')\n</code></pre>"},{"location":"python-cheatsheet/#selenium","title":"Selenium","text":"<p>Library for scraping websites with dynamic content. <pre><code># $ pip3 install selenium\nfrom selenium import webdriver\n\n&lt;Drv&gt; = webdriver.Chrome/Firefox/Safari/Edge()         # Opens the browser. Also &lt;Drv&gt;.quit().\n&lt;Drv&gt;.get('&lt;url&gt;')                                     # Also &lt;Drv&gt;.implicitly_wait(seconds).\n&lt;El&gt; = &lt;Drv/El&gt;.find_element('css selector', '&lt;css&gt;')  # '&lt;tag&gt;#&lt;id&gt;.&lt;class&gt;[&lt;attr&gt;=\"&lt;val&gt;\"]'.\n&lt;list&gt; = &lt;Drv/El&gt;.find_elements('xpath', '&lt;xpath&gt;')    # '//&lt;tag&gt;[@&lt;attr&gt;=\"&lt;val&gt;\"]'.\n&lt;str&gt; = &lt;El&gt;.get_attribute/get_property(&lt;str&gt;)         # Also &lt;El&gt;.text/tag_name.\n&lt;El&gt;.click/clear()                                     # Also &lt;El&gt;.send_keys(&lt;str&gt;).\n</code></pre></p>"},{"location":"python-cheatsheet/#xpath-also-available-in-browsers-console-via-xxpath","title":"XPath \u2014 also available in browser's console via <code>'$x(&lt;xpath&gt;)'</code>:","text":"<pre><code>&lt;xpath&gt;     = //&lt;element&gt;[/ or // &lt;element&gt;]           # Child: /, Descendant: //, Parent: /..\n&lt;xpath&gt;     = //&lt;element&gt;/following::&lt;element&gt;         # Next sibling. Also preceding/parent/\u2026\n&lt;element&gt;   = &lt;tag&gt;&lt;conditions&gt;&lt;index&gt;                 # `&lt;tag&gt; = */a/\u2026`, `&lt;index&gt; = [1/2/\u2026]`.\n&lt;condition&gt; = [&lt;sub_cond&gt; [and/or &lt;sub_cond&gt;]]         # `and` is same as chaining conditions.\n&lt;sub_cond&gt;  = @&lt;attr&gt;=\"&lt;val&gt;\"                          # `.=\"&lt;val&gt;\"` matches complete text.\n&lt;sub_cond&gt;  = contains(@&lt;attr&gt;, \"&lt;val&gt;\")               # Is &lt;val&gt; a substring of attr's value?\n&lt;sub_cond&gt;  = [//]&lt;element&gt;                            # Has matching child? Descendant if //.\n</code></pre>"},{"location":"python-cheatsheet/#web","title":"Web","text":"<p>Flask is a micro web framework/server. If you just want to open a html file in a web browser use <code>'webbrowser.open(&lt;path&gt;)'</code> instead. <pre><code># $ pip3 install flask\nimport flask\n</code></pre></p> <p><pre><code>app = flask.Flask(__name__)\napp.run(host=None, port=None, debug=None)\n</code></pre> * Starts the app at <code>'http://localhost:5000'</code>. Use <code>'host=\"0.0.0.0\"'</code> to run externally. * Install a WSGI server like Waitress and a HTTP server such as Nginx for better security. * Debug mode restarts the app whenever script changes and displays errors in the browser.</p>"},{"location":"python-cheatsheet/#static-request","title":"Static Request","text":"<pre><code>@app.route('/img/&lt;path:filename&gt;')\ndef serve_file(filename):\n    return flask.send_from_directory('dirname/', filename)\n</code></pre>"},{"location":"python-cheatsheet/#dynamic-request","title":"Dynamic Request","text":"<p><pre><code>@app.route('/&lt;sport&gt;')\ndef serve_html(sport):\n    return flask.render_template_string('&lt;h1&gt;{{title}}&lt;/h1&gt;', title=sport)\n</code></pre> * Use <code>'render_template(filename, &lt;kwargs&gt;)'</code> to render file located in templates dir. * To return an error code use <code>'abort(&lt;int&gt;)'</code> and to redirect use <code>'redirect(&lt;url&gt;)'</code>. * <code>'request.args[&lt;str&gt;]'</code> returns parameter from the query string (URL part after '?'). * Use <code>'session[key] = value'</code> to store session data like username, etc.</p>"},{"location":"python-cheatsheet/#rest-request","title":"REST Request","text":"<pre><code>@app.post('/&lt;sport&gt;/odds')\ndef serve_json(sport):\n    team = flask.request.form['team']\n    return {'team': team, 'odds': [2.09, 3.74, 3.68]}\n</code></pre>"},{"location":"python-cheatsheet/#starts-the-app-in-its-own-thread-and-queries-its-rest-api","title":"Starts the app in its own thread and queries its REST API:","text":"<pre><code># $ pip3 install requests\n&gt;&gt;&gt; import threading, requests\n&gt;&gt;&gt; threading.Thread(target=app.run, daemon=True).start()\n&gt;&gt;&gt; url = 'http://localhost:5000/football/odds'\n&gt;&gt;&gt; request_data = {'team': 'arsenal f.c.'}\n&gt;&gt;&gt; response = requests.post(url, data=request_data)\n&gt;&gt;&gt; response.json()\n{'team': 'arsenal f.c.', 'odds': [2.09, 3.74, 3.68]}\n</code></pre>"},{"location":"python-cheatsheet/#profiling","title":"Profiling","text":"<pre><code>from time import perf_counter\nstart_time = perf_counter()\n...\nduration_in_seconds = perf_counter() - start_time\n</code></pre>"},{"location":"python-cheatsheet/#timing-a-snippet","title":"Timing a Snippet","text":"<pre><code>&gt;&gt;&gt; from timeit import timeit\n&gt;&gt;&gt; timeit('list(range(10000))', number=1000, globals=globals(), setup='pass')\n0.19373\n</code></pre>"},{"location":"python-cheatsheet/#profiling-by-line","title":"Profiling by Line","text":"<pre><code>$ pip3 install line_profiler\n$ echo '@profile\ndef main():\n    a = list(range(10000))\n    b = set(range(10000))\nmain()' &gt; test.py\n$ kernprof -lv test.py\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n     1                                           @profile\n     2                                           def main():\n     3         1        253.4    253.4     32.2      a = list(range(10000))\n     4         1        534.1    534.1     67.8      b = set(range(10000))\n</code></pre>"},{"location":"python-cheatsheet/#call-and-flame-graphs","title":"Call and Flame Graphs","text":"<pre><code>$ apt/brew install graphviz &amp;&amp; pip3 install gprof2dot snakeviz\n$ tail --lines=4 test.py &gt; test.py\n$ python3 -m cProfile -o test.prof test.py\n$ gprof2dot --format=pstats test.prof | dot -T png -o test.png\n$ xdg-open/open test.png\n$ snakeviz test.prof\n</code></pre>"},{"location":"python-cheatsheet/#sampling-and-memory-profilers","title":"Sampling and Memory Profilers","text":"<pre><code>+--------------+----------+------------+-------------------------------+------+\n| pip3 install |   Type   |   Target   |          How to run           | Live |\n+--------------+----------+------------+-------------------------------+------+\n| pyinstrument | Sampling |    CPU     | pyinstrument test.py          | No   |\n| py-spy       | Sampling |    CPU     | py-spy top -- python3 test.py | Yes  |\n| scalene      | Sampling | CPU+Memory | scalene test.py               | No   |\n| memray       | Tracing  |   Memory   | memray run --live test.py     | Yes  |\n+--------------+----------+------------+-------------------------------+------+\n</code></pre>"},{"location":"python-cheatsheet/#numpy","title":"NumPy","text":"<p>Array manipulation mini-language. It can run up to one hundred times faster than the equivalent Python code. An even faster alternative that runs on a GPU is called CuPy.</p> <pre><code># $ pip3 install numpy\nimport numpy as np\n</code></pre> <pre><code>&lt;array&gt; = np.array(&lt;list/list_of_lists/\u2026&gt;)              # Returns a 1d/2d/\u2026 NumPy array.\n&lt;array&gt; = np.zeros/ones/empty(&lt;shape&gt;)                  # Also np.full(&lt;shape&gt;, &lt;el&gt;).\n&lt;array&gt; = np.arange(from_inc, to_exc, \u00b1step)            # Also np.linspace(start, stop, len).\n&lt;array&gt; = np.random.randint(from_inc, to_exc, &lt;shape&gt;)  # Also np.random.random(&lt;shape&gt;).\n</code></pre> <pre><code>&lt;view&gt;  = &lt;array&gt;.reshape(&lt;shape&gt;)                      # Also `&lt;array&gt;.shape = &lt;shape&gt;`.\n&lt;array&gt; = &lt;array&gt;.flatten()                             # Also `&lt;view&gt; = &lt;array&gt;.ravel()`.\n&lt;view&gt;  = &lt;array&gt;.transpose()                           # Or: &lt;array&gt;.T\n</code></pre> <pre><code>&lt;array&gt; = np.copy/abs/sqrt/log/int64(&lt;array&gt;)           # Returns new array of the same shape.\n&lt;array&gt; = &lt;array&gt;.sum/max/mean/argmax/all(axis)         # Passed dimension gets aggregated.\n&lt;array&gt; = np.apply_along_axis(&lt;func&gt;, axis, &lt;array&gt;)    # Func can return a scalar or array.\n</code></pre> <p><pre><code>&lt;array&gt; = np.concatenate(&lt;list_of_arrays&gt;, axis=0)      # Links arrays along first axis (rows).\n&lt;array&gt; = np.row_stack/column_stack(&lt;list_of_arrays&gt;)   # Treats 1d arrays as rows or columns.\n&lt;array&gt; = np.tile/repeat(&lt;array&gt;, &lt;int/list&gt; [, axis])  # Tiles array or repeats its elements.\n</code></pre> * Shape is a tuple of dimension sizes. A 100x50 RGB image has shape (50, 100, 3). * Axis is an index of the dimension that gets aggregated. Leftmost dimension has index 0. Summing the RGB image along axis 2 will return a greyscale image with shape (50, 100).</p>"},{"location":"python-cheatsheet/#indexing","title":"Indexing","text":"<pre><code>&lt;el&gt;       = &lt;2d_array&gt;[row_index, column_index]        # &lt;3d_a&gt;[table_i, row_i, column_i]\n&lt;1d_view&gt;  = &lt;2d_array&gt;[row_index]                      # &lt;3d_a&gt;[table_i, row_i]\n&lt;1d_view&gt;  = &lt;2d_array&gt;[:, column_index]                # &lt;3d_a&gt;[table_i, :, column_i]\n&lt;2d_view&gt;  = &lt;2d_array&gt;[rows_slice, columns_slice]      # &lt;3d_a&gt;[table_i, rows_s, columns_s]\n</code></pre> <pre><code>&lt;2d_array&gt; = &lt;2d_array&gt;[row_indexes]                    # &lt;3d_a&gt;[table_i/is, row_is]\n&lt;2d_array&gt; = &lt;2d_array&gt;[:, column_indexes]              # &lt;3d_a&gt;[table_i/is, :, column_is]\n&lt;1d_array&gt; = &lt;2d_array&gt;[row_indexes, column_indexes]    # &lt;3d_a&gt;[table_i/is, row_is, column_is]\n&lt;1d_array&gt; = &lt;2d_array&gt;[row_indexes, column_index]      # &lt;3d_a&gt;[table_i/is, row_is, column_i]\n</code></pre> <p><pre><code>&lt;2d_bools&gt; = &lt;2d_array&gt; &gt; &lt;el/1d/2d_array&gt;              # 1d_array must have size of a row.\n&lt;1d/2d_a&gt;  = &lt;2d_array&gt;[&lt;2d/1d_bools&gt;]                  # 1d_bools must have size of a column.\n</code></pre> * Indexes should not be tuples because Python converts <code>'obj[i, j]'</code>  to <code>'obj[(i, j)]'</code>! * <code>':'</code> returns a slice of all dimension's indexes. Omitted dimensions default to <code>':'</code>. * Any value that is broadcastable to the indexed shape can be assigned to the selection.</p>"},{"location":"python-cheatsheet/#broadcasting","title":"Broadcasting","text":"<p>Set of rules by which NumPy functions operate on arrays of different sizes and/or dimensions.</p> <pre><code>left  = [[0.1], [0.6], [0.8]]                           # Shape: (3, 1)\nright = [ 0.1 ,  0.6 ,  0.8 ]                           # Shape: (3,)\n</code></pre>"},{"location":"python-cheatsheet/#1-if-array-shapes-differ-in-length-left-pad-the-shorter-shape-with-ones","title":"1. If array shapes differ in length, left-pad the shorter shape with ones:","text":"<pre><code>left  = [[0.1], [0.6], [0.8]]                           # Shape: (3, 1)\nright = [[0.1 ,  0.6 ,  0.8]]                           # Shape: (1, 3) &lt;- !\n</code></pre>"},{"location":"python-cheatsheet/#2-if-any-dimensions-differ-in-size-expand-the-ones-that-have-size-1-by-duplicating-their-elements","title":"2. If any dimensions differ in size, expand the ones that have size 1 by duplicating their elements:","text":"<pre><code>left  = [[0.1,  0.1,  0.1],                             # Shape: (3, 3) &lt;- !\n         [0.6,  0.6,  0.6],\n         [0.8,  0.8,  0.8]]\n\nright = [[0.1,  0.6,  0.8],                             # Shape: (3, 3) &lt;- !\n         [0.1,  0.6,  0.8],\n         [0.1,  0.6,  0.8]]\n</code></pre>"},{"location":"python-cheatsheet/#example_3","title":"Example","text":""},{"location":"python-cheatsheet/#for-each-point-returns-index-of-its-nearest-point-01-06-08-1-2-1","title":"For each point returns index of its nearest point (<code>[0.1, 0.6, 0.8] =&gt; [1, 2, 1]</code>):","text":"<pre><code>&gt;&gt;&gt; points = np.array([0.1, 0.6, 0.8])\n [ 0.1,  0.6,  0.8]\n&gt;&gt;&gt; wrapped_points = points.reshape(3, 1)\n[[ 0.1],\n [ 0.6],\n [ 0.8]]\n&gt;&gt;&gt; distances = wrapped_points - points\n[[ 0. , -0.5, -0.7],\n [ 0.5,  0. , -0.2],\n [ 0.7,  0.2,  0. ]]\n&gt;&gt;&gt; distances = np.abs(distances)\n[[ 0. ,  0.5,  0.7],\n [ 0.5,  0. ,  0.2],\n [ 0.7,  0.2,  0. ]]\n&gt;&gt;&gt; distances[range(3), range(3)] = np.inf\n[[ inf,  0.5,  0.7],\n [ 0.5,  inf,  0.2],\n [ 0.7,  0.2,  inf]]\n&gt;&gt;&gt; distances.argmin(1)\n[1, 2, 1]\n</code></pre>"},{"location":"python-cheatsheet/#image","title":"Image","text":"<pre><code># $ pip3 install pillow\nfrom PIL import Image\n</code></pre> <pre><code>&lt;Image&gt; = Image.new('&lt;mode&gt;', (width, height))  # Also `color=&lt;int/tuple/str&gt;`.\n&lt;Image&gt; = Image.open(&lt;path&gt;)                    # Identifies format based on file contents.\n&lt;Image&gt; = &lt;Image&gt;.convert('&lt;mode&gt;')             # Converts image to the new mode.\n&lt;Image&gt;.save(&lt;path&gt;)                            # Selects format based on the path extension.\n&lt;Image&gt;.show()                                  # Opens image in the default preview app.\n</code></pre> <pre><code>&lt;int/tuple&gt; = &lt;Image&gt;.getpixel((x, y))          # Returns pixel's value (its color).\n&lt;Image&gt;.putpixel((x, y), &lt;int/tuple&gt;)           # Updates pixel's value.\n&lt;ImagingCore&gt; = &lt;Image&gt;.getdata()               # Returns a flattened view of pixel values.\n&lt;Image&gt;.putdata(&lt;list/ImagingCore&gt;)             # Updates pixels with a copy of the sequence.\n&lt;Image&gt;.paste(&lt;Image&gt;, (x, y))                  # Draws passed image at specified location.\n</code></pre> <pre><code>&lt;Image&gt; = &lt;Image&gt;.filter(&lt;Filter&gt;)              # `&lt;Filter&gt; = ImageFilter.&lt;name&gt;([&lt;args&gt;])`\n&lt;Image&gt; = &lt;Enhance&gt;.enhance(&lt;float&gt;)            # `&lt;Enhance&gt; = ImageEnhance.&lt;name&gt;(&lt;Image&gt;)`\n</code></pre> <pre><code>&lt;array&gt; = np.array(&lt;Image&gt;)                     # Creates a 2d/3d NumPy array from the image.\n&lt;Image&gt; = Image.fromarray(np.uint8(&lt;array&gt;))    # Use `&lt;array&gt;.clip(0, 255)` to clip values.\n</code></pre>"},{"location":"python-cheatsheet/#modes_1","title":"Modes","text":"<ul> <li><code>'L'</code> - 8-bit pixels, greyscale.</li> <li><code>'RGB'</code> - 3x8-bit pixels, true color.</li> <li><code>'RGBA'</code> - 4x8-bit pixels, true color with transparency mask.</li> <li><code>'HSV'</code> - 3x8-bit pixels, Hue, Saturation, Value color space.</li> </ul>"},{"location":"python-cheatsheet/#examples","title":"Examples","text":""},{"location":"python-cheatsheet/#creates-a-png-image-of-a-rainbow-gradient","title":"Creates a PNG image of a rainbow gradient:","text":"<pre><code>WIDTH, HEIGHT = 100, 100\nn_pixels = WIDTH * HEIGHT\nhues = (255 * i/n_pixels for i in range(n_pixels))\nimg = Image.new('HSV', (WIDTH, HEIGHT))\nimg.putdata([(int(h), 255, 255) for h in hues])\nimg.convert('RGB').save('test.png')\n</code></pre>"},{"location":"python-cheatsheet/#adds-noise-to-the-png-image-and-displays-it","title":"Adds noise to the PNG image and displays it:","text":"<pre><code>from random import randint\nadd_noise = lambda value: max(0, min(255, value + randint(-20, 20)))\nimg = Image.open('test.png').convert('HSV')\nimg.putdata([(add_noise(h), s, v) for h, s, v in img.getdata()])\nimg.show()\n</code></pre>"},{"location":"python-cheatsheet/#image-draw","title":"Image Draw","text":"<p><pre><code>from PIL import ImageDraw\n&lt;ImageDraw&gt; = ImageDraw.Draw(&lt;Image&gt;)           # Object for adding 2D graphics to the image.\n&lt;ImageDraw&gt;.point((x, y))                       # Draws a point. Truncates floats into ints.\n&lt;ImageDraw&gt;.line((x1, y1, x2, y2 [, ...]))      # To get anti-aliasing use Image's resize().\n&lt;ImageDraw&gt;.arc((x1, y1, x2, y2), deg1, deg2)   # Always draws in clockwise direction.\n&lt;ImageDraw&gt;.rectangle((x1, y1, x2, y2))         # To rotate use Image's rotate() and paste().\n&lt;ImageDraw&gt;.polygon((x1, y1, x2, y2, ...))      # Last point gets connected to the first.\n&lt;ImageDraw&gt;.ellipse((x1, y1, x2, y2))           # To rotate use Image's rotate() and paste().\n&lt;ImageDraw&gt;.text((x, y), text, font=&lt;Font&gt;)     # `&lt;Font&gt; = ImageFont.truetype(&lt;path&gt;, size)`\n</code></pre> * Use <code>'fill=&lt;color&gt;'</code> to set the primary color. * Use <code>'width=&lt;int&gt;'</code> to set the width of lines or contours. * Use <code>'outline=&lt;color&gt;'</code> to set the color of the contours. * Color can be an int, tuple, <code>'#rrggbb[aa]'</code> string or a color name.</p>"},{"location":"python-cheatsheet/#animation","title":"Animation","text":""},{"location":"python-cheatsheet/#creates-a-gif-of-a-bouncing-ball","title":"Creates a GIF of a bouncing ball:","text":"<pre><code># $ pip3 install imageio\nfrom PIL import Image, ImageDraw\nimport imageio\n\nWIDTH, HEIGHT, R = 126, 126, 10\nframes = []\nfor velocity in range(1, 16):\n    y = sum(range(velocity))\n    frame = Image.new('L', (WIDTH, HEIGHT))\n    draw = ImageDraw.Draw(frame)\n    draw.ellipse((WIDTH/2-R, y, WIDTH/2+R, y+R*2), fill='white')\n    frames.append(frame)\nframes += reversed(frames[1:-1])\nimageio.mimsave('test.gif', frames, duration=0.03)\n</code></pre>"},{"location":"python-cheatsheet/#audio","title":"Audio","text":"<pre><code>import wave\n</code></pre> <pre><code>&lt;Wave&gt;   = wave.open('&lt;path&gt;', 'rb')   # Opens the WAV file.\n&lt;int&gt;    = &lt;Wave&gt;.getframerate()       # Returns number of frames per second.\n&lt;int&gt;    = &lt;Wave&gt;.getnchannels()       # Returns number of samples per frame.\n&lt;int&gt;    = &lt;Wave&gt;.getsampwidth()       # Returns number of bytes per sample.\n&lt;params&gt; = &lt;Wave&gt;.getparams()          # Returns collection of listed params.\n&lt;bytes&gt;  = &lt;Wave&gt;.readframes(nframes)  # Returns next n frames. All if -1.\n</code></pre> <p><pre><code>&lt;Wave&gt; = wave.open('&lt;path&gt;', 'wb')     # Opens WAV file for writing.\n&lt;Wave&gt;.setframerate(&lt;int&gt;)             # Pass 44100 for CD, 48000 for video.\n&lt;Wave&gt;.setnchannels(&lt;int&gt;)             # Pass 1 for mono, 2 for stereo.\n&lt;Wave&gt;.setsampwidth(&lt;int&gt;)             # Pass 1 for 8-bit sound, 2 for CD.\n&lt;Wave&gt;.setparams(&lt;params&gt;)             # Sets all parameters.\n&lt;Wave&gt;.writeframes(&lt;bytes&gt;)            # Appends frames to the file.\n</code></pre> * Bytes object contains a sequence of frames, each consisting of one or more samples. * In a stereo signal, the first sample of a frame belongs to the left channel. * Each sample consists of one or more bytes that, when converted to an integer, indicate the displacement of a speaker membrane at a given moment. * If sample width is one byte, then the integer should be encoded unsigned. * For all other sizes, the integer should be encoded signed with little-endian byte order.</p>"},{"location":"python-cheatsheet/#sample-values","title":"Sample Values","text":"<pre><code>+-----------+-----------+------+-----------+\n| sampwidth |    min    | zero |    max    |\n+-----------+-----------+------+-----------+\n|     1     |         0 |  128 |       255 |\n|     2     |    -32768 |    0 |     32767 |\n|     3     |  -8388608 |    0 |   8388607 |\n+-----------+-----------+------+-----------+\n</code></pre>"},{"location":"python-cheatsheet/#read-float-samples-from-wav-file","title":"Read Float Samples from WAV File","text":"<pre><code>def read_wav_file(filename):\n    def get_int(bytes_obj):\n        an_int = int.from_bytes(bytes_obj, 'little', signed=(sampwidth != 1))\n        return an_int - 128 * (sampwidth == 1)\n    with wave.open(filename, 'rb') as file:\n        sampwidth = file.getsampwidth()\n        frames = file.readframes(-1)\n    bytes_samples = (frames[i : i+sampwidth] for i in range(0, len(frames), sampwidth))\n    return [get_int(b) / pow(2, sampwidth * 8 - 1) for b in bytes_samples]\n</code></pre>"},{"location":"python-cheatsheet/#write-float-samples-to-wav-file","title":"Write Float Samples to WAV File","text":"<pre><code>def write_to_wav_file(filename, float_samples, nchannels=1, sampwidth=2, framerate=44100):\n    def get_bytes(a_float):\n        a_float = max(-1, min(1 - 2e-16, a_float))\n        a_float += sampwidth == 1\n        a_float *= pow(2, sampwidth * 8 - 1)\n        return int(a_float).to_bytes(sampwidth, 'little', signed=(sampwidth != 1))\n    with wave.open(filename, 'wb') as file:\n        file.setnchannels(nchannels)\n        file.setsampwidth(sampwidth)\n        file.setframerate(framerate)\n        file.writeframes(b''.join(get_bytes(f) for f in float_samples))\n</code></pre>"},{"location":"python-cheatsheet/#examples_1","title":"Examples","text":""},{"location":"python-cheatsheet/#saves-a-440-hz-sine-wave-to-a-mono-wav-file","title":"Saves a 440 Hz sine wave to a mono WAV file:","text":"<pre><code>from math import pi, sin\nsamples_f = (sin(i * 2 * pi * 440 / 44100) for i in range(100_000))\nwrite_to_wav_file('test.wav', samples_f)\n</code></pre>"},{"location":"python-cheatsheet/#adds-noise-to-the-mono-wav-file","title":"Adds noise to the mono WAV file:","text":"<pre><code>from random import random\nadd_noise = lambda value: value + (random() - 0.5) * 0.03\nsamples_f = (add_noise(f) for f in read_wav_file('test.wav'))\nwrite_to_wav_file('test.wav', samples_f)\n</code></pre>"},{"location":"python-cheatsheet/#plays-the-wav-file","title":"Plays the WAV file:","text":"<pre><code># $ pip3 install simpleaudio\nfrom simpleaudio import play_buffer\nwith wave.open('test.wav', 'rb') as file:\n    p = file.getparams()\n    frames = file.readframes(-1)\n    play_buffer(frames, p.nchannels, p.sampwidth, p.framerate).wait_done()\n</code></pre>"},{"location":"python-cheatsheet/#text-to-speech","title":"Text to Speech","text":"<pre><code># $ pip3 install pyttsx3\nimport pyttsx3\nengine = pyttsx3.init()\nengine.say('Sally sells seashells by the seashore.')\nengine.runAndWait()\n</code></pre>"},{"location":"python-cheatsheet/#synthesizer","title":"Synthesizer","text":""},{"location":"python-cheatsheet/#plays-popcorn-by-gershon-kingsley","title":"Plays Popcorn by Gershon Kingsley:","text":"<pre><code># $ pip3 install simpleaudio\nimport array, itertools as it, math, simpleaudio\n\nF  = 44100\nP1 = '71\u2669,69\u266a,,71\u2669,66\u266a,,62\u2669,66\u266a,,59\u2669,,,71\u2669,69\u266a,,71\u2669,66\u266a,,62\u2669,66\u266a,,59\u2669,,,'\nP2 = '71\u2669,73\u266a,,74\u2669,73\u266a,,74\u266a,,71\u266a,,73\u2669,71\u266a,,73\u266a,,69\u266a,,71\u2669,69\u266a,,71\u266a,,67\u266a,,71\u2669,,,'\nget_pause   = lambda seconds: it.repeat(0, int(seconds * F))\nsin_f       = lambda i, hz: math.sin(i * 2 * math.pi * hz / F)\nget_wave    = lambda hz, seconds: (sin_f(i, hz) for i in range(int(seconds * F)))\nget_hz      = lambda note: 8.176 * 2 ** (int(note[:2]) / 12)\nget_sec     = lambda note: 1/4 if '\u2669' in note else 1/8\nget_samples = lambda note: get_wave(get_hz(note), get_sec(note)) if note else get_pause(1/8)\nsamples_f   = it.chain.from_iterable(get_samples(n) for n in (P1+P2).split(','))\nsamples_i   = array.array('h', (int(f * 30000) for f in samples_f))\nsimpleaudio.play_buffer(samples_i, 1, 2, F).wait_done()\n</code></pre>"},{"location":"python-cheatsheet/#pygame","title":"Pygame","text":"<pre><code># $ pip3 install pygame\nimport pygame as pg\n\npg.init()\nscreen = pg.display.set_mode((500, 500))\nrect = pg.Rect(240, 240, 20, 20)\nwhile not pg.event.get(pg.QUIT):\n    deltas = {pg.K_UP: (0, -20), pg.K_RIGHT: (20, 0), pg.K_DOWN: (0, 20), pg.K_LEFT: (-20, 0)}\n    for event in pg.event.get(pg.KEYDOWN):\n        dx, dy = deltas.get(event.key, (0, 0))\n        rect = rect.move((dx, dy))\n    screen.fill((0, 0, 0))\n    pg.draw.rect(screen, (255, 255, 255), rect)\n    pg.display.flip()\n</code></pre>"},{"location":"python-cheatsheet/#rectangle","title":"Rectangle","text":"<p>Object for storing rectangular coordinates. <pre><code>&lt;Rect&gt; = pg.Rect(x, y, width, height)           # Floats get truncated into ints.\n&lt;int&gt;  = &lt;Rect&gt;.x/y/centerx/centery/\u2026           # Top, right, bottom, left. Allows assignments.\n&lt;tup.&gt; = &lt;Rect&gt;.topleft/center/\u2026                # Topright, bottomright, bottomleft. Same.\n&lt;Rect&gt; = &lt;Rect&gt;.move((delta_x, delta_y))        # Use move_ip() to move in-place.\n</code></pre></p> <pre><code>&lt;bool&gt; = &lt;Rect&gt;.collidepoint((x, y))            # Checks if rectangle contains the point.\n&lt;bool&gt; = &lt;Rect&gt;.colliderect(&lt;Rect&gt;)             # Checks if two rectangles overlap.\n&lt;int&gt;  = &lt;Rect&gt;.collidelist(&lt;list_of_Rect&gt;)     # Returns index of first colliding Rect or -1.\n&lt;list&gt; = &lt;Rect&gt;.collidelistall(&lt;list_of_Rect&gt;)  # Returns indexes of all colliding rectangles.\n</code></pre>"},{"location":"python-cheatsheet/#surface","title":"Surface","text":"<p>Object for representing images. <pre><code>&lt;Surf&gt; = pg.display.set_mode((width, height))   # Opens new window and returns its surface.\n&lt;Surf&gt; = pg.Surface((width, height))            # New RGB surface. RGBA if `flags=pg.SRCALPHA`.\n&lt;Surf&gt; = pg.image.load(&lt;path/file&gt;)             # Loads the image. Format depends on source.\n&lt;Surf&gt; = pg.surfarray.make_surface(&lt;np_array&gt;)  # Also `&lt;np_arr&gt; = surfarray.pixels3d(&lt;Surf&gt;)`.\n&lt;Surf&gt; = &lt;Surf&gt;.subsurface(&lt;Rect&gt;)              # Creates a new surface from the cutout.\n</code></pre></p> <pre><code>&lt;Surf&gt;.fill(color)                              # Tuple, Color('#rrggbb[aa]') or Color(&lt;name&gt;).\n&lt;Surf&gt;.set_at((x, y), color)                    # Updates pixel. Also &lt;Surf&gt;.get_at((x, y)).\n&lt;Surf&gt;.blit(&lt;Surf&gt;, (x, y))                     # Draws passed surface to the surface.\n</code></pre> <pre><code>from pygame.transform import scale, ...\n&lt;Surf&gt; = scale(&lt;Surf&gt;, (width, height))         # Returns scaled surface.\n&lt;Surf&gt; = rotate(&lt;Surf&gt;, anticlock_degrees)      # Returns rotated and scaled surface.\n&lt;Surf&gt; = flip(&lt;Surf&gt;, x_bool, y_bool)           # Returns flipped surface.\n</code></pre> <pre><code>from pygame.draw import line, ...\nline(&lt;Surf&gt;, color, (x1, y1), (x2, y2), width)  # Draws a line to the surface.\narc(&lt;Surf&gt;, color, &lt;Rect&gt;, from_rad, to_rad)    # Also ellipse(&lt;Surf&gt;, color, &lt;Rect&gt;, width=0).\nrect(&lt;Surf&gt;, color, &lt;Rect&gt;, width=0)            # Also polygon(&lt;Surf&gt;, color, points, width=0).\n</code></pre>"},{"location":"python-cheatsheet/#font","title":"Font","text":"<pre><code>&lt;Font&gt; = pg.font.Font(&lt;path/file&gt;, size)        # Loads TTF file. Pass None for default font.\n&lt;Surf&gt; = &lt;Font&gt;.render(text, antialias, color)  # Background color can be specified at the end.\n</code></pre>"},{"location":"python-cheatsheet/#sound","title":"Sound","text":"<pre><code>&lt;Sound&gt; = pg.mixer.Sound(&lt;path/file/bytes&gt;)     # WAV file or bytes/array of signed shorts.\n&lt;Sound&gt;.play/stop()                             # Also &lt;Sound&gt;.set_volume(&lt;float&gt;).\n</code></pre>"},{"location":"python-cheatsheet/#basic-mario-brothers-example","title":"Basic Mario Brothers Example","text":"<pre><code>import collections, dataclasses, enum, io, itertools as it, pygame as pg, urllib.request\nfrom random import randint\n\nP = collections.namedtuple('P', 'x y')          # Position\nD = enum.Enum('D', 'n e s w')                   # Direction\nW, H, MAX_S = 50, 50, P(5, 10)                  # Width, Height, Max speed\n\ndef main():\n    def get_screen():\n        pg.init()\n        return pg.display.set_mode((W*16, H*16))\n    def get_images():\n        url = 'https://gto76.github.io/python-cheatsheet/web/mario_bros.png'\n        img = pg.image.load(io.BytesIO(urllib.request.urlopen(url).read()))\n        return [img.subsurface(get_rect(x, 0)) for x in range(img.get_width() // 16)]\n    def get_mario():\n        Mario = dataclasses.make_dataclass('Mario', 'rect spd facing_left frame_cycle'.split())\n        return Mario(get_rect(1, 1), P(0, 0), False, it.cycle(range(3)))\n    def get_tiles():\n        border = [(x, y) for x in range(W) for y in range(H) if x in [0, W-1] or y in [0, H-1]]\n        platforms = [(randint(1, W-2), randint(2, H-2)) for _ in range(W*H // 10)]\n        return [get_rect(x, y) for x, y in border + platforms]\n    def get_rect(x, y):\n        return pg.Rect(x*16, y*16, 16, 16)\n    run(get_screen(), get_images(), get_mario(), get_tiles())\n\ndef run(screen, images, mario, tiles):\n    clock = pg.time.Clock()\n    pressed = set()\n    while not pg.event.get(pg.QUIT) and clock.tick(28):\n        keys = {pg.K_UP: D.n, pg.K_RIGHT: D.e, pg.K_DOWN: D.s, pg.K_LEFT: D.w}\n        pressed |= {keys.get(e.key) for e in pg.event.get(pg.KEYDOWN)}\n        pressed -= {keys.get(e.key) for e in pg.event.get(pg.KEYUP)}\n        update_speed(mario, tiles, pressed)\n        update_position(mario, tiles)\n        draw(screen, images, mario, tiles, pressed)\n\ndef update_speed(mario, tiles, pressed):\n    x, y = mario.spd\n    x += 2 * ((D.e in pressed) - (D.w in pressed))\n    x += (x &lt; 0) - (x &gt; 0)\n    y += 1 if D.s not in get_boundaries(mario.rect, tiles) else (D.n in pressed) * -10\n    mario.spd = P(x=max(-MAX_S.x, min(MAX_S.x, x)), y=max(-MAX_S.y, min(MAX_S.y, y)))\n\ndef update_position(mario, tiles):\n    x, y = mario.rect.topleft\n    n_steps = max(abs(s) for s in mario.spd)\n    for _ in range(n_steps):\n        mario.spd = stop_on_collision(mario.spd, get_boundaries(mario.rect, tiles))\n        mario.rect.topleft = x, y = x + (mario.spd.x / n_steps), y + (mario.spd.y / n_steps)\n\ndef get_boundaries(rect, tiles):\n    deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}\n    return {d for d, delta in deltas.items() if rect.move(delta).collidelist(tiles) != -1}\n\ndef stop_on_collision(spd, bounds):\n    return P(x=0 if (D.w in bounds and spd.x &lt; 0) or (D.e in bounds and spd.x &gt; 0) else spd.x,\n             y=0 if (D.n in bounds and spd.y &lt; 0) or (D.s in bounds and spd.y &gt; 0) else spd.y)\n\ndef draw(screen, images, mario, tiles, pressed):\n    def get_marios_image_index():\n        if D.s not in get_boundaries(mario.rect, tiles):\n            return 4\n        return next(mario.frame_cycle) if {D.w, D.e} &amp; pressed else 6\n    screen.fill((85, 168, 255))\n    mario.facing_left = (D.w in pressed) if {D.w, D.e} &amp; pressed else mario.facing_left\n    screen.blit(images[get_marios_image_index() + mario.facing_left * 9], mario.rect)\n    for t in tiles:\n        screen.blit(images[18 if t.x in [0, (W-1)*16] or t.y in [0, (H-1)*16] else 19], t)\n    pg.display.flip()\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"python-cheatsheet/#pandas","title":"Pandas","text":"<pre><code># $ pip3 install pandas matplotlib\nimport pandas as pd, matplotlib.pyplot as plt\n</code></pre>"},{"location":"python-cheatsheet/#series","title":"Series","text":"<p>Ordered dictionary with a name.</p> <pre><code>&gt;&gt;&gt; pd.Series([1, 2], index=['x', 'y'], name='a')\nx    1\ny    2\nName: a, dtype: int64\n</code></pre> <pre><code>&lt;Sr&gt; = pd.Series(&lt;list&gt;)                       # Assigns RangeIndex starting at 0.\n&lt;Sr&gt; = pd.Series(&lt;dict&gt;)                       # Takes dictionary's keys for index.\n&lt;Sr&gt; = pd.Series(&lt;dict/Series&gt;, index=&lt;list&gt;)  # Only keeps items with keys specified in index.\n</code></pre> <pre><code>&lt;el&gt; = &lt;Sr&gt;.loc[key]                           # Or: &lt;Sr&gt;.iloc[index]\n&lt;Sr&gt; = &lt;Sr&gt;.loc[keys]                          # Or: &lt;Sr&gt;.iloc[indexes]\n&lt;Sr&gt; = &lt;Sr&gt;.loc[from_key : to_key_inclusive]   # Or: &lt;Sr&gt;.iloc[from_i : to_i_exclusive]\n</code></pre> <pre><code>&lt;el&gt; = &lt;Sr&gt;[key/index]                         # Or: &lt;Sr&gt;.key\n&lt;Sr&gt; = &lt;Sr&gt;[keys/indexes]                      # Or: &lt;Sr&gt;[&lt;keys_slice/slice&gt;]\n&lt;Sr&gt; = &lt;Sr&gt;[bools]                             # Or: &lt;Sr&gt;.loc/iloc[bools]\n</code></pre> <pre><code>&lt;Sr&gt; = &lt;Sr&gt; &gt; &lt;el/Sr&gt;                          # Returns a Series of bools.\n&lt;Sr&gt; = &lt;Sr&gt; + &lt;el/Sr&gt;                          # Items with non-matching keys get value NaN.\n</code></pre> <pre><code>&lt;Sr&gt; = pd.concat(&lt;coll_of_Sr&gt;)                 # Concats multiple series into one long Series.\n&lt;Sr&gt; = &lt;Sr&gt;.combine_first(&lt;Sr&gt;)                # Adds items that are not yet present.\n&lt;Sr&gt;.update(&lt;Sr&gt;)                              # Updates items that are already present.\n</code></pre> <pre><code>&lt;Sr&gt;.plot.line/area/bar/pie/hist()             # Generates a Matplotlib plot.\nplt.show()                                     # Displays the plot. Also plt.savefig(&lt;path&gt;).\n</code></pre>"},{"location":"python-cheatsheet/#series-aggregate-transform-map","title":"Series \u2014 Aggregate, Transform, Map:","text":"<pre><code>&lt;el&gt; = &lt;Sr&gt;.sum/max/mean/idxmax/all()          # Or: &lt;Sr&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)\n&lt;Sr&gt; = &lt;Sr&gt;.rank/diff/cumsum/ffill/interplt()  # Or: &lt;Sr&gt;.agg/transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)\n&lt;Sr&gt; = &lt;Sr&gt;.fillna(&lt;el&gt;)                       # Or: &lt;Sr&gt;.agg/transform/map(lambda &lt;el&gt;: &lt;el&gt;)\n</code></pre> <pre><code>&gt;&gt;&gt; sr = pd.Series([2, 3], index=['x', 'y'])\nx    2\ny    3\n</code></pre> <pre><code>+---------------+-------------+-------------+---------------+\n|               |    'sum'    |   ['sum']   | {'s': 'sum'}  |\n+---------------+-------------+-------------+---------------+\n| sr.apply(\u2026)   |      5      |    sum  5   |     s  5      |\n| sr.agg(\u2026)     |             |             |               |\n+---------------+-------------+-------------+---------------+\n</code></pre> <p><pre><code>+---------------+-------------+-------------+---------------+\n|               |    'rank'   |   ['rank']  | {'r': 'rank'} |\n+---------------+-------------+-------------+---------------+\n| sr.apply(\u2026)   |             |      rank   |               |\n| sr.agg(\u2026)     |     x  1    |   x     1   |    r  x  1    |\n|               |     y  2    |   y     2   |       y  2    |\n+---------------+-------------+-------------+---------------+\n</code></pre> * Keys/indexes/bools can't be tuples because <code>'obj[x, y]'</code> is converted to <code>'obj[(x, y)]'</code>! * Methods ffill(), interpolate(), fillna() and dropna() accept <code>'inplace=True'</code>. * Last result has a hierarchical index. Use <code>'&lt;Sr&gt;[key_1, key_2]'</code> to get its values.</p>"},{"location":"python-cheatsheet/#dataframe","title":"DataFrame","text":"<p>Table with labeled rows and columns.</p> <pre><code>&gt;&gt;&gt; pd.DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y'])\n   x  y\na  1  2\nb  3  4\n</code></pre> <pre><code>&lt;DF&gt;    = pd.DataFrame(&lt;list_of_rows&gt;)         # Rows can be either lists, dicts or series.\n&lt;DF&gt;    = pd.DataFrame(&lt;dict_of_columns&gt;)      # Columns can be either lists, dicts or series.\n</code></pre> <pre><code>&lt;el&gt;    = &lt;DF&gt;.loc[row_key, column_key]        # Or: &lt;DF&gt;.iloc[row_index, column_index]\n&lt;Sr/DF&gt; = &lt;DF&gt;.loc[row_key/s]                  # Or: &lt;DF&gt;.iloc[row_index/es]\n&lt;Sr/DF&gt; = &lt;DF&gt;.loc[:, column_key/s]            # Or: &lt;DF&gt;.iloc[:, column_index/es]\n&lt;DF&gt;    = &lt;DF&gt;.loc[row_bools, column_bools]    # Or: &lt;DF&gt;.iloc[row_bools, column_bools]\n</code></pre> <pre><code>&lt;Sr/DF&gt; = &lt;DF&gt;[column_key/s]                   # Or: &lt;DF&gt;.column_key\n&lt;DF&gt;    = &lt;DF&gt;[row_bools]                      # Keeps rows as specified by bools.\n&lt;DF&gt;    = &lt;DF&gt;[&lt;DF_of_bools&gt;]                  # Assigns NaN to items that are False in bools.\n</code></pre> <pre><code>&lt;DF&gt;    = &lt;DF&gt; &gt; &lt;el/Sr/DF&gt;                    # Returns DF of bools. Sr is treated as a row.\n&lt;DF&gt;    = &lt;DF&gt; + &lt;el/Sr/DF&gt;                    # Items with non-matching keys get value NaN.\n</code></pre> <pre><code>&lt;DF&gt;    = &lt;DF&gt;.set_index(column_key)           # Replaces row keys with values from the column.\n&lt;DF&gt;    = &lt;DF&gt;.reset_index(drop=False)         # Drops or moves row keys to column named index.\n&lt;DF&gt;    = &lt;DF&gt;.sort_index(ascending=True)      # Sorts rows by row keys. Use `axis=1` for cols.\n&lt;DF&gt;    = &lt;DF&gt;.sort_values(column_key/s)       # Sorts rows by passed column/s. Also `axis=1`.\n</code></pre>"},{"location":"python-cheatsheet/#dataframe-merge-join-concat","title":"DataFrame \u2014 Merge, Join, Concat:","text":"<pre><code>&gt;&gt;&gt; l = pd.DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y'])\n   x  y\na  1  2\nb  3  4\n&gt;&gt;&gt; r = pd.DataFrame([[4, 5], [6, 7]], index=['b', 'c'], columns=['y', 'z'])\n   y  z\nb  4  5\nc  6  7\n</code></pre> <pre><code>+------------------------+---------------+------------+------------+--------------------------+\n|                        |    'outer'    |   'inner'  |   'left'   |       Description        |\n+------------------------+---------------+------------+------------+--------------------------+\n| l.merge(r, on='y',     |    x   y   z  | x   y   z  | x   y   z  | Merges on column if 'on' |\n|            how=\u2026)      | 0  1   2   .  | 3   4   5  | 1   2   .  | or 'left/right_on' are   |\n|                        | 1  3   4   5  |            | 3   4   5  | set, else on shared cols.|\n|                        | 2  .   6   7  |            |            | Uses 'inner' by default. |\n+------------------------+---------------+------------+------------+--------------------------+\n| l.join(r, lsuffix='l', |    x yl yr  z |            | x yl yr  z | Merges on row keys.      |\n|           rsuffix='r', | a  1  2  .  . | x yl yr  z | 1  2  .  . | Uses 'left' by default.  |\n|           how=\u2026)       | b  3  4  4  5 | 3  4  4  5 | 3  4  4  5 | If r is a Series, it is  |\n|                        | c  .  .  6  7 |            |            | treated as a column.     |\n+------------------------+---------------+------------+------------+--------------------------+\n| pd.concat([l, r],      |    x   y   z  |     y      |            | Adds rows at the bottom. |\n|           axis=0,      | a  1   2   .  |     2      |            | Uses 'outer' by default. |\n|           join=\u2026)      | b  3   4   .  |     4      |            | A Series is treated as a |\n|                        | b  .   4   5  |     4      |            | column. To add a row use |\n|                        | c  .   6   7  |     6      |            | pd.concat([l, DF([sr])]).|\n+------------------------+---------------+------------+------------+--------------------------+\n| pd.concat([l, r],      |    x  y  y  z |            |            | Adds columns at the      |\n|           axis=1,      | a  1  2  .  . | x  y  y  z |            | right end. Uses 'outer'  |\n|           join=\u2026)      | b  3  4  4  5 | 3  4  4  5 |            | by default. A Series is  |\n|                        | c  .  .  6  7 |            |            | treated as a column.     |\n+------------------------+---------------+------------+------------+--------------------------+\n| l.combine_first(r)     |    x   y   z  |            |            | Adds missing rows and    |\n|                        | a  1   2   .  |            |            | columns. Also updates    |\n|                        | b  3   4   5  |            |            | items that contain NaN.  |\n|                        | c  .   6   7  |            |            | Argument r must be a DF. |\n+------------------------+---------------+------------+------------+--------------------------+\n</code></pre>"},{"location":"python-cheatsheet/#dataframe-aggregate-transform-map","title":"DataFrame \u2014 Aggregate, Transform, Map:","text":"<p><pre><code>&lt;Sr&gt; = &lt;DF&gt;.sum/max/mean/idxmax/all()          # Or: &lt;DF&gt;.apply/agg(lambda &lt;Sr&gt;: &lt;el&gt;)\n&lt;DF&gt; = &lt;DF&gt;.rank/diff/cumsum/ffill/interplt()  # Or: &lt;DF&gt;.apply/agg/transfrm(lambda &lt;Sr&gt;: &lt;Sr&gt;)\n&lt;DF&gt; = &lt;DF&gt;.fillna(&lt;el&gt;)                       # Or: &lt;DF&gt;.applymap(lambda &lt;el&gt;: &lt;el&gt;)\n</code></pre> * All operations operate on columns by default. Pass <code>'axis=1'</code> to process the rows instead.</p> <pre><code>&gt;&gt;&gt; df = pd.DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y'])\n   x  y\na  1  2\nb  3  4\n</code></pre> <pre><code>+-----------------+-------------+-------------+---------------+\n|                 |    'sum'    |   ['sum']   | {'x': 'sum'}  |\n+-----------------+-------------+-------------+---------------+\n| df.apply(\u2026)     |     x  4    |       x  y  |     x  4      |\n| df.agg(\u2026)       |     y  6    |  sum  4  6  |               |\n+-----------------+-------------+-------------+---------------+\n</code></pre> <p><pre><code>+-----------------+-------------+-------------+---------------+\n|                 |    'rank'   |   ['rank']  | {'x': 'rank'} |\n+-----------------+-------------+-------------+---------------+\n| df.apply(\u2026)     |             |      x    y |               |\n| df.agg(\u2026)       |      x  y   |   rank rank |        x      |\n| df.transform(\u2026) |   a  1  1   | a    1    1 |     a  1      |\n|                 |   b  2  2   | b    2    2 |     b  2      |\n+-----------------+-------------+-------------+---------------+\n</code></pre> * Use <code>'&lt;DF&gt;[col_key_1, col_key_2][row_key]'</code> to get the fifth result's values.</p>"},{"location":"python-cheatsheet/#dataframe-plot-encode-decode","title":"DataFrame \u2014 Plot, Encode, Decode:","text":"<pre><code>&lt;DF&gt;.plot.line/area/bar/hist/scatter/box()     # Also: `x=column_key, y=column_key/s`.\nplt.show()                                     # Displays the plot. Also plt.savefig(&lt;path&gt;).\n</code></pre> <pre><code>&lt;DF&gt; = pd.read_json/html('&lt;str/path/url&gt;')     # Run `$ pip3 install beautifulsoup4 lxml`.\n&lt;DF&gt; = pd.read_csv('&lt;path/url&gt;')               # Also `names=&lt;list&gt;, parse_dates=False`.\n&lt;DF&gt; = pd.read_pickle/excel('&lt;path/url&gt;')      # Use `sheet_name=None` to get all Excel sheets.\n&lt;DF&gt; = pd.read_sql('&lt;table/query&gt;', &lt;conn.&gt;)   # SQLite3/SQLAlchemy connection (see #SQLite).\n</code></pre> <pre><code>&lt;dict&gt; = &lt;DF&gt;.to_dict(['d/l/s/\u2026'])             # Returns columns as dicts, lists or series.\n&lt;str&gt;  = &lt;DF&gt;.to_json/html/csv([&lt;path&gt;])       # Also to_markdown/latex([&lt;path&gt;]).\n&lt;DF&gt;.to_pickle/excel(&lt;path&gt;)                   # Run `$ pip3 install \"pandas[excel]\" odfpy`.\n&lt;DF&gt;.to_sql('&lt;table_name&gt;', &lt;connection&gt;)      # Also `if_exists='fail/replace/append'`.\n</code></pre>"},{"location":"python-cheatsheet/#groupby","title":"GroupBy","text":"<p>Object that groups together rows of a dataframe based on the value of the passed column.</p> <pre><code>&gt;&gt;&gt; df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 6]], list('abc'), list('xyz'))\n&gt;&gt;&gt; df.groupby('z').get_group(6)\n   x  y  z\nb  4  5  6\nc  7  8  6\n</code></pre> <pre><code>&lt;GB&gt; = &lt;DF&gt;.groupby(column_key/s)              # Splits DF into groups based on passed column.\n&lt;DF&gt; = &lt;GB&gt;.apply(&lt;func&gt;)                      # Maps each group. Func can return DF, Sr or el.\n&lt;GB&gt; = &lt;GB&gt;[column_key]                        # Single column GB. All operations return a Sr.\n&lt;Sr&gt; = &lt;GB&gt;.size()                             # A Sr of group sizes. Keys are group \"names\".\n</code></pre>"},{"location":"python-cheatsheet/#groupby-aggregate-transform-map","title":"GroupBy \u2014 Aggregate, Transform, Map:","text":"<pre><code>&lt;DF&gt; = &lt;GB&gt;.sum/max/mean/idxmax/all()          # Or: &lt;GB&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)\n&lt;DF&gt; = &lt;GB&gt;.rank/diff/cumsum/ffill()           # Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)\n&lt;DF&gt; = &lt;GB&gt;.fillna(&lt;el&gt;)                       # Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)\n</code></pre> <pre><code>&gt;&gt;&gt; gb = df.groupby('z'); gb.apply(print)\n   x  y  z\na  1  2  3\n   x  y  z\nb  4  5  6\nc  7  8  6\n</code></pre> <pre><code>+-----------------+-------------+-------------+-------------+---------------+\n|                 |    'sum'    |    'rank'   |   ['rank']  | {'x': 'rank'} |\n+-----------------+-------------+-------------+-------------+---------------+\n| gb.agg(\u2026)       |      x   y  |             |      x    y |               |\n|                 |  z          |      x  y   |   rank rank |        x      |\n|                 |  3   1   2  |   a  1  1   | a    1    1 |     a  1      |\n|                 |  6  11  13  |   b  1  1   | b    1    1 |     b  1      |\n|                 |             |   c  2  2   | c    2    2 |     c  2      |\n+-----------------+-------------+-------------+-------------+---------------+\n| gb.transform(\u2026) |      x   y  |      x  y   |             |               |\n|                 |  a   1   2  |   a  1  1   |             |               |\n|                 |  b  11  13  |   b  1  1   |             |               |\n|                 |  c  11  13  |   c  2  2   |             |               |\n+-----------------+-------------+-------------+-------------+---------------+\n</code></pre>"},{"location":"python-cheatsheet/#rolling","title":"Rolling","text":"<p>Object for rolling window calculations.</p> <pre><code>&lt;RSr/RDF/RGB&gt; = &lt;Sr/DF/GB&gt;.rolling(win_size)   # Also: `min_periods=None, center=False`.\n&lt;RSr/RDF/RGB&gt; = &lt;RDF/RGB&gt;[column_key/s]        # Or: &lt;RDF/RGB&gt;.column_key\n&lt;Sr/DF&gt;       = &lt;R&gt;.mean/sum/max()             # Or: &lt;R&gt;.apply/agg(&lt;agg_func/str&gt;)\n</code></pre>"},{"location":"python-cheatsheet/#plotly","title":"Plotly","text":"<pre><code># $ pip3 install pandas plotly kaleido\nimport pandas as pd, plotly.express as ex\n&lt;Figure&gt; = ex.line(&lt;DF&gt;, x=&lt;col_name&gt;, y=&lt;col_name&gt;)        # Or: ex.line(x=&lt;list&gt;, y=&lt;list&gt;)\n&lt;Figure&gt;.update_layout(margin=dict(t=0, r=0, b=0, l=0), \u2026)  # `paper_bgcolor='rgb(0, 0, 0)'`.\n&lt;Figure&gt;.write_html/json/image('&lt;path&gt;')                    # Also &lt;Figure&gt;.show().\n</code></pre>"},{"location":"python-cheatsheet/#displays-a-line-chart-of-total-coronavirus-deaths-per-million-grouped-by-continent","title":"Displays a line chart of total coronavirus deaths per million grouped by continent:","text":"<pre><code>covid = pd.read_csv('https://covid.ourworldindata.org/data/owid-covid-data.csv',\n                    usecols=['iso_code', 'date', 'total_deaths', 'population'])\ncontinents = pd.read_csv('https://gist.githubusercontent.com/stevewithington/20a69c0b6d2ff'\n                         '846ea5d35e5fc47f26c/raw/country-and-continent-codes-list-csv.csv',\n                         usecols=['Three_Letter_Country_Code', 'Continent_Name'])\ndf = pd.merge(covid, continents, left_on='iso_code', right_on='Three_Letter_Country_Code')\ndf = df.groupby(['Continent_Name', 'date']).sum().reset_index()\ndf['Total Deaths per Million'] = df.total_deaths * 1e6 / df.population\ndf = df[df.date &gt; '2020-03-14']\ndf = df.rename({'date': 'Date', 'Continent_Name': 'Continent'}, axis='columns')\nex.line(df, x='Date', y='Total Deaths per Million', color='Continent').show()\n</code></pre>"},{"location":"python-cheatsheet/#displays-a-multi-axis-line-chart-of-total-coronavirus-cases-and-changes-in-prices-of-bitcoin-dow-jones-and-gold","title":"Displays a multi-axis line chart of total coronavirus cases and changes in prices of Bitcoin, Dow Jones and gold:","text":"<pre><code>import pandas as pd, plotly.graph_objects as go\n\ndef main():\n    covid, bitcoin, gold, dow = scrape_data()\n    display_data(wrangle_data(covid, bitcoin, gold, dow))\n\ndef scrape_data():\n    def get_covid_cases():\n        url = 'https://covid.ourworldindata.org/data/owid-covid-data.csv'\n        df = pd.read_csv(url, usecols=['location', 'date', 'total_cases'])\n        return df[df.location == 'World'].set_index('date').total_cases\n    def get_ticker(symbol):\n        url = (f'https://query1.finance.yahoo.com/v7/finance/download/{symbol}?'\n               'period1=1579651200&amp;period2=9999999999&amp;interval=1d&amp;events=history')\n        df = pd.read_csv(url, usecols=['Date', 'Close'])\n        return df.set_index('Date').Close\n    out = get_covid_cases(), get_ticker('BTC-USD'), get_ticker('GC=F'), get_ticker('^DJI')\n    return map(pd.Series.rename, out, ['Total Cases', 'Bitcoin', 'Gold', 'Dow Jones'])\n\ndef wrangle_data(covid, bitcoin, gold, dow):\n    df = pd.concat([bitcoin, gold, dow], axis=1)  # Creates table by joining columns on dates.\n    df = df.sort_index().interpolate()            # Sorts table by date and interpolates NaN-s.\n    df = df.loc['2020-02-23':]                    # Discards rows before '2020-02-23'.\n    df = (df / df.iloc[0]) * 100                  # Calculates percentages relative to day 1.\n    df = df.join(covid)                           # Adds column with covid cases.\n    return df.sort_values(df.index[-1], axis=1)   # Sorts columns by last day's value.\n\ndef display_data(df):\n    figure = go.Figure()\n    for col_name in reversed(df.columns):\n        yaxis = 'y1' if col_name == 'Total Cases' else 'y2'\n        trace = go.Scatter(x=df.index, y=df[col_name], name=col_name, yaxis=yaxis)\n        figure.add_trace(trace)\n    figure.update_layout(\n        yaxis1=dict(title='Total Cases', rangemode='tozero'),\n        yaxis2=dict(title='%', rangemode='tozero', overlaying='y', side='right'),\n        legend=dict(x=1.08),\n        width=944,\n        height=423\n    )\n    figure.show()\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"python-cheatsheet/#appendix","title":"Appendix","text":""},{"location":"python-cheatsheet/#cython","title":"Cython","text":"<p>Library that compiles Python code into C.</p> <pre><code># $ pip3 install cython\nimport pyximport; pyximport.install()\nimport &lt;cython_script&gt;\n&lt;cython_script&gt;.main()\n</code></pre>"},{"location":"python-cheatsheet/#definitions","title":"Definitions:","text":"<ul> <li>All <code>'cdef'</code> definitions are optional, but they contribute to the speed-up.</li> <li>Script needs to be saved with a <code>'pyx'</code> extension.</li> </ul> <pre><code>cdef &lt;ctype&gt; &lt;var_name&gt; = &lt;el&gt;\ncdef &lt;ctype&gt;[n_elements] &lt;var_name&gt; = [&lt;el&gt;, &lt;el&gt;, ...]\ncdef &lt;ctype/void&gt; &lt;func_name&gt;(&lt;ctype&gt; &lt;arg_name&gt;): ...\n</code></pre> <pre><code>cdef class &lt;class_name&gt;:\n    cdef public &lt;ctype&gt; &lt;attr_name&gt;\n    def __init__(self, &lt;ctype&gt; &lt;arg_name&gt;):\n        self.&lt;attr_name&gt; = &lt;arg_name&gt;\n</code></pre> <pre><code>cdef enum &lt;enum_name&gt;: &lt;member_name&gt;, &lt;member_name&gt;, ...\n</code></pre>"},{"location":"python-cheatsheet/#virtual-environments","title":"Virtual Environments","text":"<p>System for installing libraries directly into project's directory.</p> <pre><code>$ python3 -m venv &lt;name&gt;      # Creates virtual environment in current directory.\n$ source &lt;name&gt;/bin/activate  # Activates venv. On Windows run `&lt;name&gt;\\Scripts\\activate`.\n$ pip3 install &lt;library&gt;      # Installs the library into active environment.\n$ python3 &lt;path&gt;              # Runs the script in active environment. Also `./&lt;path&gt;`.\n$ deactivate                  # Deactivates the active virtual environment.\n</code></pre>"},{"location":"python-cheatsheet/#basic-script-template","title":"Basic Script Template","text":"<pre><code>#!/usr/bin/env python3\n#\n# Usage: .py\n#\n\nfrom sys import argv, exit\nfrom collections import defaultdict, namedtuple\nfrom dataclasses import make_dataclass\nfrom enum import Enum\nimport functools as ft, itertools as it, operator as op, re\n\n\ndef main():\n    pass\n\n\n###\n##  UTIL\n#\n\ndef read_file(filename):\n    with open(filename, encoding='utf-8') as file:\n        return file.readlines()\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"python-cheatsheet/#index","title":"Index","text":"<ul> <li>Only available in the PDF.</li> <li>Ctrl+F / \u2318F is usually sufficient.</li> <li>Searching <code>'#&lt;title&gt;'</code> on the webpage will limit the search to the titles. Comprehensive Python Cheatsheet =============================== <sup>Download text file, Buy PDF, Fork me on GitHub or Check out FAQ. </sup></li> </ul>"},{"location":"python-cheatsheet/#contents","title":"Contents","text":"<p> 1. Collections: <code>List</code>, <code>Dictionary</code>, <code>Set</code>, <code>Tuple</code>, <code>Range</code>, <code>Enumerate</code>, <code>Iterator</code>, <code>Generator</code>. 2. Types: <code>Type</code>, <code>String</code>, <code>Regular_Exp</code>, <code>Format</code>, <code>Numbers</code>, <code>Combinatorics</code>, <code>Datetime</code>. 3. Syntax: <code>Args</code>, <code>Inline</code>, <code>Import</code>, <code>Decorator</code>, <code>Class</code>, <code>Duck_Types</code>, <code>Enum</code>, <code>Exception</code>. 4. System: <code>Exit</code>, <code>Print</code>, <code>Input</code>, <code>Command_Line_Arguments</code>, <code>Open</code>, <code>Path</code>, <code>OS_Commands</code>. 5. Data: <code>JSON</code>, <code>Pickle</code>, <code>CSV</code>, <code>SQLite</code>, <code>Bytes</code>, <code>Struct</code>, <code>Array</code>, <code>Memory_View</code>, <code>Deque</code>. 6. Advanced: <code>Threading</code>, <code>Operator</code>, <code>Match_Stmt</code>, <code>Logging</code>, <code>Introspection</code>, <code>Coroutines</code>. 7. Libraries: <code>Progress_Bar</code>, <code>Plots</code>, <code>Tables</code>, <code>Curses</code>, <code>GUIs</code>, <code>Scraping</code>, <code>Web</code>, <code>Profiling</code>. 8. Multimedia: <code>NumPy</code>, <code>Image</code>, <code>Animation</code>, <code>Audio</code>, <code>Synthesizer</code>, <code>Pygame</code>, <code>Pandas</code>, <code>Plotly</code>.</p>"},{"location":"python-cheatsheet/#main_1","title":"Main","text":"<pre><code>if __name__ == '__main__':      # Runs main() if file wasn't imported.\n    main()\n</code></pre>"},{"location":"python-cheatsheet/#list_1","title":"List","text":"<pre><code>&lt;list&gt; = &lt;list&gt;[&lt;slice&gt;]        # Or: &lt;list&gt;[from_inclusive : to_exclusive : \u00b1step]\n</code></pre> <pre><code>&lt;list&gt;.append(&lt;el&gt;)             # Or: &lt;list&gt; += [&lt;el&gt;]\n&lt;list&gt;.extend(&lt;collection&gt;)     # Or: &lt;list&gt; += &lt;collection&gt;\n</code></pre> <pre><code>&lt;list&gt;.sort()                   # Sorts in ascending order.\n&lt;list&gt;.reverse()                # Reverses the list in-place.\n&lt;list&gt; = sorted(&lt;collection&gt;)   # Returns a new sorted list.\n&lt;iter&gt; = reversed(&lt;list&gt;)       # Returns reversed iterator.\n</code></pre> <p><pre><code>sum_of_elements  = sum(&lt;collection&gt;)\nelementwise_sum  = [sum(pair) for pair in zip(list_a, list_b)]\nsorted_by_second = sorted(&lt;collection&gt;, key=lambda el: el[1])\nsorted_by_both   = sorted(&lt;collection&gt;, key=lambda el: (el[1], el[0]))\nflatter_list     = list(itertools.chain.from_iterable(&lt;list&gt;))\nproduct_of_elems = functools.reduce(lambda out, el: out * el, &lt;collection&gt;)\nlist_of_chars    = list(&lt;str&gt;)\n</code></pre> * For details about sorted(), min() and max() see sortable. * Module operator provides functions itemgetter() and mul() that offer the same functionality as lambda expressions above.</p> <pre><code>&lt;list&gt;.insert(&lt;int&gt;, &lt;el&gt;)      # Inserts item at index and moves the rest to the right.\n&lt;el&gt;  = &lt;list&gt;.pop([&lt;int&gt;])     # Removes and returns item at index or from the end.\n&lt;int&gt; = &lt;list&gt;.count(&lt;el&gt;)      # Returns number of occurrences. Also works on strings.\n&lt;int&gt; = &lt;list&gt;.index(&lt;el&gt;)      # Returns index of the first occurrence or raises ValueError.\n&lt;list&gt;.remove(&lt;el&gt;)             # Removes first occurrence of the item or raises ValueError.\n&lt;list&gt;.clear()                  # Removes all items. Also works on dictionary and set.\n</code></pre>"},{"location":"python-cheatsheet/#dictionary_1","title":"Dictionary","text":"<pre><code>&lt;view&gt; = &lt;dict&gt;.keys()                          # Coll. of keys that reflects changes.\n&lt;view&gt; = &lt;dict&gt;.values()                        # Coll. of values that reflects changes.\n&lt;view&gt; = &lt;dict&gt;.items()                         # Coll. of key-value tuples that reflects chgs.\n</code></pre> <pre><code>value  = &lt;dict&gt;.get(key, default=None)          # Returns default if key is missing.\nvalue  = &lt;dict&gt;.setdefault(key, default=None)   # Returns and writes default if key is missing.\n&lt;dict&gt; = collections.defaultdict(&lt;type&gt;)        # Returns a dict with default value `&lt;type&gt;()`.\n&lt;dict&gt; = collections.defaultdict(lambda: 1)     # Returns a dict with default value 1.\n</code></pre> <pre><code>&lt;dict&gt; = dict(&lt;collection&gt;)                     # Creates a dict from coll. of key-value pairs.\n&lt;dict&gt; = dict(zip(keys, values))                # Creates a dict from two collections.\n&lt;dict&gt; = dict.fromkeys(keys [, value])          # Creates a dict from collection of keys.\n</code></pre> <pre><code>&lt;dict&gt;.update(&lt;dict&gt;)                           # Adds items. Replaces ones with matching keys.\nvalue = &lt;dict&gt;.pop(key)                         # Removes item or raises KeyError if missing.\n{k for k, v in &lt;dict&gt;.items() if v == value}    # Returns set of keys that point to the value.\n{k: v for k, v in &lt;dict&gt;.items() if k in keys}  # Returns a dictionary, filtered by keys.\n</code></pre>"},{"location":"python-cheatsheet/#counter_1","title":"Counter","text":"<pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; colors = ['blue', 'blue', 'blue', 'red', 'red']\n&gt;&gt;&gt; counter = Counter(colors)\n&gt;&gt;&gt; counter['yellow'] += 1\nCounter({'blue': 3, 'red': 2, 'yellow': 1})\n&gt;&gt;&gt; counter.most_common()[0]\n('blue', 3)\n</code></pre>"},{"location":"python-cheatsheet/#set_1","title":"Set","text":"<pre><code>&lt;set&gt; = set()                                   # `{}` returns a dictionary.\n</code></pre> <pre><code>&lt;set&gt;.add(&lt;el&gt;)                                 # Or: &lt;set&gt; |= {&lt;el&gt;}\n&lt;set&gt;.update(&lt;collection&gt; [, ...])              # Or: &lt;set&gt; |= &lt;set&gt;\n</code></pre> <pre><code>&lt;set&gt;  = &lt;set&gt;.union(&lt;coll.&gt;)                   # Or: &lt;set&gt; | &lt;set&gt;\n&lt;set&gt;  = &lt;set&gt;.intersection(&lt;coll.&gt;)            # Or: &lt;set&gt; &amp; &lt;set&gt;\n&lt;set&gt;  = &lt;set&gt;.difference(&lt;coll.&gt;)              # Or: &lt;set&gt; - &lt;set&gt;\n&lt;set&gt;  = &lt;set&gt;.symmetric_difference(&lt;coll.&gt;)    # Or: &lt;set&gt; ^ &lt;set&gt;\n&lt;bool&gt; = &lt;set&gt;.issubset(&lt;coll.&gt;)                # Or: &lt;set&gt; &lt;= &lt;set&gt;\n&lt;bool&gt; = &lt;set&gt;.issuperset(&lt;coll.&gt;)              # Or: &lt;set&gt; &gt;= &lt;set&gt;\n</code></pre> <pre><code>&lt;el&gt; = &lt;set&gt;.pop()                              # Raises KeyError if empty.\n&lt;set&gt;.remove(&lt;el&gt;)                              # Raises KeyError if missing.\n&lt;set&gt;.discard(&lt;el&gt;)                             # Doesn't raise an error.\n</code></pre>"},{"location":"python-cheatsheet/#frozen-set_1","title":"Frozen Set","text":"<ul> <li>Is immutable and hashable.</li> <li>That means it can be used as a key in a dictionary or as an element in a set. <pre><code>&lt;frozenset&gt; = frozenset(&lt;collection&gt;)\n</code></pre></li> </ul>"},{"location":"python-cheatsheet/#tuple_1","title":"Tuple","text":"<p>Tuple is an immutable and hashable list. <pre><code>&lt;tuple&gt; = ()                               # Empty tuple.\n&lt;tuple&gt; = (&lt;el&gt;,)                          # Or: &lt;el&gt;,\n&lt;tuple&gt; = (&lt;el_1&gt;, &lt;el_2&gt; [, ...])         # Or: &lt;el_1&gt;, &lt;el_2&gt; [, ...]\n</code></pre></p>"},{"location":"python-cheatsheet/#named-tuple_1","title":"Named Tuple","text":"<p>Tuple's subclass with named elements.</p> <pre><code>&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; Point = namedtuple('Point', 'x y')\n&gt;&gt;&gt; p = Point(1, y=2)\nPoint(x=1, y=2)\n&gt;&gt;&gt; p[0]\n1\n&gt;&gt;&gt; p.x\n1\n&gt;&gt;&gt; getattr(p, 'y')\n2\n</code></pre>"},{"location":"python-cheatsheet/#range_1","title":"Range","text":"<p>Immutable and hashable sequence of integers. <pre><code>&lt;range&gt; = range(stop)                      # range(to_exclusive)\n&lt;range&gt; = range(start, stop)               # range(from_inclusive, to_exclusive)\n&lt;range&gt; = range(start, stop, \u00b1step)        # range(from_inclusive, to_exclusive, \u00b1step_size)\n</code></pre></p> <pre><code>&gt;&gt;&gt; [i for i in range(3)]\n[0, 1, 2]\n</code></pre>"},{"location":"python-cheatsheet/#enumerate_1","title":"Enumerate","text":"<pre><code>for i, el in enumerate(&lt;collection&gt; [, i_start]):\n    ...\n</code></pre>"},{"location":"python-cheatsheet/#iterator_2","title":"Iterator","text":"<pre><code>&lt;iter&gt; = iter(&lt;collection&gt;)                # `iter(&lt;iter&gt;)` returns unmodified iterator.\n&lt;iter&gt; = iter(&lt;function&gt;, to_exclusive)    # A sequence of return values until 'to_exclusive'.\n&lt;el&gt;   = next(&lt;iter&gt; [, default])          # Raises StopIteration or returns 'default' on end.\n&lt;list&gt; = list(&lt;iter&gt;)                      # Returns a list of iterator's remaining elements.\n</code></pre>"},{"location":"python-cheatsheet/#itertools_1","title":"Itertools","text":"<pre><code>import itertools as it\n</code></pre> <pre><code>&lt;iter&gt; = it.count(start=0, step=1)         # Returns updated value endlessly. Accepts floats.\n&lt;iter&gt; = it.repeat(&lt;el&gt; [, times])         # Returns element endlessly or 'times' times.\n&lt;iter&gt; = it.cycle(&lt;collection&gt;)            # Repeats the sequence endlessly.\n</code></pre> <pre><code>&lt;iter&gt; = it.chain(&lt;coll&gt;, &lt;coll&gt; [, ...])  # Empties collections in order (figuratively).\n&lt;iter&gt; = it.chain.from_iterable(&lt;coll&gt;)    # Empties collections inside a collection in order.\n</code></pre> <pre><code>&lt;iter&gt; = it.islice(&lt;coll&gt;, to_exclusive)   # Only returns first 'to_exclusive' elements.\n&lt;iter&gt; = it.islice(&lt;coll&gt;, from_inc, \u2026)    # `to_exclusive, +step_size`. Indices can be None.\n</code></pre>"},{"location":"python-cheatsheet/#generator_1","title":"Generator","text":"<ul> <li>Any function that contains a yield statement returns a generator.</li> <li>Generators and iterators are interchangeable.</li> </ul> <pre><code>def count(start, step):\n    while True:\n        yield start\n        start += step\n</code></pre> <pre><code>&gt;&gt;&gt; counter = count(10, 2)\n&gt;&gt;&gt; next(counter), next(counter), next(counter)\n(10, 12, 14)\n</code></pre>"},{"location":"python-cheatsheet/#type_1","title":"Type","text":"<ul> <li>Everything is an object.</li> <li>Every object has a type.</li> <li>Type and class are synonymous.</li> </ul> <pre><code>&lt;type&gt; = type(&lt;el&gt;)                          # Or: &lt;el&gt;.__class__\n&lt;bool&gt; = isinstance(&lt;el&gt;, &lt;type&gt;)            # Or: issubclass(type(&lt;el&gt;), &lt;type&gt;)\n</code></pre> <pre><code>&gt;&gt;&gt; type('a'), 'a'.__class__, str\n(&lt;class 'str'&gt;, &lt;class 'str'&gt;, &lt;class 'str'&gt;)\n</code></pre>"},{"location":"python-cheatsheet/#some-types-do-not-have-built-in-names-so-they-must-be-imported_1","title":"Some types do not have built-in names, so they must be imported:","text":"<pre><code>from types import FunctionType, MethodType, LambdaType, GeneratorType, ModuleType\n</code></pre>"},{"location":"python-cheatsheet/#abstract-base-classes_1","title":"Abstract Base Classes","text":"<p>Each abstract base class specifies a set of virtual subclasses. These classes are then recognized by isinstance() and issubclass() as subclasses of the ABC, although they are really not. ABC can also manually decide whether or not a specific class is its virtual subclass, usually based on which methods the class has implemented. For instance, Iterable ABC looks for method iter(), while Collection ABC looks for iter(), contains() and len().</p> <pre><code>&gt;&gt;&gt; from collections.abc import Iterable, Collection, Sequence\n&gt;&gt;&gt; isinstance([1, 2, 3], Iterable)\nTrue\n</code></pre> <pre><code>+------------------+------------+------------+------------+\n|                  |  Iterable  | Collection |  Sequence  |\n+------------------+------------+------------+------------+\n| list, range, str |    yes     |    yes     |    yes     |\n| dict, set        |    yes     |    yes     |            |\n| iter             |    yes     |            |            |\n+------------------+------------+------------+------------+\n</code></pre> <pre><code>&gt;&gt;&gt; from numbers import Number, Complex, Real, Rational, Integral\n&gt;&gt;&gt; isinstance(123, Number)\nTrue\n</code></pre> <pre><code>+--------------------+----------+----------+----------+----------+----------+\n|                    |  Number  |  Complex |   Real   | Rational | Integral |\n+--------------------+----------+----------+----------+----------+----------+\n| int                |   yes    |   yes    |   yes    |   yes    |   yes    |\n| fractions.Fraction |   yes    |   yes    |   yes    |   yes    |          |\n| float              |   yes    |   yes    |   yes    |          |          |\n| complex            |   yes    |   yes    |          |          |          |\n| decimal.Decimal    |   yes    |          |          |          |          |\n+--------------------+----------+----------+----------+----------+----------+\n</code></pre>"},{"location":"python-cheatsheet/#string_1","title":"String","text":"<p>Immutable sequence of characters.</p> <pre><code>&lt;str&gt;  = &lt;str&gt;.strip()                       # Strips all whitespace characters from both ends.\n&lt;str&gt;  = &lt;str&gt;.strip('&lt;chars&gt;')              # Strips passed characters. Also lstrip/rstrip().\n</code></pre> <pre><code>&lt;list&gt; = &lt;str&gt;.split()                       # Splits on one or more whitespace characters.\n&lt;list&gt; = &lt;str&gt;.split(sep=None, maxsplit=-1)  # Splits on 'sep' str at most 'maxsplit' times.\n&lt;list&gt; = &lt;str&gt;.splitlines(keepends=False)    # On [\\n\\r\\f\\v\\x1c-\\x1e\\x85\\u2028\\u2029] and \\r\\n.\n&lt;str&gt;  = &lt;str&gt;.join(&lt;coll_of_strings&gt;)       # Joins elements using string as a separator.\n</code></pre> <pre><code>&lt;bool&gt; = &lt;sub_str&gt; in &lt;str&gt;                  # Checks if string contains the substring.\n&lt;bool&gt; = &lt;str&gt;.startswith(&lt;sub_str&gt;)         # Pass tuple of strings for multiple options.\n&lt;int&gt;  = &lt;str&gt;.find(&lt;sub_str&gt;)               # Returns start index of the first match or -1.\n&lt;int&gt;  = &lt;str&gt;.index(&lt;sub_str&gt;)              # Same, but raises ValueError if missing.\n</code></pre> <pre><code>&lt;str&gt;  = &lt;str&gt;.lower()                       # Changes the case. Also upper/capitalize/title().\n&lt;str&gt;  = &lt;str&gt;.replace(old, new [, count])   # Replaces 'old' with 'new' at most 'count' times.\n&lt;str&gt;  = &lt;str&gt;.translate(&lt;table&gt;)            # Use `str.maketrans(&lt;dict&gt;)` to generate table.\n</code></pre> <p><pre><code>&lt;str&gt;  = chr(&lt;int&gt;)                          # Converts int to Unicode character.\n&lt;int&gt;  = ord(&lt;str&gt;)                          # Converts Unicode character to int.\n</code></pre> * Use <code>'unicodedata.normalize(\"NFC\", &lt;str&gt;)'</code> on strings like <code>'Mot\u00f6rhead'</code> before comparing them to other strings, because <code>'\u00f6'</code> can be stored as one or two characters. * <code>'NFC'</code> converts such characters to a single character, while <code>'NFD'</code> converts them to two.</p>"},{"location":"python-cheatsheet/#property-methods_1","title":"Property Methods","text":"<pre><code>&lt;bool&gt; = &lt;str&gt;.isdecimal()                   # Checks for [0-9]. Also [\u0966-\u096f] and [\u0660-\u0669].\n&lt;bool&gt; = &lt;str&gt;.isdigit()                     # Checks for [\u00b2\u00b3\u00b9\u2026] and isdecimal().\n&lt;bool&gt; = &lt;str&gt;.isnumeric()                   # Checks for [\u00bc\u00bd\u00be], [\u96f6\u3007\u4e00\u2026] and isdigit().\n&lt;bool&gt; = &lt;str&gt;.isalnum()                     # Checks for [a-zA-Z\u2026] and isnumeric().\n&lt;bool&gt; = &lt;str&gt;.isprintable()                 # Checks for [ !#$%\u2026] and isalnum().\n&lt;bool&gt; = &lt;str&gt;.isspace()                     # Checks for [ \\t\\n\\r\\f\\v\\x1c-\\x1f\\x85\\xa0\u2026].\n</code></pre>"},{"location":"python-cheatsheet/#regex_1","title":"Regex","text":"<p>Functions for regular expression matching.</p> <pre><code>import re\n&lt;str&gt;   = re.sub(&lt;regex&gt;, new, text, count=0)  # Substitutes all occurrences with 'new'.\n&lt;list&gt;  = re.findall(&lt;regex&gt;, text)            # Returns all occurrences as strings.\n&lt;list&gt;  = re.split(&lt;regex&gt;, text, maxsplit=0)  # Add brackets around regex to include matches.\n&lt;Match&gt; = re.search(&lt;regex&gt;, text)             # First occurrence of the pattern or None.\n&lt;Match&gt; = re.match(&lt;regex&gt;, text)              # Searches only at the beginning of the text.\n&lt;iter&gt;  = re.finditer(&lt;regex&gt;, text)           # Returns all occurrences as Match objects.\n</code></pre> <ul> <li>Argument 'new' can be a function that accepts a Match object and returns a string.</li> <li>Argument <code>'flags=re.IGNORECASE'</code> can be used with all functions.</li> <li>Argument <code>'flags=re.MULTILINE'</code> makes <code>'^'</code> and <code>'$'</code> match the start/end of each line.</li> <li>Argument <code>'flags=re.DOTALL'</code> makes <code>'.'</code> also accept the <code>'\\n'</code>.</li> <li>Use <code>r'\\1'</code> or <code>'\\\\1'</code> for backreference (<code>'\\1'</code> returns a character with octal code 1).</li> <li>Add <code>'?'</code> after <code>'*'</code> and <code>'+'</code> to make them non-greedy.</li> <li><code>'re.compile(&lt;regex&gt;)'</code> returns a Pattern object with listed methods.</li> </ul>"},{"location":"python-cheatsheet/#match-object_1","title":"Match Object","text":"<pre><code>&lt;str&gt;   = &lt;Match&gt;.group()                      # Returns the whole match. Also group(0).\n&lt;str&gt;   = &lt;Match&gt;.group(1)                     # Returns part inside the first brackets.\n&lt;tuple&gt; = &lt;Match&gt;.groups()                     # Returns all bracketed parts.\n&lt;int&gt;   = &lt;Match&gt;.start()                      # Returns start index of the match.\n&lt;int&gt;   = &lt;Match&gt;.end()                        # Returns exclusive end index of the match.\n</code></pre>"},{"location":"python-cheatsheet/#special-sequences_1","title":"Special Sequences","text":"<pre><code>'\\d' == '[0-9]'                                # Also [\u0966-\u096f\u2026]. Matches a decimal character.\n'\\w' == '[a-zA-Z0-9_]'                         # Also [\u00aa\u00b2\u00b3\u2026]. Matches an alphanumeric or _.\n'\\s' == '[ \\t\\n\\r\\f\\v]'                        # Also [\\x1c-\\x1f\u2026]. Matches a whitespace.\n</code></pre> <ul> <li>By default, decimal characters, alphanumerics and whitespaces from all alphabets are matched unless <code>'flags=re.ASCII'</code> argument is used.</li> <li>It restricts special sequence matches to <code>'[\\x00-\\x7f]'</code> (the first 128 characters) and also prevents <code>'\\s'</code> from accepting <code>'[\\x1c-\\x1f]'</code> (the so-called separator characters).</li> <li>Use a capital letter for negation (all non-ASCII characters will be matched when used in combination with ASCII flag).</li> </ul>"},{"location":"python-cheatsheet/#format_3","title":"Format","text":"<pre><code>&lt;str&gt; = f'{&lt;el_1&gt;}, {&lt;el_2&gt;}'            # Curly brackets can also contain expressions.\n&lt;str&gt; = '{}, {}'.format(&lt;el_1&gt;, &lt;el_2&gt;)  # Or: '{0}, {a}'.format(&lt;el_1&gt;, a=&lt;el_2&gt;)\n&lt;str&gt; = '%s, %s' % (&lt;el_1&gt;, &lt;el_2&gt;)      # Redundant and inferior C-style formatting.\n</code></pre>"},{"location":"python-cheatsheet/#example_4","title":"Example","text":"<pre><code>&gt;&gt;&gt; Person = collections.namedtuple('Person', 'name height')\n&gt;&gt;&gt; person = Person('Jean-Luc', 187)\n&gt;&gt;&gt; f'{person.name} is {person.height / 100} meters tall.'\n'Jean-Luc is 1.87 meters tall.'\n</code></pre>"},{"location":"python-cheatsheet/#general-options_1","title":"General Options","text":"<p><pre><code>{&lt;el&gt;:&lt;10}                               # '&lt;el&gt;      '\n{&lt;el&gt;:^10}                               # '   &lt;el&gt;   '\n{&lt;el&gt;:&gt;10}                               # '      &lt;el&gt;'\n{&lt;el&gt;:.&lt;10}                              # '&lt;el&gt;......'\n{&lt;el&gt;:0}                                 # '&lt;el&gt;'\n</code></pre> * Objects are rendered using <code>'format(&lt;el&gt;, &lt;options&gt;)'</code>. * Options can be generated dynamically: <code>f'{&lt;el&gt;:{&lt;str/int&gt;}[\u2026]}'</code>. * Adding <code>'='</code> to the expression prepends it to the output: <code>f'{1+1=}'</code> returns <code>'1+1=2'</code>. * Adding <code>'!r'</code> to the expression converts object to string by calling its repr() method.</p>"},{"location":"python-cheatsheet/#strings_1","title":"Strings","text":"<pre><code>{'abcde':10}                             # 'abcde     '\n{'abcde':10.3}                           # 'abc       '\n{'abcde':.3}                             # 'abc'\n{'abcde'!r:10}                           # \"'abcde'   \"\n</code></pre>"},{"location":"python-cheatsheet/#numbers_2","title":"Numbers","text":"<pre><code>{123456:10}                              # '    123456'\n{123456:10,}                             # '   123,456'\n{123456:10_}                             # '   123_456'\n{123456:+10}                             # '   +123456'\n{123456:=+10}                            # '+   123456'\n{123456: }                               # ' 123456'\n{-123456: }                              # '-123456'\n</code></pre>"},{"location":"python-cheatsheet/#floats_1","title":"Floats","text":"<pre><code>{1.23456:10.3}                           # '      1.23'\n{1.23456:10.3f}                          # '     1.235'\n{1.23456:10.3e}                          # ' 1.235e+00'\n{1.23456:10.3%}                          # '  123.456%'\n</code></pre>"},{"location":"python-cheatsheet/#comparison-of-presentation-types_1","title":"Comparison of presentation types:","text":"<pre><code>+--------------+----------------+----------------+----------------+----------------+\n|              |    {&lt;float&gt;}   |   {&lt;float&gt;:f}  |   {&lt;float&gt;:e}  |   {&lt;float&gt;:%}  |\n+--------------+----------------+----------------+----------------+----------------+\n|  0.000056789 |   '5.6789e-05' |    '0.000057'  | '5.678900e-05' |    '0.005679%' |\n|  0.00056789  |   '0.00056789' |    '0.000568'  | '5.678900e-04' |    '0.056789%' |\n|  0.0056789   |   '0.0056789'  |    '0.005679'  | '5.678900e-03' |    '0.567890%' |\n|  0.056789    |   '0.056789'   |    '0.056789'  | '5.678900e-02' |    '5.678900%' |\n|  0.56789     |   '0.56789'    |    '0.567890'  | '5.678900e-01' |   '56.789000%' |\n|  5.6789      |   '5.6789'     |    '5.678900'  | '5.678900e+00' |  '567.890000%' |\n| 56.789       |  '56.789'      |   '56.789000'  | '5.678900e+01' | '5678.900000%' |\n+--------------+----------------+----------------+----------------+----------------+\n</code></pre> <p><pre><code>+--------------+----------------+----------------+----------------+----------------+\n|              |  {&lt;float&gt;:.2}  |  {&lt;float&gt;:.2f} |  {&lt;float&gt;:.2e} |  {&lt;float&gt;:.2%} |\n+--------------+----------------+----------------+----------------+----------------+\n|  0.000056789 |    '5.7e-05'   |      '0.00'    |   '5.68e-05'   |      '0.01%'   |\n|  0.00056789  |    '0.00057'   |      '0.00'    |   '5.68e-04'   |      '0.06%'   |\n|  0.0056789   |    '0.0057'    |      '0.01'    |   '5.68e-03'   |      '0.57%'   |\n|  0.056789    |    '0.057'     |      '0.06'    |   '5.68e-02'   |      '5.68%'   |\n|  0.56789     |    '0.57'      |      '0.57'    |   '5.68e-01'   |     '56.79%'   |\n|  5.6789      |    '5.7'       |      '5.68'    |   '5.68e+00'   |    '567.89%'   |\n| 56.789       |    '5.7e+01'   |     '56.79'    |   '5.68e+01'   |   '5678.90%'   |\n+--------------+----------------+----------------+----------------+----------------+\n</code></pre> * <code>'{&lt;float&gt;:g}'</code> is <code>'{&lt;float&gt;:.6}'</code> with stripped zeros, exponent starting at <code>'1e+06'</code>. * When both rounding up and rounding down are possible, the one that returns result with even last digit is chosen. That makes <code>'{6.5:.0f}'</code> a <code>'6'</code> and <code>'{7.5:.0f}'</code> an <code>'8'</code>. * This rule only effects numbers that can be represented exactly by a float (<code>.5</code>, <code>.25</code>, \u2026).</p>"},{"location":"python-cheatsheet/#ints_1","title":"Ints","text":"<pre><code>{90:c}                                   # 'Z'\n{90:b}                                   # '1011010'\n{90:X}                                   # '5A'\n</code></pre>"},{"location":"python-cheatsheet/#numbers_3","title":"Numbers","text":"<p><pre><code>&lt;int&gt;      = int(&lt;float/str/bool&gt;)                # Or: math.floor(&lt;float&gt;)\n&lt;float&gt;    = float(&lt;int/str/bool&gt;)                # Or: &lt;int/float&gt;e\u00b1&lt;int&gt;\n&lt;complex&gt;  = complex(real=0, imag=0)              # Or: &lt;int/float&gt; \u00b1 &lt;int/float&gt;j\n&lt;Fraction&gt; = fractions.Fraction(0, 1)             # Or: Fraction(numerator=0, denominator=1)\n&lt;Decimal&gt;  = decimal.Decimal(&lt;str/int&gt;)           # Or: Decimal((sign, digits, exponent))\n</code></pre> * <code>'int(&lt;str&gt;)'</code> and <code>'float(&lt;str&gt;)'</code> raise ValueError on malformed strings. * Decimal numbers are stored exactly, unlike most floats where <code>'1.1 + 2.2 != 3.3'</code>. * Floats can be compared with: <code>'math.isclose(&lt;float&gt;, &lt;float&gt;)'</code>. * Precision of decimal operations is set with: <code>'decimal.getcontext().prec = &lt;int&gt;'</code>.</p>"},{"location":"python-cheatsheet/#basic-functions_1","title":"Basic Functions","text":"<pre><code>&lt;num&gt; = pow(&lt;num&gt;, &lt;num&gt;)                         # Or: &lt;num&gt; ** &lt;num&gt;\n&lt;num&gt; = abs(&lt;num&gt;)                                # &lt;float&gt; = abs(&lt;complex&gt;)\n&lt;num&gt; = round(&lt;num&gt; [, \u00b1ndigits])                 # `round(126, -1) == 130`\n</code></pre>"},{"location":"python-cheatsheet/#math_1","title":"Math","text":"<pre><code>from math import e, pi, inf, nan, isinf, isnan    # `&lt;el&gt; == nan` is always False.\nfrom math import sin, cos, tan, asin, acos, atan  # Also: degrees, radians.\nfrom math import log, log10, log2                 # Log can accept base as second arg.\n</code></pre>"},{"location":"python-cheatsheet/#statistics_1","title":"Statistics","text":"<pre><code>from statistics import mean, median, variance     # Also: stdev, quantiles, groupby.\n</code></pre>"},{"location":"python-cheatsheet/#random_1","title":"Random","text":"<pre><code>from random import random, randint, choice        # Also: shuffle, gauss, triangular, seed.\n&lt;float&gt; = random()                                # A float inside [0, 1).\n&lt;int&gt;   = randint(from_inc, to_inc)               # An int inside [from_inc, to_inc].\n&lt;el&gt;    = choice(&lt;sequence&gt;)                      # Keeps the sequence intact.\n</code></pre>"},{"location":"python-cheatsheet/#bin-hex_1","title":"Bin, Hex","text":"<pre><code>&lt;int&gt; = \u00b10b&lt;bin&gt;                                  # Or: \u00b10x&lt;hex&gt;\n&lt;int&gt; = int('\u00b1&lt;bin&gt;', 2)                          # Or: int('\u00b1&lt;hex&gt;', 16)\n&lt;int&gt; = int('\u00b10b&lt;bin&gt;', 0)                        # Or: int('\u00b10x&lt;hex&gt;', 0)\n&lt;str&gt; = bin(&lt;int&gt;)                                # Returns '[-]0b&lt;bin&gt;'.\n</code></pre>"},{"location":"python-cheatsheet/#bitwise-operators_1","title":"Bitwise Operators","text":"<pre><code>&lt;int&gt; = &lt;int&gt; &amp; &lt;int&gt;                             # And (0b1100 &amp; 0b1010 == 0b1000).\n&lt;int&gt; = &lt;int&gt; | &lt;int&gt;                             # Or  (0b1100 | 0b1010 == 0b1110).\n&lt;int&gt; = &lt;int&gt; ^ &lt;int&gt;                             # Xor (0b1100 ^ 0b1010 == 0b0110).\n&lt;int&gt; = &lt;int&gt; &lt;&lt; n_bits                           # Left shift. Use &gt;&gt; for right.\n&lt;int&gt; = ~&lt;int&gt;                                    # Not. Also -&lt;int&gt; - 1.\n</code></pre>"},{"location":"python-cheatsheet/#combinatorics_1","title":"Combinatorics","text":"<pre><code>import itertools as it\n</code></pre> <pre><code>&gt;&gt;&gt; list(it.product([0, 1], repeat=3))\n[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1),\n (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]\n</code></pre> <pre><code>&gt;&gt;&gt; list(it.product('abc', 'abc'))                    #   a  b  c\n[('a', 'a'), ('a', 'b'), ('a', 'c'),                  # a x  x  x\n ('b', 'a'), ('b', 'b'), ('b', 'c'),                  # b x  x  x\n ('c', 'a'), ('c', 'b'), ('c', 'c')]                  # c x  x  x\n</code></pre> <pre><code>&gt;&gt;&gt; list(it.combinations('abc', 2))                   #   a  b  c\n[('a', 'b'), ('a', 'c'),                              # a .  x  x\n ('b', 'c')]                                          # b .  .  x\n</code></pre> <pre><code>&gt;&gt;&gt; list(it.combinations_with_replacement('abc', 2))  #   a  b  c\n[('a', 'a'), ('a', 'b'), ('a', 'c'),                  # a x  x  x\n ('b', 'b'), ('b', 'c'),                              # b .  x  x\n ('c', 'c')]                                          # c .  .  x\n</code></pre> <pre><code>&gt;&gt;&gt; list(it.permutations('abc', 2))                   #   a  b  c\n[('a', 'b'), ('a', 'c'),                              # a .  x  x\n ('b', 'a'), ('b', 'c'),                              # b x  .  x\n ('c', 'a'), ('c', 'b')]                              # c x  x  .\n</code></pre>"},{"location":"python-cheatsheet/#datetime_1","title":"Datetime","text":"<p>Provides 'date', 'time', 'datetime' and 'timedelta' classes. All are immutable and hashable.</p> <pre><code># $ pip3 install python-dateutil\nfrom datetime import date, time, datetime, timedelta, timezone\nfrom dateutil.tz import tzlocal, gettz\n</code></pre> <p><pre><code>&lt;D&gt;  = date(year, month, day)               # Only accepts valid dates from 1 to 9999 AD.\n&lt;T&gt;  = time(hour=0, minute=0, second=0)     # Also: `microsecond=0, tzinfo=None, fold=0`.\n&lt;DT&gt; = datetime(year, month, day, hour=0)   # Also: `minute=0, second=0, microsecond=0, \u2026`.\n&lt;TD&gt; = timedelta(weeks=0, days=0, hours=0)  # Also: `minutes=0, seconds=0, microseconds=0`.\n</code></pre> * Aware <code>&lt;a&gt;</code> time and datetime objects have defined timezone, while naive <code>&lt;n&gt;</code> don't. If object is naive, it is presumed to be in the system's timezone! * <code>'fold=1'</code> means the second pass in case of time jumping back for one hour. * Timedelta normalizes arguments to \u00b1days, seconds (&lt; 86\u202f400) and microseconds (&lt; 1M). * Use <code>'&lt;D/DT&gt;.weekday()'</code> to get the day of the week as an int, with Monday being 0.</p>"},{"location":"python-cheatsheet/#now_1","title":"Now","text":"<p><pre><code>&lt;D/DTn&gt;  = D/DT.today()                     # Current local date or naive DT. Also DT.now().\n&lt;DTa&gt;    = DT.now(&lt;tzinfo&gt;)                 # Aware DT from current time in passed timezone.\n</code></pre> * To extract time use <code>'&lt;DTn&gt;.time()'</code>, <code>'&lt;DTa&gt;.time()'</code> or <code>'&lt;DTa&gt;.timetz()'</code>.</p>"},{"location":"python-cheatsheet/#timezone_1","title":"Timezone","text":"<p><pre><code>&lt;tzinfo&gt; = timezone.utc                     # London without daylight saving time (DST).\n&lt;tzinfo&gt; = timezone(&lt;timedelta&gt;)            # Timezone with fixed offset from UTC.\n&lt;tzinfo&gt; = tzlocal()                        # Local tz with dynamic offset. Also gettz().\n&lt;tzinfo&gt; = gettz('&lt;Continent&gt;/&lt;City&gt;')      # 'Continent/City_Name' timezone or None.\n&lt;DTa&gt;    = &lt;DT&gt;.astimezone([&lt;tzinfo&gt;])      # Converts DT to the passed or local fixed zone.\n&lt;Ta/DTa&gt; = &lt;T/DT&gt;.replace(tzinfo=&lt;tzinfo&gt;)  # Changes object's timezone without conversion.\n</code></pre> * Timezones returned by gettz(), tzlocal(), and implicit local timezone of naive objects have offsets that vary through time due to DST and historical changes of the zone's base offset. * Standard library's zoneinfo.ZoneInfo() can be used instead of gettz() on Python 3.9 and later. It requires 'tzdata' package on Windows. It doesn't return local tz if arg. is omitted.</p>"},{"location":"python-cheatsheet/#encode_2","title":"Encode","text":"<p><pre><code>&lt;D/T/DT&gt; = D/T/DT.fromisoformat(&lt;str&gt;)      # Object from ISO string. Raises ValueError.\n&lt;DT&gt;     = DT.strptime(&lt;str&gt;, '&lt;format&gt;')   # Datetime from str, according to format.\n&lt;D/DTn&gt;  = D/DT.fromordinal(&lt;int&gt;)          # D/DTn from days since the Gregorian NYE 1.\n&lt;DTn&gt;    = DT.fromtimestamp(&lt;float&gt;)        # Local time DTn from seconds since the Epoch.\n&lt;DTa&gt;    = DT.fromtimestamp(&lt;float&gt;, &lt;tz&gt;)  # Aware datetime from seconds since the Epoch.\n</code></pre> * ISO strings come in following forms: <code>'YYYY-MM-DD'</code>, <code>'HH:MM:SS.mmmuuu[\u00b1HH:MM]'</code>, or both separated by an arbitrary character. All parts following the hours are optional. * Python uses the Unix Epoch: <code>'1970-01-01 00:00 UTC'</code>, <code>'1970-01-01 01:00 CET'</code>, ...</p>"},{"location":"python-cheatsheet/#decode_2","title":"Decode","text":"<pre><code>&lt;str&gt;    = &lt;D/T/DT&gt;.isoformat(sep='T')      # Also `timespec='auto/hours/minutes/seconds/\u2026'`.\n&lt;str&gt;    = &lt;D/T/DT&gt;.strftime('&lt;format&gt;')    # Custom string representation of the object.\n&lt;int&gt;    = &lt;D/DT&gt;.toordinal()               # Days since Gregorian NYE 1, ignoring time and tz.\n&lt;float&gt;  = &lt;DTn&gt;.timestamp()                # Seconds since the Epoch, from DTn in local tz.\n&lt;float&gt;  = &lt;DTa&gt;.timestamp()                # Seconds since the Epoch, from aware datetime.\n</code></pre>"},{"location":"python-cheatsheet/#format_4","title":"Format","text":"<p><pre><code>&gt;&gt;&gt; dt = datetime.strptime('2025-08-14 23:39:00.00 +0200', '%Y-%m-%d %H:%M:%S.%f %z')\n&gt;&gt;&gt; dt.strftime(\"%dth of %B '%y (%a), %I:%M %p %Z\")\n\"14th of August '25 (Thu), 11:39 PM UTC+02:00\"\n</code></pre> * <code>'%z'</code> accepts <code>'\u00b1HH[:]MM'</code> and returns <code>'\u00b1HHMM'</code> or empty string if datetime is naive. * <code>'%Z'</code> accepts <code>'UTC/GMT'</code> and local timezone's code and returns timezone's name, <code>'UTC[\u00b1HH:MM]'</code> if timezone is nameless, or an empty string if datetime is naive.</p>"},{"location":"python-cheatsheet/#arithmetics_1","title":"Arithmetics","text":"<pre><code>&lt;bool&gt;   = &lt;D/T/DTn&gt; &gt; &lt;D/T/DTn&gt;            # Ignores time jumps (fold attribute). Also ==.\n&lt;bool&gt;   = &lt;DTa&gt;     &gt; &lt;DTa&gt;                # Ignores time jumps if they share tzinfo object.\n&lt;TD&gt;     = &lt;D/DTn&gt;   - &lt;D/DTn&gt;              # Ignores jumps. Convert to UTC for actual delta.\n&lt;TD&gt;     = &lt;DTa&gt;     - &lt;DTa&gt;                # Ignores time jumps if they share tzinfo object.\n&lt;D/DT&gt;   = &lt;D/DT&gt;    \u00b1 &lt;TD&gt;                 # Returned datetime can fall into missing hour.\n&lt;TD&gt;     = &lt;TD&gt;      * &lt;float&gt;              # Also: &lt;TD&gt; = abs(&lt;TD&gt;) and &lt;TD&gt; = &lt;TD&gt; \u00b1% &lt;TD&gt;.\n&lt;float&gt;  = &lt;TD&gt;      / &lt;TD&gt;                 # How many hours/weeks/years are in TD. Also //.\n</code></pre>"},{"location":"python-cheatsheet/#arguments_1","title":"Arguments","text":""},{"location":"python-cheatsheet/#inside-function-call_2","title":"Inside Function Call","text":"<pre><code>func(&lt;positional_args&gt;)                           # func(0, 0)\nfunc(&lt;keyword_args&gt;)                              # func(x=0, y=0)\nfunc(&lt;positional_args&gt;, &lt;keyword_args&gt;)           # func(0, y=0)\n</code></pre>"},{"location":"python-cheatsheet/#inside-function-definition_2","title":"Inside Function Definition","text":"<p><pre><code>def func(&lt;nondefault_args&gt;): ...                  # def func(x, y): ...\ndef func(&lt;default_args&gt;): ...                     # def func(x=0, y=0): ...\ndef func(&lt;nondefault_args&gt;, &lt;default_args&gt;): ...  # def func(x, y=0): ...\n</code></pre> * Default values are evaluated when function is first encountered in the scope. * Any mutation of a mutable default value will persist between invocations!</p>"},{"location":"python-cheatsheet/#splat-operator_1","title":"Splat Operator","text":""},{"location":"python-cheatsheet/#inside-function-call_3","title":"Inside Function Call","text":"<p>Splat expands a collection into positional arguments, while splatty-splat expands a dictionary into keyword arguments. <pre><code>args   = (1, 2)\nkwargs = {'x': 3, 'y': 4, 'z': 5}\nfunc(*args, **kwargs)\n</code></pre></p>"},{"location":"python-cheatsheet/#is-the-same-as_1","title":"Is the same as:","text":"<pre><code>func(1, 2, x=3, y=4, z=5)\n</code></pre>"},{"location":"python-cheatsheet/#inside-function-definition_3","title":"Inside Function Definition","text":"<p>Splat combines zero or more positional arguments into a tuple, while splatty-splat combines zero or more keyword arguments into a dictionary. <pre><code>def add(*a):\n    return sum(a)\n</code></pre></p> <pre><code>&gt;&gt;&gt; add(1, 2, 3)\n6\n</code></pre>"},{"location":"python-cheatsheet/#legal-argument-combinations_1","title":"Legal argument combinations:","text":"<pre><code>def f(*args): ...               # f(1, 2, 3)\ndef f(x, *args): ...            # f(1, 2, 3)\ndef f(*args, z): ...            # f(1, 2, z=3)\n</code></pre> <pre><code>def f(**kwargs): ...            # f(x=1, y=2, z=3)\ndef f(x, **kwargs): ...         # f(x=1, y=2, z=3) | f(1, y=2, z=3)\n</code></pre> <pre><code>def f(*args, **kwargs): ...     # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)\ndef f(x, *args, **kwargs): ...  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)\ndef f(*args, y, **kwargs): ...  # f(x=1, y=2, z=3) | f(1, y=2, z=3)\n</code></pre> <pre><code>def f(*, x, y, z): ...          # f(x=1, y=2, z=3)\ndef f(x, *, y, z): ...          # f(x=1, y=2, z=3) | f(1, y=2, z=3)\ndef f(x, y, *, z): ...          # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)\n</code></pre>"},{"location":"python-cheatsheet/#other-uses_1","title":"Other Uses","text":"<pre><code>&lt;list&gt;  = [*&lt;coll.&gt; [, ...]]    # Or: list(&lt;collection&gt;) [+ ...]\n&lt;tuple&gt; = (*&lt;coll.&gt;, [...])     # Or: tuple(&lt;collection&gt;) [+ ...]\n&lt;set&gt;   = {*&lt;coll.&gt; [, ...]}    # Or: set(&lt;collection&gt;) [| ...]\n&lt;dict&gt;  = {**&lt;dict&gt; [, ...]}    # Or: dict(&lt;dict&gt;) [| ...] (since 3.9)\n</code></pre> <pre><code>head, *body, tail = &lt;coll.&gt;     # Head or tail can be omitted.\n</code></pre>"},{"location":"python-cheatsheet/#inline_3","title":"Inline","text":""},{"location":"python-cheatsheet/#lambda_1","title":"Lambda","text":"<pre><code>&lt;func&gt; = lambda: &lt;return_value&gt;                     # A single statement function.\n&lt;func&gt; = lambda &lt;arg_1&gt;, &lt;arg_2&gt;: &lt;return_value&gt;    # Also accepts default arguments.\n</code></pre>"},{"location":"python-cheatsheet/#comprehensions_1","title":"Comprehensions","text":"<pre><code>&lt;list&gt; = [i+1 for i in range(10)]                   # Or: [1, 2, ..., 10]\n&lt;iter&gt; = (i for i in range(10) if i &gt; 5)            # Or: iter([6, 7, 8, 9])\n&lt;set&gt;  = {i+5 for i in range(10)}                   # Or: {5, 6, ..., 14}\n&lt;dict&gt; = {i: i*2 for i in range(10)}                # Or: {0: 0, 1: 2, ..., 9: 18}\n</code></pre> <pre><code>&gt;&gt;&gt; [l+r for l in 'abc' for r in 'abc']\n['aa', 'ab', 'ac', ..., 'cc']\n</code></pre>"},{"location":"python-cheatsheet/#map-filter-reduce_1","title":"Map, Filter, Reduce","text":"<pre><code>from functools import reduce\n</code></pre> <pre><code>&lt;iter&gt; = map(lambda x: x + 1, range(10))            # Or: iter([1, 2, ..., 10])\n&lt;iter&gt; = filter(lambda x: x &gt; 5, range(10))         # Or: iter([6, 7, 8, 9])\n&lt;obj&gt;  = reduce(lambda out, x: out + x, range(10))  # Or: 45\n</code></pre>"},{"location":"python-cheatsheet/#any-all_1","title":"Any, All","text":"<pre><code>&lt;bool&gt; = any(&lt;collection&gt;)                          # Is `bool(&lt;el&gt;)` True for any element.\n&lt;bool&gt; = all(&lt;collection&gt;)                          # Is True for all elements or empty.\n</code></pre>"},{"location":"python-cheatsheet/#conditional-expression_1","title":"Conditional Expression","text":"<pre><code>&lt;obj&gt; = &lt;exp&gt; if &lt;condition&gt; else &lt;exp&gt;             # Only one expression gets evaluated.\n</code></pre> <pre><code>&gt;&gt;&gt; [a if a else 'zero' for a in (0, 1, 2, 3)]      # `any([0, '', [], None]) == False`\n['zero', 1, 2, 3]\n</code></pre>"},{"location":"python-cheatsheet/#named-tuple-enum-dataclass_1","title":"Named Tuple, Enum, Dataclass","text":"<pre><code>from collections import namedtuple\nPoint = namedtuple('Point', 'x y')                  # Creates a tuple's subclass.\npoint = Point(0, 0)                                 # Returns its instance.\n</code></pre> <pre><code>from enum import Enum\nDirection = Enum('Direction', 'N E S W')            # Creates an enum.\ndirection = Direction.N                             # Returns its member.\n</code></pre> <pre><code>from dataclasses import make_dataclass\nPlayer = make_dataclass('Player', ['loc', 'dir'])   # Creates a class.\nplayer = Player(point, direction)                   # Returns its instance.\n</code></pre>"},{"location":"python-cheatsheet/#imports_1","title":"Imports","text":"<p><pre><code>import &lt;module&gt;            # Imports a built-in or '&lt;module&gt;.py'.\nimport &lt;package&gt;           # Imports a built-in or '&lt;package&gt;/__init__.py'.\nimport &lt;package&gt;.&lt;module&gt;  # Imports a built-in or '&lt;package&gt;/&lt;module&gt;.py'.\n</code></pre> * Package is a collection of modules, but it can also define its own objects. * On a filesystem this corresponds to a directory of Python files with an optional init script. * Running <code>'import &lt;package&gt;'</code> does not automatically provide access to the package's modules unless they are explicitly imported in its init script.</p>"},{"location":"python-cheatsheet/#closure_1","title":"Closure","text":"<p>We have/get a closure in Python when: * A nested function references a value of its enclosing function and then * the enclosing function returns the nested function.</p> <pre><code>def get_multiplier(a):\n    def out(b):\n        return a * b\n    return out\n</code></pre> <pre><code>&gt;&gt;&gt; multiply_by_3 = get_multiplier(3)\n&gt;&gt;&gt; multiply_by_3(10)\n30\n</code></pre> <ul> <li>If multiple nested functions within enclosing function reference the same value, that value gets shared.</li> <li>To dynamically access function's first free variable use <code>'&lt;function&gt;.__closure__[0].cell_contents'</code>.</li> </ul>"},{"location":"python-cheatsheet/#partial_1","title":"Partial","text":"<pre><code>from functools import partial\n&lt;function&gt; = partial(&lt;function&gt; [, &lt;arg_1&gt;, &lt;arg_2&gt;, ...])\n</code></pre> <p><pre><code>&gt;&gt;&gt; def multiply(a, b):\n...     return a * b\n&gt;&gt;&gt; multiply_by_3 = partial(multiply, 3)\n&gt;&gt;&gt; multiply_by_3(10)\n30\n</code></pre> * Partial is also useful in cases when function needs to be passed as an argument because it enables us to set its arguments beforehand. * A few examples being: <code>'defaultdict(&lt;func&gt;)'</code>, <code>'iter(&lt;func&gt;, to_exc)'</code> and dataclass's <code>'field(default_factory=&lt;func&gt;)'</code>.</p>"},{"location":"python-cheatsheet/#non-local_1","title":"Non-Local","text":"<p>If variable is being assigned to anywhere in the scope, it is regarded as a local variable, unless it is declared as a 'global' or a 'nonlocal'.</p> <pre><code>def get_counter():\n    i = 0\n    def out():\n        nonlocal i\n        i += 1\n        return i\n    return out\n</code></pre> <pre><code>&gt;&gt;&gt; counter = get_counter()\n&gt;&gt;&gt; counter(), counter(), counter()\n(1, 2, 3)\n</code></pre>"},{"location":"python-cheatsheet/#decorator_1","title":"Decorator","text":"<ul> <li>A decorator takes a function, adds some functionality and returns it.</li> <li>It can be any callable, but is usually implemented as a function that returns a closure.</li> </ul> <pre><code>@decorator_name\ndef function_that_gets_passed_to_decorator():\n    ...\n</code></pre>"},{"location":"python-cheatsheet/#debugger-example_1","title":"Debugger Example","text":"<p>Decorator that prints function's name every time the function is called.</p> <p><pre><code>from functools import wraps\n\ndef debug(func):\n    @wraps(func)\n    def out(*args, **kwargs):\n        print(func.__name__)\n        return func(*args, **kwargs)\n    return out\n\n@debug\ndef add(x, y):\n    return x + y\n</code></pre> * Wraps is a helper decorator that copies the metadata of the passed function (func) to the function it is wrapping (out). * Without it, <code>'add.__name__'</code> would return <code>'out'</code>.</p>"},{"location":"python-cheatsheet/#lru-cache_1","title":"LRU Cache","text":"<p>Decorator that caches function's return values. All function's arguments must be hashable.</p> <p><pre><code>from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    return n if n &lt; 2 else fib(n-2) + fib(n-1)\n</code></pre> * Default size of the cache is 128 values. Passing <code>'maxsize=None'</code> makes it unbounded. * CPython interpreter limits recursion depth to 1000 by default. To increase it use <code>'sys.setrecursionlimit(&lt;depth&gt;)'</code>.</p>"},{"location":"python-cheatsheet/#parametrized-decorator_1","title":"Parametrized Decorator","text":"<p>A decorator that accepts arguments and returns a normal decorator that accepts a function. <pre><code>from functools import wraps\n\ndef debug(print_result=False):\n    def decorator(func):\n        @wraps(func)\n        def out(*args, **kwargs):\n            result = func(*args, **kwargs)\n            print(func.__name__, result if print_result else '')\n            return result\n        return out\n    return decorator\n\n@debug(print_result=True)\ndef add(x, y):\n    return x + y\n</code></pre> * Using only <code>'@debug'</code> to decorate the add() function would not work here, because debug would then receive the add() function as a 'print_result' argument. Decorators can however manually check if the argument they received is a function and act accordingly.</p>"},{"location":"python-cheatsheet/#class_1","title":"Class","text":"<p><pre><code>class &lt;name&gt;:\n    def __init__(self, a):\n        self.a = a\n    def __repr__(self):\n        class_name = self.__class__.__name__\n        return f'{class_name}({self.a!r})'\n    def __str__(self):\n        return str(self.a)\n\n    @classmethod\n    def get_class_name(cls):\n        return cls.__name__\n</code></pre> * Return value of repr() should be unambiguous and of str() readable. * If only repr() is defined, it will also be used for str(). * Methods decorated with <code>'@staticmethod'</code> do not receive 'self' nor 'cls' as their first arg.</p>"},{"location":"python-cheatsheet/#expressions-that-call-the-str-method_1","title":"Expressions that call the str() method:","text":"<pre><code>print(&lt;el&gt;)\nf'{&lt;el&gt;}'\nlogging.warning(&lt;el&gt;)\ncsv.writer(&lt;file&gt;).writerow([&lt;el&gt;])\nraise Exception(&lt;el&gt;)\n</code></pre>"},{"location":"python-cheatsheet/#expressions-that-call-the-repr-method_1","title":"Expressions that call the repr() method:","text":"<pre><code>print/str/repr([&lt;el&gt;])\nprint/str/repr({&lt;el&gt;: &lt;el&gt;})\nf'{&lt;el&gt;!r}'\nZ = dataclasses.make_dataclass('Z', ['a']); print/str/repr(Z(&lt;el&gt;))\n&gt;&gt;&gt; &lt;el&gt;\n</code></pre>"},{"location":"python-cheatsheet/#constructor-overloading_1","title":"Constructor Overloading","text":"<pre><code>class &lt;name&gt;:\n    def __init__(self, a=None):\n        self.a = a\n</code></pre>"},{"location":"python-cheatsheet/#inheritance_1","title":"Inheritance","text":"<pre><code>class Person:\n    def __init__(self, name):\n        self.name = name\n\nclass Employee(Person):\n    def __init__(self, name, staff_num):\n        super().__init__(name)\n        self.staff_num = staff_num\n</code></pre>"},{"location":"python-cheatsheet/#multiple-inheritance_1","title":"Multiple Inheritance","text":"<pre><code>class A: pass\nclass B: pass\nclass C(A, B): pass\n</code></pre> <p>MRO determines the order in which parent classes are traversed when searching for a method or an attribute: <pre><code>&gt;&gt;&gt; C.mro()\n[&lt;class 'C'&gt;, &lt;class 'A'&gt;, &lt;class 'B'&gt;, &lt;class 'object'&gt;]\n</code></pre></p>"},{"location":"python-cheatsheet/#property_1","title":"Property","text":"<p>Pythonic way of implementing getters and setters. <pre><code>class Person:\n    @property\n    def name(self):\n        return ' '.join(self._name)\n\n    @name.setter\n    def name(self, value):\n        self._name = value.split()\n</code></pre></p> <pre><code>&gt;&gt;&gt; person = Person()\n&gt;&gt;&gt; person.name = '\\t Guido  van Rossum \\n'\n&gt;&gt;&gt; person.name\n'Guido van Rossum'\n</code></pre>"},{"location":"python-cheatsheet/#dataclass_1","title":"Dataclass","text":"<p>Decorator that automatically generates init(), repr() and eq() special methods. <pre><code>from dataclasses import dataclass, field\n\n@dataclass(order=False, frozen=False)\nclass &lt;class_name&gt;:\n    &lt;attr_name&gt;: &lt;type&gt;\n    &lt;attr_name&gt;: &lt;type&gt; = &lt;default_value&gt;\n    &lt;attr_name&gt;: list/dict/set = field(default_factory=list/dict/set)\n</code></pre> * Objects can be made sortable with <code>'order=True'</code> and immutable with <code>'frozen=True'</code>. * For object to be hashable, all attributes must be hashable and 'frozen' must be True. * Function field() is needed because <code>'&lt;attr_name&gt;: list = []'</code> would make a list that is shared among all instances. Its 'default_factory' argument can be any callable. * For attributes of arbitrary type use <code>'typing.Any'</code>.</p>"},{"location":"python-cheatsheet/#inline_4","title":"Inline:","text":"<pre><code>from dataclasses import make_dataclass\n&lt;class&gt; = make_dataclass('&lt;class_name&gt;', &lt;coll_of_attribute_names&gt;)\n&lt;class&gt; = make_dataclass('&lt;class_name&gt;', &lt;coll_of_tuples&gt;)\n&lt;tuple&gt; = ('&lt;attr_name&gt;', &lt;type&gt; [, &lt;default_value&gt;])\n</code></pre>"},{"location":"python-cheatsheet/#rest-of-type-annotations-cpython-interpreter-ignores-them-all_1","title":"Rest of type annotations (CPython interpreter ignores them all):","text":"<pre><code>import collections.abc as abc, typing as tp\n&lt;var_name&gt;: list/set/abc.Iterable/abc.Sequence/tp.Optional[&lt;type&gt;] [= &lt;obj&gt;]\n&lt;var_name&gt;: dict/tuple/tp.Union[&lt;type&gt;, ...] [= &lt;obj&gt;]\ndef func(&lt;arg_name&gt;: &lt;type&gt; [= &lt;obj&gt;]) -&gt; &lt;type&gt;: ...\n</code></pre>"},{"location":"python-cheatsheet/#slots_1","title":"Slots","text":"<p>Mechanism that restricts objects to attributes listed in 'slots' and significantly reduces their memory footprint.</p> <pre><code>class MyClassWithSlots:\n    __slots__ = ['a']\n    def __init__(self):\n        self.a = 1\n</code></pre>"},{"location":"python-cheatsheet/#copy_1","title":"Copy","text":"<pre><code>from copy import copy, deepcopy\n&lt;object&gt; = copy(&lt;object&gt;)\n&lt;object&gt; = deepcopy(&lt;object&gt;)\n</code></pre>"},{"location":"python-cheatsheet/#duck-types_1","title":"Duck Types","text":"<p>A duck type is an implicit type that prescribes a set of special methods. Any object that has those methods defined is considered a member of that duck type.</p>"},{"location":"python-cheatsheet/#comparable_1","title":"Comparable","text":"<ul> <li>If eq() method is not overridden, it returns <code>'id(self) == id(other)'</code>, which is the same as <code>'self is other'</code>.</li> <li>That means all objects compare not equal by default.</li> <li>Only the left side object has eq() method called, unless it returns NotImplemented, in which case the right object is consulted. False is returned if both return NotImplemented.</li> <li>Ne() automatically works on any object that has eq() defined.</li> </ul> <pre><code>class MyComparable:\n    def __init__(self, a):\n        self.a = a\n    def __eq__(self, other):\n        if isinstance(other, type(self)):\n            return self.a == other.a\n        return NotImplemented\n</code></pre>"},{"location":"python-cheatsheet/#hashable_1","title":"Hashable","text":"<ul> <li>Hashable object needs both hash() and eq() methods and its hash value should never change.</li> <li>Hashable objects that compare equal must have the same hash value, meaning default hash() that returns <code>'id(self)'</code> will not do.</li> <li>That is why Python automatically makes classes unhashable if you only implement eq().</li> </ul> <pre><code>class MyHashable:\n    def __init__(self, a):\n        self._a = a\n    @property\n    def a(self):\n        return self._a\n    def __eq__(self, other):\n        if isinstance(other, type(self)):\n            return self.a == other.a\n        return NotImplemented\n    def __hash__(self):\n        return hash(self.a)\n</code></pre>"},{"location":"python-cheatsheet/#sortable_1","title":"Sortable","text":"<ul> <li>With 'total_ordering' decorator, you only need to provide eq() and one of lt(), gt(), le() or ge() special methods and the rest will be automatically generated.</li> <li>Functions sorted() and min() only require lt() method, while max() only requires gt(). However, it is best to define them all so that confusion doesn't arise in other contexts.</li> <li>When two lists, strings or dataclasses are compared, their values get compared in order until a pair of unequal values is found. The comparison of this two values is then returned. The shorter sequence is considered smaller in case of all values being equal.</li> <li>For proper alphabetical order pass <code>'key=locale.strxfrm'</code> to sorted() after running <code>'locale.setlocale(locale.LC_COLLATE, \"en_US.UTF-8\")'</code>.</li> </ul> <pre><code>from functools import total_ordering\n\n@total_ordering\nclass MySortable:\n    def __init__(self, a):\n        self.a = a\n    def __eq__(self, other):\n        if isinstance(other, type(self)):\n            return self.a == other.a\n        return NotImplemented\n    def __lt__(self, other):\n        if isinstance(other, type(self)):\n            return self.a &lt; other.a\n        return NotImplemented\n</code></pre>"},{"location":"python-cheatsheet/#iterator_3","title":"Iterator","text":"<ul> <li>Any object that has methods next() and iter() is an iterator.</li> <li>Next() should return next item or raise StopIteration exception.</li> <li>Iter() should return 'self'. <pre><code>class Counter:\n    def __init__(self):\n        self.i = 0\n    def __next__(self):\n        self.i += 1\n        return self.i\n    def __iter__(self):\n        return self\n</code></pre></li> </ul> <pre><code>&gt;&gt;&gt; counter = Counter()\n&gt;&gt;&gt; next(counter), next(counter), next(counter)\n(1, 2, 3)\n</code></pre>"},{"location":"python-cheatsheet/#python-has-many-different-iterator-objects_1","title":"Python has many different iterator objects:","text":"<ul> <li>Sequence iterators returned by the iter() function, such as list_iterator and set_iterator.</li> <li>Objects returned by the itertools module, such as count, repeat and cycle.</li> <li>Generators returned by the generator functions and generator expressions.</li> <li>File objects returned by the open() function, etc.</li> </ul>"},{"location":"python-cheatsheet/#callable_1","title":"Callable","text":"<ul> <li>All functions and classes have a call() method, hence are callable.</li> <li>When this cheatsheet uses <code>'&lt;function&gt;'</code> as an argument, it actually means <code>'&lt;callable&gt;'</code>. <pre><code>class Counter:\n    def __init__(self):\n        self.i = 0\n    def __call__(self):\n        self.i += 1\n        return self.i\n</code></pre></li> </ul> <pre><code>&gt;&gt;&gt; counter = Counter()\n&gt;&gt;&gt; counter(), counter(), counter()\n(1, 2, 3)\n</code></pre>"},{"location":"python-cheatsheet/#context-manager_1","title":"Context Manager","text":"<ul> <li>With statements only work with objects that have enter() and exit() special methods.</li> <li>Enter() should lock the resources and optionally return an object.</li> <li>Exit() should release the resources.</li> <li>Any exception that happens inside the with block is passed to the exit() method.</li> <li>The exit() method can suppress the exception by returning a true value. <pre><code>class MyOpen:\n    def __init__(self, filename):\n        self.filename = filename\n    def __enter__(self):\n        self.file = open(self.filename)\n        return self.file\n    def __exit__(self, exc_type, exception, traceback):\n        self.file.close()\n</code></pre></li> </ul> <pre><code>&gt;&gt;&gt; with open('test.txt', 'w') as file:\n...     file.write('Hello World!')\n&gt;&gt;&gt; with MyOpen('test.txt') as file:\n...     print(file.read())\nHello World!\n</code></pre>"},{"location":"python-cheatsheet/#iterable-duck-types_1","title":"Iterable Duck Types","text":""},{"location":"python-cheatsheet/#iterable_1","title":"Iterable","text":"<ul> <li>Only required method is iter(). It should return an iterator of object's items.</li> <li>Contains() automatically works on any object that has iter() defined. <pre><code>class MyIterable:\n    def __init__(self, a):\n        self.a = a\n    def __iter__(self):\n        return iter(self.a)\n    def __contains__(self, el):\n        return el in self.a\n</code></pre></li> </ul> <pre><code>&gt;&gt;&gt; obj = MyIterable([1, 2, 3])\n&gt;&gt;&gt; [el for el in obj]\n[1, 2, 3]\n&gt;&gt;&gt; 1 in obj\nTrue\n</code></pre>"},{"location":"python-cheatsheet/#collection_1","title":"Collection","text":"<ul> <li>Only required methods are iter() and len(). Len() should return the number of items.</li> <li>This cheatsheet actually means <code>'&lt;iterable&gt;'</code> when it uses <code>'&lt;collection&gt;'</code>.</li> <li>I chose not to use the name 'iterable' because it sounds scarier and more vague than 'collection'. The only drawback of this decision is that the reader could think a certain function doesn't accept iterators when it does, since iterators are the only built-in objects that are iterable but are not collections. <pre><code>class MyCollection:\n    def __init__(self, a):\n        self.a = a\n    def __iter__(self):\n        return iter(self.a)\n    def __contains__(self, el):\n        return el in self.a\n    def __len__(self):\n        return len(self.a)\n</code></pre></li> </ul>"},{"location":"python-cheatsheet/#sequence_1","title":"Sequence","text":"<ul> <li>Only required methods are getitem() and len().</li> <li>Getitem() should return an item at the passed index or raise IndexError.</li> <li>Iter() and contains() automatically work on any object that has getitem() defined.</li> <li>Reversed() automatically works on any object that has getitem() and len() defined. <pre><code>class MySequence:\n    def __init__(self, a):\n        self.a = a\n    def __iter__(self):\n        return iter(self.a)\n    def __contains__(self, el):\n        return el in self.a\n    def __len__(self):\n        return len(self.a)\n    def __getitem__(self, i):\n        return self.a[i]\n    def __reversed__(self):\n        return reversed(self.a)\n</code></pre></li> </ul>"},{"location":"python-cheatsheet/#discrepancies-between-glossary-definitions-and-abstract-base-classes_1","title":"Discrepancies between glossary definitions and abstract base classes:","text":"<ul> <li>Glossary defines iterable as any object with iter() or getitem() and sequence as any object with getitem() and len(). It does not define collection.</li> <li>Passing ABC Iterable to isinstance() or issubclass() checks whether object/class has method iter(), while ABC Collection checks for iter(), contains() and len().</li> </ul>"},{"location":"python-cheatsheet/#abc-sequence_1","title":"ABC Sequence","text":"<ul> <li>It's a richer interface than the basic sequence.</li> <li>Extending it generates iter(), contains(), reversed(), index() and count().</li> <li>Unlike <code>'abc.Iterable'</code> and <code>'abc.Collection'</code>, it is not a duck type. That is why <code>'issubclass(MySequence, abc.Sequence)'</code> would return False even if MySequence had all the methods defined. It however recognizes list, tuple, range, str, bytes, bytearray, array, memoryview and deque, because they are registered as its virtual subclasses. <pre><code>from collections import abc\n\nclass MyAbcSequence(abc.Sequence):\n    def __init__(self, a):\n        self.a = a\n    def __len__(self):\n        return len(self.a)\n    def __getitem__(self, i):\n        return self.a[i]\n</code></pre></li> </ul>"},{"location":"python-cheatsheet/#table-of-required-and-automatically-available-special-methods_1","title":"Table of required and automatically available special methods:","text":"<p><pre><code>+------------+------------+------------+------------+--------------+\n|            |  Iterable  | Collection |  Sequence  | abc.Sequence |\n+------------+------------+------------+------------+--------------+\n| iter()     |    REQ     |    REQ     |    Yes     |     Yes      |\n| contains() |    Yes     |    Yes     |    Yes     |     Yes      |\n| len()      |            |    REQ     |    REQ     |     REQ      |\n| getitem()  |            |            |    REQ     |     REQ      |\n| reversed() |            |            |    Yes     |     Yes      |\n| index()    |            |            |            |     Yes      |\n| count()    |            |            |            |     Yes      |\n+------------+------------+------------+------------+--------------+\n</code></pre> * Other ABCs that generate missing methods are: MutableSequence, Set, MutableSet, Mapping and MutableMapping. * Names of their required methods are stored in <code>'&lt;abc&gt;.__abstractmethods__'</code>.</p>"},{"location":"python-cheatsheet/#enum_1","title":"Enum","text":"<pre><code>from enum import Enum, auto\n</code></pre> <p><pre><code>class &lt;enum_name&gt;(Enum):\n    &lt;member_name&gt; = auto()\n    &lt;member_name&gt; = &lt;value&gt;\n    &lt;member_name&gt; = &lt;value&gt;, &lt;value&gt;\n</code></pre> * Function auto() returns an increment of the last numeric value or 1. * Accessing a member named after a reserved keyword causes SyntaxError. * Methods receive the member they were called on as the 'self' argument.</p> <pre><code>&lt;member&gt; = &lt;enum&gt;.&lt;member_name&gt;           # Returns a member.\n&lt;member&gt; = &lt;enum&gt;['&lt;member_name&gt;']        # Returns a member. Raises KeyError.\n&lt;member&gt; = &lt;enum&gt;(&lt;value&gt;)                # Returns a member. Raises ValueError.\n&lt;str&gt;    = &lt;member&gt;.name                  # Returns member's name.\n&lt;obj&gt;    = &lt;member&gt;.value                 # Returns member's value.\n</code></pre> <pre><code>&lt;list&gt;   = list(&lt;enum&gt;)                   # Returns enum's members.\n&lt;list&gt;   = [a.name for a in &lt;enum&gt;]       # Returns enum's member names.\n&lt;list&gt;   = [a.value for a in &lt;enum&gt;]      # Returns enum's member values.\n&lt;member&gt; = random.choice(list(&lt;enum&gt;))    # Returns a random member.\n</code></pre> <pre><code>def get_next_member(member):\n    members = list(type(member))\n    index = members.index(member) + 1\n    return members[index % len(members)]\n</code></pre>"},{"location":"python-cheatsheet/#inline_5","title":"Inline","text":"<pre><code>Cutlery = Enum('Cutlery', 'FORK KNIFE SPOON')\nCutlery = Enum('Cutlery', ['FORK', 'KNIFE', 'SPOON'])\nCutlery = Enum('Cutlery', {'FORK': 1, 'KNIFE': 2, 'SPOON': 3})\n</code></pre>"},{"location":"python-cheatsheet/#user-defined-functions-cannot-be-values-so-they-must-be-wrapped_1","title":"User-defined functions cannot be values, so they must be wrapped:","text":"<pre><code>from functools import partial\nLogicOp = Enum('LogicOp', {'AND': partial(lambda l, r: l and r),\n                           'OR':  partial(lambda l, r: l or r)})\n</code></pre>"},{"location":"python-cheatsheet/#exceptions_2","title":"Exceptions","text":"<pre><code>try:\n    &lt;code&gt;\nexcept &lt;exception&gt;:\n    &lt;code&gt;\n</code></pre>"},{"location":"python-cheatsheet/#complex-example_1","title":"Complex Example","text":"<p><pre><code>try:\n    &lt;code_1&gt;\nexcept &lt;exception_a&gt;:\n    &lt;code_2_a&gt;\nexcept &lt;exception_b&gt;:\n    &lt;code_2_b&gt;\nelse:\n    &lt;code_2_c&gt;\nfinally:\n    &lt;code_3&gt;\n</code></pre> * Code inside the <code>'else'</code> block will only be executed if <code>'try'</code> block had no exceptions. * Code inside the <code>'finally'</code> block will always be executed (unless a signal is received). * All variables that are initialized in executed blocks are also visible in all subsequent blocks, as well as outside the try/except clause (only function block delimits scope). * To catch signals use <code>'signal.signal(signal_number, &lt;func&gt;)'</code>.</p>"},{"location":"python-cheatsheet/#catching-exceptions_1","title":"Catching Exceptions","text":"<p><pre><code>except &lt;exception&gt;: ...\nexcept &lt;exception&gt; as &lt;name&gt;: ...\nexcept (&lt;exception&gt;, [...]): ...\nexcept (&lt;exception&gt;, [...]) as &lt;name&gt;: ...\n</code></pre> * Also catches subclasses of the exception. * Use <code>'traceback.print_exc()'</code> to print the error message to stderr. * Use <code>'print(&lt;name&gt;)'</code> to print just the cause of the exception (its arguments). * Use <code>'logging.exception(&lt;message&gt;)'</code> to log the passed message, followed by the full error message of the caught exception.</p>"},{"location":"python-cheatsheet/#raising-exceptions_1","title":"Raising Exceptions","text":"<pre><code>raise &lt;exception&gt;\nraise &lt;exception&gt;()\nraise &lt;exception&gt;(&lt;el&gt; [, ...])\n</code></pre>"},{"location":"python-cheatsheet/#re-raising-caught-exception_1","title":"Re-raising caught exception:","text":"<pre><code>except &lt;exception&gt; [as &lt;name&gt;]:\n    ...\n    raise\n</code></pre>"},{"location":"python-cheatsheet/#exception-object_1","title":"Exception Object","text":"<pre><code>arguments = &lt;name&gt;.args\nexc_type  = &lt;name&gt;.__class__\nfilename  = &lt;name&gt;.__traceback__.tb_frame.f_code.co_filename\nfunc_name = &lt;name&gt;.__traceback__.tb_frame.f_code.co_name\nline      = linecache.getline(filename, &lt;name&gt;.__traceback__.tb_lineno)\ntrace_str = ''.join(traceback.format_tb(&lt;name&gt;.__traceback__))\nerror_msg = ''.join(traceback.format_exception(type(&lt;name&gt;), &lt;name&gt;, &lt;name&gt;.__traceback__))\n</code></pre>"},{"location":"python-cheatsheet/#built-in-exceptions_1","title":"Built-in Exceptions","text":"<pre><code>BaseException\n +-- SystemExit                   # Raised by the sys.exit() function.\n +-- KeyboardInterrupt            # Raised when the user hits the interrupt key (ctrl-c).\n +-- Exception                    # User-defined exceptions should be derived from this class.\n      +-- ArithmeticError         # Base class for arithmetic errors such as ZeroDivisionError.\n      +-- AssertionError          # Raised by `assert &lt;exp&gt;` if expression returns false value.\n      +-- AttributeError          # Raised when object doesn't have requested attribute/method.\n      +-- EOFError                # Raised by input() when it hits an end-of-file condition.\n      +-- LookupError             # Base class for errors when a collection can't find an item.\n      |    +-- IndexError         # Raised when a sequence index is out of range.\n      |    +-- KeyError           # Raised when a dictionary key or set element is missing.\n      +-- MemoryError             # Out of memory. Could be too late to start deleting vars.\n      +-- NameError               # Raised when nonexistent name (variable/func/class) is used.\n      |    +-- UnboundLocalError  # Raised when local name is used before it's being defined.\n      +-- OSError                 # Errors such as FileExistsError/PermissionError (see #Open).\n      |    +-- ConnectionError    # Errors such as BrokenPipeError/ConnectionAbortedError.\n      +-- RuntimeError            # Raised by errors that don't fall into other categories.\n      |    +-- NotImplementedEr\u2026  # Can be raised by abstract methods or by unfinished code.\n      |    +-- RecursionError     # Raised when the maximum recursion depth is exceeded.\n      +-- StopIteration           # Raised by next() when run on an empty iterator.\n      +-- TypeError               # Raised when an argument is of the wrong type.\n      +-- ValueError              # When argument has the right type but inappropriate value.\n</code></pre>"},{"location":"python-cheatsheet/#collections-and-their-exceptions_1","title":"Collections and their exceptions:","text":"<pre><code>+-----------+------------+------------+------------+\n|           |    List    |    Set     |    Dict    |\n+-----------+------------+------------+------------+\n| getitem() | IndexError |            |  KeyError  |\n| pop()     | IndexError |  KeyError  |  KeyError  |\n| remove()  | ValueError |  KeyError  |            |\n| index()   | ValueError |            |            |\n+-----------+------------+------------+------------+\n</code></pre>"},{"location":"python-cheatsheet/#useful-built-in-exceptions_1","title":"Useful built-in exceptions:","text":"<pre><code>raise TypeError('Argument is of the wrong type!')\nraise ValueError('Argument has the right type but an inappropriate value!')\nraise RuntimeError('I am too lazy to define my own exception!')\n</code></pre>"},{"location":"python-cheatsheet/#user-defined-exceptions_1","title":"User-defined Exceptions","text":"<pre><code>class MyError(Exception): pass\nclass MyInputError(MyError): pass\n</code></pre>"},{"location":"python-cheatsheet/#exit_1","title":"Exit","text":"<p>Exits the interpreter by raising SystemExit exception. <pre><code>import sys\nsys.exit()                        # Exits with exit code 0 (success).\nsys.exit(&lt;el&gt;)                    # Prints to stderr and exits with 1.\nsys.exit(&lt;int&gt;)                   # Exits with the passed exit code.\n</code></pre></p>"},{"location":"python-cheatsheet/#print_1","title":"Print","text":"<p><pre><code>print(&lt;el_1&gt;, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n</code></pre> * Use <code>'file=sys.stderr'</code> for messages about errors. * Use <code>'flush=True'</code> to forcibly flush the stream.</p>"},{"location":"python-cheatsheet/#pretty-print_1","title":"Pretty Print","text":"<p><pre><code>from pprint import pprint\npprint(&lt;collection&gt;, width=80, depth=None, compact=False, sort_dicts=True)\n</code></pre> * Levels deeper than 'depth' get replaced by '...'.</p>"},{"location":"python-cheatsheet/#input_1","title":"Input","text":"<p>Reads a line from the user input or pipe if present.</p> <p><pre><code>&lt;str&gt; = input(prompt=None)\n</code></pre> * Trailing newline gets stripped. * Prompt string is printed to the standard output before reading input. * Raises EOFError when user hits EOF (ctrl-d/ctrl-z\u23ce) or input stream gets exhausted.</p>"},{"location":"python-cheatsheet/#command-line-arguments_1","title":"Command Line Arguments","text":"<pre><code>import sys\nscripts_path = sys.argv[0]\narguments    = sys.argv[1:]\n</code></pre>"},{"location":"python-cheatsheet/#argument-parser_1","title":"Argument Parser","text":"<pre><code>from argparse import ArgumentParser, FileType\np = ArgumentParser(description=&lt;str&gt;)\np.add_argument('-&lt;short_name&gt;', '--&lt;name&gt;', action='store_true')  # Flag.\np.add_argument('-&lt;short_name&gt;', '--&lt;name&gt;', type=&lt;type&gt;)          # Option.\np.add_argument('&lt;name&gt;', type=&lt;type&gt;, nargs=1)                    # First argument.\np.add_argument('&lt;name&gt;', type=&lt;type&gt;, nargs='+')                  # Remaining arguments.\np.add_argument('&lt;name&gt;', type=&lt;type&gt;, nargs='*')                  # Optional arguments.\nargs  = p.parse_args()                                            # Exits on error.\nvalue = args.&lt;name&gt;\n</code></pre> <ul> <li>Use <code>'help=&lt;str&gt;'</code> to set argument description that will be displayed in help message.</li> <li>Use <code>'default=&lt;el&gt;'</code> to set argument's default value.</li> <li>Use <code>'type=FileType(&lt;mode&gt;)'</code> for files. Accepts 'encoding', but 'newline' is None.</li> </ul>"},{"location":"python-cheatsheet/#open_1","title":"Open","text":"<p>Opens the file and returns a corresponding file object.</p> <p><pre><code>&lt;file&gt; = open(&lt;path&gt;, mode='r', encoding=None, newline=None)\n</code></pre> * <code>'encoding=None'</code> means that the default encoding is used, which is platform dependent. Best practice is to use <code>'encoding=\"utf-8\"'</code> whenever possible. * <code>'newline=None'</code> means all different end of line combinations are converted to '\\n' on read, while on write all '\\n' characters are converted to system's default line separator. * <code>'newline=\"\"'</code> means no conversions take place, but input is still broken into chunks by readline() and readlines() on every '\\n', '\\r' and '\\r\\n'.</p>"},{"location":"python-cheatsheet/#modes_2","title":"Modes","text":"<ul> <li><code>'r'</code>  - Read (default).</li> <li><code>'w'</code>  - Write (truncate).</li> <li><code>'x'</code>  - Write or fail if the file already exists.</li> <li><code>'a'</code>  - Append.</li> <li><code>'w+'</code> - Read and write (truncate).</li> <li><code>'r+'</code> - Read and write from the start.</li> <li><code>'a+'</code> - Read and write from the end.</li> <li><code>'b'</code>  - Binary mode (<code>'br'</code>, <code>'bw'</code>, <code>'bx'</code>, \u2026).</li> </ul>"},{"location":"python-cheatsheet/#exceptions_3","title":"Exceptions","text":"<ul> <li><code>'FileNotFoundError'</code> can be raised when reading with <code>'r'</code> or <code>'r+'</code>.</li> <li><code>'FileExistsError'</code> can be raised when writing with <code>'x'</code>.</li> <li><code>'IsADirectoryError'</code> and <code>'PermissionError'</code> can be raised by any.</li> <li><code>'OSError'</code> is the parent class of all listed exceptions.</li> </ul>"},{"location":"python-cheatsheet/#file-object_1","title":"File Object","text":"<pre><code>&lt;file&gt;.seek(0)                      # Moves to the start of the file.\n&lt;file&gt;.seek(offset)                 # Moves 'offset' chars/bytes from the start.\n&lt;file&gt;.seek(0, 2)                   # Moves to the end of the file.\n&lt;bin_file&gt;.seek(\u00b1offset, &lt;anchor&gt;)  # Anchor: 0 start, 1 current position, 2 end.\n</code></pre> <pre><code>&lt;str/bytes&gt; = &lt;file&gt;.read(size=-1)  # Reads 'size' chars/bytes or until EOF.\n&lt;str/bytes&gt; = &lt;file&gt;.readline()     # Returns a line or empty string/bytes on EOF.\n&lt;list&gt;      = &lt;file&gt;.readlines()    # Returns a list of remaining lines.\n&lt;str/bytes&gt; = next(&lt;file&gt;)          # Returns a line using buffer. Do not mix.\n</code></pre> <p><pre><code>&lt;file&gt;.write(&lt;str/bytes&gt;)           # Writes a string or bytes object.\n&lt;file&gt;.writelines(&lt;collection&gt;)     # Writes a coll. of strings or bytes objects.\n&lt;file&gt;.flush()                      # Flushes write buffer. Runs every 4096/8192 B.\n&lt;file&gt;.close()                      # Closes the file after flushing.\n</code></pre> * Methods do not add or strip trailing newlines, not even writelines().</p>"},{"location":"python-cheatsheet/#read-text-from-file_1","title":"Read Text from File","text":"<pre><code>def read_file(filename):\n    with open(filename, encoding='utf-8') as file:\n        return file.readlines()\n</code></pre>"},{"location":"python-cheatsheet/#write-text-to-file_1","title":"Write Text to File","text":"<pre><code>def write_to_file(filename, text):\n    with open(filename, 'w', encoding='utf-8') as file:\n        file.write(text)\n</code></pre>"},{"location":"python-cheatsheet/#paths_1","title":"Paths","text":"<pre><code>import os, glob\nfrom pathlib import Path\n</code></pre> <pre><code>&lt;str&gt;  = os.getcwd()                # Returns the current working directory.\n&lt;str&gt;  = os.path.join(&lt;path&gt;, ...)  # Joins two or more pathname components.\n&lt;str&gt;  = os.path.realpath(&lt;path&gt;)   # Resolves symlinks and calls path.abspath().\n</code></pre> <pre><code>&lt;str&gt;  = os.path.basename(&lt;path&gt;)   # Returns final component of the path.\n&lt;str&gt;  = os.path.dirname(&lt;path&gt;)    # Returns path without the final component.\n&lt;tup.&gt; = os.path.splitext(&lt;path&gt;)   # Splits on last period of the final component.\n</code></pre> <pre><code>&lt;list&gt; = os.listdir(path='.')       # Returns filenames located at the path.\n&lt;list&gt; = glob.glob('&lt;pattern&gt;')     # Returns paths matching the wildcard pattern.\n</code></pre> <pre><code>&lt;bool&gt; = os.path.exists(&lt;path&gt;)     # Or: &lt;Path&gt;.exists()\n&lt;bool&gt; = os.path.isfile(&lt;path&gt;)     # Or: &lt;DirEntry/Path&gt;.is_file()\n&lt;bool&gt; = os.path.isdir(&lt;path&gt;)      # Or: &lt;DirEntry/Path&gt;.is_dir()\n</code></pre> <pre><code>&lt;stat&gt; = os.stat(&lt;path&gt;)            # Or: &lt;DirEntry/Path&gt;.stat()\n&lt;real&gt; = &lt;stat&gt;.st_mtime/st_size/\u2026  # Modification time, size in bytes, ...\n</code></pre>"},{"location":"python-cheatsheet/#direntry_1","title":"DirEntry","text":"<p>Unlike listdir(), scandir() returns DirEntry objects that cache isfile, isdir and on Windows also stat information, thus significantly increasing the performance of code that requires it.</p> <pre><code>&lt;iter&gt; = os.scandir(path='.')       # Returns DirEntry objects located at the path.\n&lt;str&gt;  = &lt;DirEntry&gt;.path            # Returns the whole path as a string.\n&lt;str&gt;  = &lt;DirEntry&gt;.name            # Returns final component as a string.\n&lt;file&gt; = open(&lt;DirEntry&gt;)           # Opens the file and returns a file object.\n</code></pre>"},{"location":"python-cheatsheet/#path-object_1","title":"Path Object","text":"<pre><code>&lt;Path&gt; = Path(&lt;path&gt; [, ...])       # Accepts strings, Paths and DirEntry objects.\n&lt;Path&gt; = &lt;path&gt; / &lt;path&gt; [/ ...]    # First or second path must be a Path object.\n&lt;Path&gt; = &lt;Path&gt;.resolve()           # Returns absolute path with resolved symlinks.\n</code></pre> <pre><code>&lt;Path&gt; = Path()                     # Returns relative cwd. Also Path('.').\n&lt;Path&gt; = Path.cwd()                 # Returns absolute cwd. Also Path().resolve().\n&lt;Path&gt; = Path.home()                # Returns user's home directory (absolute).\n&lt;Path&gt; = Path(__file__).resolve()   # Returns script's path if cwd wasn't changed.\n</code></pre> <pre><code>&lt;Path&gt; = &lt;Path&gt;.parent              # Returns Path without the final component.\n&lt;str&gt;  = &lt;Path&gt;.name                # Returns final component as a string.\n&lt;str&gt;  = &lt;Path&gt;.stem                # Returns final component without extension.\n&lt;str&gt;  = &lt;Path&gt;.suffix              # Returns final component's extension.\n&lt;tup.&gt; = &lt;Path&gt;.parts               # Returns all components as strings.\n</code></pre> <pre><code>&lt;iter&gt; = &lt;Path&gt;.iterdir()           # Returns directory contents as Path objects.\n&lt;iter&gt; = &lt;Path&gt;.glob('&lt;pattern&gt;')   # Returns Paths matching the wildcard pattern.\n</code></pre> <pre><code>&lt;str&gt;  = str(&lt;Path&gt;)                # Returns path as a string.\n&lt;file&gt; = open(&lt;Path&gt;)               # Also &lt;Path&gt;.read/write_text/bytes().\n</code></pre>"},{"location":"python-cheatsheet/#os-commands_1","title":"OS Commands","text":"<pre><code>import os, shutil, subprocess\n</code></pre> <pre><code>os.chdir(&lt;path&gt;)                    # Changes the current working directory.\nos.mkdir(&lt;path&gt;, mode=0o777)        # Creates a directory. Permissions are in octal.\nos.makedirs(&lt;path&gt;, mode=0o777)     # Creates all path's dirs. Also `exist_ok=False`.\n</code></pre> <pre><code>shutil.copy(from, to)               # Copies the file. 'to' can exist or be a dir.\nshutil.copy2(from, to)              # Also copies creation and modification time.\nshutil.copytree(from, to)           # Copies the directory. 'to' must not exist.\n</code></pre> <pre><code>os.rename(from, to)                 # Renames/moves the file or directory.\nos.replace(from, to)                # Same, but overwrites file 'to' even on Windows.\nshutil.move(from, to)               # Rename() that moves into 'to' if it's a dir.\n</code></pre> <p><pre><code>os.remove(&lt;path&gt;)                   # Deletes the file.\nos.rmdir(&lt;path&gt;)                    # Deletes the empty directory.\nshutil.rmtree(&lt;path&gt;)               # Deletes the directory.\n</code></pre> * Paths can be either strings, Paths or DirEntry objects. * Functions report OS related errors by raising either OSError or one of its subclasses.</p>"},{"location":"python-cheatsheet/#shell-commands_1","title":"Shell Commands","text":"<pre><code>&lt;pipe&gt; = os.popen('&lt;command&gt;')      # Executes command in sh/cmd. Returns its stdout pipe.\n&lt;str&gt;  = &lt;pipe&gt;.read(size=-1)       # Reads 'size' chars or until EOF. Also readline/s().\n&lt;int&gt;  = &lt;pipe&gt;.close()             # Closes the pipe. Returns None on success (returncode 0).\n</code></pre>"},{"location":"python-cheatsheet/#sends-1-1-to-the-basic-calculator-and-captures-its-output_1","title":"Sends '1 + 1' to the basic calculator and captures its output:","text":"<pre><code>&gt;&gt;&gt; subprocess.run('bc', input='1 + 1\\n', capture_output=True, text=True)\nCompletedProcess(args='bc', returncode=0, stdout='2\\n', stderr='')\n</code></pre>"},{"location":"python-cheatsheet/#sends-testin-to-the-basic-calculator-running-in-standard-mode-and-saves-its-output-to-testout_1","title":"Sends test.in to the basic calculator running in standard mode and saves its output to test.out:","text":"<pre><code>&gt;&gt;&gt; from shlex import split\n&gt;&gt;&gt; os.popen('echo 1 + 1 &gt; test.in')\n&gt;&gt;&gt; subprocess.run(split('bc -s'), stdin=open('test.in'), stdout=open('test.out', 'w'))\nCompletedProcess(args=['bc', '-s'], returncode=0)\n&gt;&gt;&gt; open('test.out').read()\n'2\\n'\n</code></pre>"},{"location":"python-cheatsheet/#json_1","title":"JSON","text":"<p>Text file format for storing collections of strings and numbers.</p> <pre><code>import json\n&lt;str&gt;    = json.dumps(&lt;object&gt;)     # Converts object to JSON string.\n&lt;object&gt; = json.loads(&lt;str&gt;)        # Converts JSON string to object.\n</code></pre>"},{"location":"python-cheatsheet/#read-object-from-json-file_1","title":"Read Object from JSON File","text":"<pre><code>def read_json_file(filename):\n    with open(filename, encoding='utf-8') as file:\n        return json.load(file)\n</code></pre>"},{"location":"python-cheatsheet/#write-object-to-json-file_1","title":"Write Object to JSON File","text":"<pre><code>def write_to_json_file(filename, an_object):\n    with open(filename, 'w', encoding='utf-8') as file:\n        json.dump(an_object, file, ensure_ascii=False, indent=2)\n</code></pre>"},{"location":"python-cheatsheet/#pickle_1","title":"Pickle","text":"<p>Binary file format for storing Python objects.</p> <pre><code>import pickle\n&lt;bytes&gt;  = pickle.dumps(&lt;object&gt;)   # Converts object to bytes object.\n&lt;object&gt; = pickle.loads(&lt;bytes&gt;)    # Converts bytes object to object.\n</code></pre>"},{"location":"python-cheatsheet/#read-object-from-file_1","title":"Read Object from File","text":"<pre><code>def read_pickle_file(filename):\n    with open(filename, 'rb') as file:\n        return pickle.load(file)\n</code></pre>"},{"location":"python-cheatsheet/#write-object-to-file_1","title":"Write Object to File","text":"<pre><code>def write_to_pickle_file(filename, an_object):\n    with open(filename, 'wb') as file:\n        pickle.dump(an_object, file)\n</code></pre>"},{"location":"python-cheatsheet/#csv_1","title":"CSV","text":"<p>Text file format for storing spreadsheets.</p> <pre><code>import csv\n</code></pre>"},{"location":"python-cheatsheet/#read_2","title":"Read","text":"<p><pre><code>&lt;reader&gt; = csv.reader(&lt;file&gt;)       # Also: `dialect='excel', delimiter=','`.\n&lt;list&gt;   = next(&lt;reader&gt;)           # Returns next row as a list of strings.\n&lt;list&gt;   = list(&lt;reader&gt;)           # Returns a list of remaining rows.\n</code></pre> * File must be opened with a <code>'newline=\"\"'</code> argument, or newlines embedded inside quoted fields will not be interpreted correctly! * To print the spreadsheet to the console use Tabulate library. * For XML and binary Excel files (xlsx, xlsm and xlsb) use Pandas library. * Reader accepts any iterator of strings, not just files.</p>"},{"location":"python-cheatsheet/#write_2","title":"Write","text":"<p><pre><code>&lt;writer&gt; = csv.writer(&lt;file&gt;)       # Also: `dialect='excel', delimiter=','`.\n&lt;writer&gt;.writerow(&lt;collection&gt;)     # Encodes objects using `str(&lt;el&gt;)`.\n&lt;writer&gt;.writerows(&lt;coll_of_coll&gt;)  # Appends multiple rows.\n</code></pre> * File must be opened with a <code>'newline=\"\"'</code> argument, or '\\r' will be added in front of every '\\n' on platforms that use '\\r\\n' line endings! * Open existing file with <code>'mode=\"w\"'</code> to overwrite it or <code>'mode=\"a\"'</code> to append to it.</p>"},{"location":"python-cheatsheet/#parameters_1","title":"Parameters","text":"<ul> <li><code>'dialect'</code> - Master parameter that sets the default values. String or a 'csv.Dialect' object.</li> <li><code>'delimiter'</code> - A one-character string used to separate fields.</li> <li><code>'quotechar'</code> - Character for quoting fields that contain special characters.</li> <li><code>'doublequote'</code> - Whether quotechars inside fields are/get doubled or escaped.</li> <li><code>'skipinitialspace'</code> - Is space character at the start of the field stripped by the reader.</li> <li><code>'lineterminator'</code> - How writer terminates rows. Reader is hardcoded to '\\n', '\\r', '\\r\\n'.</li> <li><code>'quoting'</code> - 0: As necessary, 1: All, 2: All but numbers which are read as floats, 3: None.</li> <li><code>'escapechar'</code> - Character for escaping quotechars if 'doublequote' is False.</li> </ul>"},{"location":"python-cheatsheet/#dialects_1","title":"Dialects","text":"<pre><code>+------------------+--------------+--------------+--------------+\n|                  |     excel    |   excel-tab  |     unix     |\n+------------------+--------------+--------------+--------------+\n| delimiter        |       ','    |      '\\t'    |       ','    |\n| quotechar        |       '\"'    |       '\"'    |       '\"'    |\n| doublequote      |      True    |      True    |      True    |\n| skipinitialspace |     False    |     False    |     False    |\n| lineterminator   |    '\\r\\n'    |    '\\r\\n'    |      '\\n'    |\n| quoting          |         0    |         0    |         1    |\n| escapechar       |      None    |      None    |      None    |\n+------------------+--------------+--------------+--------------+\n</code></pre>"},{"location":"python-cheatsheet/#read-rows-from-csv-file_1","title":"Read Rows from CSV File","text":"<pre><code>def read_csv_file(filename, dialect='excel', **params):\n    with open(filename, encoding='utf-8', newline='') as file:\n        return list(csv.reader(file, dialect, **params))\n</code></pre>"},{"location":"python-cheatsheet/#write-rows-to-csv-file_1","title":"Write Rows to CSV File","text":"<pre><code>def write_to_csv_file(filename, rows, mode='w', dialect='excel', **params):\n    with open(filename, mode, encoding='utf-8', newline='') as file:\n        writer = csv.writer(file, dialect, **params)\n        writer.writerows(rows)\n</code></pre>"},{"location":"python-cheatsheet/#sqlite_1","title":"SQLite","text":"<p>A server-less database engine that stores each database into a separate file.</p> <pre><code>import sqlite3\n&lt;conn&gt; = sqlite3.connect(&lt;path&gt;)                # Opens existing or new file. Also ':memory:'.\n&lt;conn&gt;.close()                                  # Closes the connection.\n</code></pre>"},{"location":"python-cheatsheet/#read_3","title":"Read","text":"<pre><code>&lt;cursor&gt; = &lt;conn&gt;.execute('&lt;query&gt;')            # Can raise a subclass of sqlite3.Error.\n&lt;tuple&gt;  = &lt;cursor&gt;.fetchone()                  # Returns next row. Also next(&lt;cursor&gt;).\n&lt;list&gt;   = &lt;cursor&gt;.fetchall()                  # Returns remaining rows. Also list(&lt;cursor&gt;).\n</code></pre>"},{"location":"python-cheatsheet/#write_3","title":"Write","text":"<pre><code>&lt;conn&gt;.execute('&lt;query&gt;')                       # Can raise a subclass of sqlite3.Error.\n&lt;conn&gt;.commit()                                 # Saves all changes since the last commit.\n&lt;conn&gt;.rollback()                               # Discards all changes since the last commit.\n</code></pre>"},{"location":"python-cheatsheet/#or_2","title":"Or:","text":"<pre><code>with &lt;conn&gt;:                                    # Exits the block with commit() or rollback(),\n    &lt;conn&gt;.execute('&lt;query&gt;')                   # depending on whether any exception occurred.\n</code></pre>"},{"location":"python-cheatsheet/#placeholders_1","title":"Placeholders","text":"<p><pre><code>&lt;conn&gt;.execute('&lt;query&gt;', &lt;list/tuple&gt;)         # Replaces '?'s in query with values.\n&lt;conn&gt;.execute('&lt;query&gt;', &lt;dict/namedtuple&gt;)    # Replaces ':&lt;key&gt;'s with values.\n&lt;conn&gt;.executemany('&lt;query&gt;', &lt;coll_of_above&gt;)  # Runs execute() multiple times.\n</code></pre> * Passed values can be of type str, int, float, bytes, None, bool, datetime.date or datetime.datetime. * Bools will be stored and returned as ints and dates as ISO formatted strings.</p>"},{"location":"python-cheatsheet/#example_5","title":"Example","text":"<p>Values are not actually saved in this example because <code>'conn.commit()'</code> is omitted! <pre><code>&gt;&gt;&gt; conn = sqlite3.connect('test.db')\n&gt;&gt;&gt; conn.execute('CREATE TABLE person (person_id INTEGER PRIMARY KEY, name, height)')\n&gt;&gt;&gt; conn.execute('INSERT INTO person VALUES (NULL, ?, ?)', ('Jean-Luc', 187)).lastrowid\n1\n&gt;&gt;&gt; conn.execute('SELECT * FROM person').fetchall()\n[(1, 'Jean-Luc', 187)]\n</code></pre></p>"},{"location":"python-cheatsheet/#sqlalchemy_1","title":"SqlAlchemy","text":"<pre><code># $ pip3 install sqlalchemy\nfrom sqlalchemy import create_engine, text\n&lt;engine&gt; = create_engine('&lt;url&gt;')               # Url: 'dialect://user:password@host/dbname'.\n&lt;conn&gt;   = &lt;engine&gt;.connect()                   # Creates a connection. Also &lt;conn&gt;.close().\n&lt;cursor&gt; = &lt;conn&gt;.execute(text('&lt;query&gt;'), \u2026)   # Replaces ':&lt;key&gt;'s with keyword arguments.\nwith &lt;conn&gt;.begin(): ...                        # Exits the block with commit or rollback.\n</code></pre> <pre><code>+------------+--------------+----------+----------------------------------+\n| Dialect    | pip3 install | import   |           Dependencies           |\n+------------+--------------+----------+----------------------------------+\n| mysql      | mysqlclient  | MySQLdb  | www.pypi.org/project/mysqlclient |\n| postgresql | psycopg2     | psycopg2 | www.pypi.org/project/psycopg2    |\n| mssql      | pyodbc       | pyodbc   | www.pypi.org/project/pyodbc      |\n| oracle     | oracledb     | oracledb | www.pypi.org/project/oracledb    |\n+------------+--------------+----------+----------------------------------+\n</code></pre>"},{"location":"python-cheatsheet/#bytes_1","title":"Bytes","text":"<p>Bytes object is an immutable sequence of single bytes. Mutable version is called bytearray.</p> <pre><code>&lt;bytes&gt; = b'&lt;str&gt;'                          # Only accepts ASCII characters and \\x00-\\xff.\n&lt;int&gt;   = &lt;bytes&gt;[&lt;index&gt;]                  # Returns an int in range from 0 to 255.\n&lt;bytes&gt; = &lt;bytes&gt;[&lt;slice&gt;]                  # Returns bytes even if it has only one element.\n&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_bytes&gt;)     # Joins elements using bytes as a separator.\n</code></pre>"},{"location":"python-cheatsheet/#encode_3","title":"Encode","text":"<pre><code>&lt;bytes&gt; = bytes(&lt;coll_of_ints&gt;)             # Ints must be in range from 0 to 255.\n&lt;bytes&gt; = bytes(&lt;str&gt;, 'utf-8')             # Or: &lt;str&gt;.encode('utf-8')\n&lt;bytes&gt; = &lt;int&gt;.to_bytes(n_bytes, \u2026)        # `byteorder='big/little', signed=False`.\n&lt;bytes&gt; = bytes.fromhex('&lt;hex&gt;')            # Hex pairs can be separated by whitespaces.\n</code></pre>"},{"location":"python-cheatsheet/#decode_3","title":"Decode","text":"<pre><code>&lt;list&gt;  = list(&lt;bytes&gt;)                     # Returns ints in range from 0 to 255.\n&lt;str&gt;   = str(&lt;bytes&gt;, 'utf-8')             # Or: &lt;bytes&gt;.decode('utf-8')\n&lt;int&gt;   = int.from_bytes(&lt;bytes&gt;, \u2026)        # `byteorder='big/little', signed=False`.\n'&lt;hex&gt;' = &lt;bytes&gt;.hex()                     # Returns hex pairs. Accepts `sep=&lt;str&gt;`.\n</code></pre>"},{"location":"python-cheatsheet/#read-bytes-from-file_1","title":"Read Bytes from File","text":"<pre><code>def read_bytes(filename):\n    with open(filename, 'rb') as file:\n        return file.read()\n</code></pre>"},{"location":"python-cheatsheet/#write-bytes-to-file_1","title":"Write Bytes to File","text":"<pre><code>def write_bytes(filename, bytes_obj):\n    with open(filename, 'wb') as file:\n        file.write(bytes_obj)\n</code></pre>"},{"location":"python-cheatsheet/#struct_1","title":"Struct","text":"<ul> <li>Module that performs conversions between a sequence of numbers and a bytes object.</li> <li>System\u2019s type sizes, byte order, and alignment rules are used by default.</li> </ul> <pre><code>from struct import pack, unpack\n&lt;bytes&gt; = pack('&lt;format&gt;', &lt;el_1&gt; [, ...])  # Packages arguments or raises struct.error.\n&lt;tuple&gt; = unpack('&lt;format&gt;', &lt;bytes&gt;)       # Use iter_unpack() for iterator of tuples.\n</code></pre> <pre><code>&gt;&gt;&gt; pack('&gt;hhl', 1, 2, 3)\nb'\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x03'\n&gt;&gt;&gt; unpack('&gt;hhl', b'\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x03')\n(1, 2, 3)\n</code></pre>"},{"location":"python-cheatsheet/#format_5","title":"Format","text":""},{"location":"python-cheatsheet/#for-standard-type-sizes-and-manual-alignment-padding-start-format-string-with_1","title":"For standard type sizes and manual alignment (padding) start format string with:","text":"<ul> <li><code>'='</code> - System's byte order (usually little-endian).</li> <li><code>'&lt;'</code> - Little-endian.</li> <li><code>'&gt;'</code> - Big-endian (also <code>'!'</code>).</li> </ul>"},{"location":"python-cheatsheet/#besides-numbers-pack-and-unpack-also-support-bytes-objects-as-part-of-the-sequence_1","title":"Besides numbers, pack() and unpack() also support bytes objects as part of the sequence:","text":"<ul> <li><code>'c'</code> - A bytes object with a single element. For pad byte use <code>'x'</code>.</li> <li><code>'&lt;n&gt;s'</code> - A bytes object with n elements.</li> </ul>"},{"location":"python-cheatsheet/#integer-types-use-a-capital-letter-for-unsigned-type-minimum-and-standard-sizes-are-in-brackets_1","title":"Integer types. Use a capital letter for unsigned type. Minimum and standard sizes are in brackets:","text":"<ul> <li><code>'b'</code> - char (1/1)</li> <li><code>'h'</code> - short (2/2)</li> <li><code>'i'</code> - int (2/4)</li> <li><code>'l'</code> - long (4/4)</li> <li><code>'q'</code> - long long (8/8)</li> </ul>"},{"location":"python-cheatsheet/#floating-point-types-struct-always-uses-standard-sizes_1","title":"Floating point types (struct always uses standard sizes):","text":"<ul> <li><code>'f'</code> - float (4/4)</li> <li><code>'d'</code> - double (8/8)</li> </ul>"},{"location":"python-cheatsheet/#array_1","title":"Array","text":"<p>List that can only hold numbers of a predefined type. Available types and their minimum sizes in bytes are listed above. Type sizes and byte order are always determined by the system, however bytes of each element can be swapped with byteswap() method.</p> <pre><code>from array import array\n&lt;array&gt; = array('&lt;typecode&gt;', &lt;collection&gt;)    # Array from collection of numbers.\n&lt;array&gt; = array('&lt;typecode&gt;', &lt;bytes&gt;)         # Array from bytes object.\n&lt;array&gt; = array('&lt;typecode&gt;', &lt;array&gt;)         # Treats array as a sequence of numbers.\n&lt;array&gt;.fromfile(&lt;file&gt;, n_items)              # Appends items. Raises EOFError on end.\n&lt;bytes&gt; = bytes(&lt;array&gt;)                       # Or: &lt;array&gt;.tobytes()\n&lt;file&gt;.write(&lt;array&gt;)                          # Writes array to the binary file.\n</code></pre>"},{"location":"python-cheatsheet/#memory-view_1","title":"Memory View","text":"<ul> <li>A sequence object that points to the memory of another bytes-like object.</li> <li>Each element can reference a single or multiple consecutive bytes, depending on format.</li> <li>Order and number of elements can be changed with slicing.</li> <li>Casting only works between char and other types and uses system's sizes.</li> <li>Byte order is always determined by the system.</li> </ul> <pre><code>&lt;mview&gt; = memoryview(&lt;bytes/bytearray/array&gt;)  # Immutable if bytes, else mutable.\n&lt;real&gt;  = &lt;mview&gt;[&lt;index&gt;]                     # Returns an int or a float.\n&lt;mview&gt; = &lt;mview&gt;[&lt;slice&gt;]                     # Mview with rearranged elements.\n&lt;mview&gt; = &lt;mview&gt;.cast('&lt;typecode&gt;')           # Casts memoryview to the new format.\n&lt;mview&gt;.release()                              # Releases the object's memory buffer.\n</code></pre> <pre><code>&lt;bytes&gt; = bytes(&lt;mview&gt;)                       # Returns a new bytes object.\n&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_mviews&gt;)       # Joins mviews using bytes object as sep.\n&lt;array&gt; = array('&lt;typecode&gt;', &lt;mview&gt;)         # Treats mview as a sequence of numbers.\n&lt;file&gt;.write(&lt;mview&gt;)                          # Writes mview to the binary file.\n</code></pre> <pre><code>&lt;list&gt;  = list(&lt;mview&gt;)                        # Returns a list of ints or floats.\n&lt;str&gt;   = str(&lt;mview&gt;, 'utf-8')                # Treats mview as a bytes object.\n&lt;int&gt;   = int.from_bytes(&lt;mview&gt;, \u2026)           # `byteorder='big/little', signed=False`.\n'&lt;hex&gt;' = &lt;mview&gt;.hex()                        # Treats mview as a bytes object.\n</code></pre>"},{"location":"python-cheatsheet/#deque_1","title":"Deque","text":"<p>A thread-safe list with efficient appends and pops from either side. Pronounced \"deck\".</p> <pre><code>from collections import deque\n&lt;deque&gt; = deque(&lt;collection&gt;)                  # Also `maxlen=None`.\n&lt;deque&gt;.appendleft(&lt;el&gt;)                       # Opposite element is dropped if full.\n&lt;deque&gt;.extendleft(&lt;collection&gt;)               # Collection gets reversed.\n&lt;el&gt; = &lt;deque&gt;.popleft()                       # Raises IndexError if empty.\n&lt;deque&gt;.rotate(n=1)                            # Rotates elements to the right.\n</code></pre>"},{"location":"python-cheatsheet/#threading_1","title":"Threading","text":"<p>CPython interpreter can only run a single thread at a time. Using multiple threads won't result in a faster execution, unless at least one of the threads contains an I/O operation. <pre><code>from threading import Thread, Timer, RLock, Semaphore, Event, Barrier\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n</code></pre></p>"},{"location":"python-cheatsheet/#thread_1","title":"Thread","text":"<p><pre><code>&lt;Thread&gt; = Thread(target=&lt;function&gt;)           # Use `args=&lt;collection&gt;` to set the arguments.\n&lt;Thread&gt;.start()                               # Starts the thread.\n&lt;bool&gt; = &lt;Thread&gt;.is_alive()                   # Checks if the thread has finished executing.\n&lt;Thread&gt;.join()                                # Waits for the thread to finish.\n</code></pre> * Use <code>'kwargs=&lt;dict&gt;'</code> to pass keyword arguments to the function. * Use <code>'daemon=True'</code>, or the program will not be able to exit while the thread is alive. * To delay thread execution use <code>'Timer(seconds, &lt;func&gt;)'</code> instead of Thread().</p>"},{"location":"python-cheatsheet/#lock_1","title":"Lock","text":"<pre><code>&lt;lock&gt; = RLock()                               # Lock that can only be released by acquirer.\n&lt;lock&gt;.acquire()                               # Waits for the lock to be available.\n&lt;lock&gt;.release()                               # Makes the lock available again.\n</code></pre>"},{"location":"python-cheatsheet/#or_3","title":"Or:","text":"<pre><code>with &lt;lock&gt;:                                   # Enters the block by calling acquire() and\n    ...                                        # exits it with release(), even on error.\n</code></pre>"},{"location":"python-cheatsheet/#semaphore-event-barrier_1","title":"Semaphore, Event, Barrier","text":"<pre><code>&lt;Semaphore&gt; = Semaphore(value=1)               # Lock that can be acquired by 'value' threads.\n&lt;Event&gt;     = Event()                          # Method wait() blocks until set() is called.\n&lt;Barrier&gt;   = Barrier(n_times)                 # Wait() blocks until it's called n_times.\n</code></pre>"},{"location":"python-cheatsheet/#queue_1","title":"Queue","text":"<pre><code>&lt;Queue&gt; = queue.Queue(maxsize=0)               # A thread-safe first-in-first-out queue.\n&lt;Queue&gt;.put(&lt;el&gt;)                              # Blocks until queue stops being full.\n&lt;Queue&gt;.put_nowait(&lt;el&gt;)                       # Raises queue.Full exception if full.\n&lt;el&gt; = &lt;Queue&gt;.get()                           # Blocks until queue stops being empty.\n&lt;el&gt; = &lt;Queue&gt;.get_nowait()                    # Raises queue.Empty exception if empty.\n</code></pre>"},{"location":"python-cheatsheet/#thread-pool-executor_1","title":"Thread Pool Executor","text":"<pre><code>&lt;Exec&gt; = ThreadPoolExecutor(max_workers=None)  # Or: `with ThreadPoolExecutor() as &lt;name&gt;: ...`\n&lt;iter&gt; = &lt;Exec&gt;.map(&lt;func&gt;, &lt;args_1&gt;, ...)     # Multithreaded and non-lazy map(). Keeps order.\n&lt;Futr&gt; = &lt;Exec&gt;.submit(&lt;func&gt;, &lt;arg_1&gt;, ...)   # Creates a thread and returns its Future obj.\n&lt;Exec&gt;.shutdown()                              # Blocks until all threads finish executing.\n</code></pre> <p><pre><code>&lt;bool&gt; = &lt;Future&gt;.done()                       # Checks if the thread has finished executing.\n&lt;obj&gt;  = &lt;Future&gt;.result(timeout=None)         # Waits for thread to finish and returns result.\n&lt;bool&gt; = &lt;Future&gt;.cancel()                     # Cancels or returns False if running/finished.\n&lt;iter&gt; = as_completed(&lt;coll_of_Futures&gt;)       # Next() waits for next completed Future.\n</code></pre> * Map() and as_completed() also accept 'timeout' argument that causes TimeoutError if result isn't available in 'timeout' seconds after next() is called. * Exceptions that happen inside threads are raised when next() is called on map's iterator or when result() is called on a Future. Its exception() method returns exception or None. * ProcessPoolExecutor provides true parallelism, but everything sent to/from workers must be pickable. Queues must be sent using executor's 'initargs' and 'initializer' parameters.</p>"},{"location":"python-cheatsheet/#operator_1","title":"Operator","text":"<p>Module of functions that provide the functionality of operators. Functions are ordered by operator precedence, starting with least binding. <pre><code>import operator as op\n&lt;bool&gt; = op.not_(&lt;obj&gt;)                                         # or, and, not (or/and missing)\n&lt;bool&gt; = op.eq/ne/lt/le/gt/ge/contains/is_(&lt;obj&gt;, &lt;obj&gt;)        # ==, !=, &lt;, &lt;=, &gt;, &gt;=, in, is\n&lt;obj&gt;  = op.or_/xor/and_(&lt;int/set&gt;, &lt;int/set&gt;)                  # |, ^, &amp;\n&lt;int&gt;  = op.lshift/rshift(&lt;int&gt;, &lt;int&gt;)                         # &lt;&lt;, &gt;&gt;\n&lt;obj&gt;  = op.add/sub/mul/truediv/floordiv/mod(&lt;obj&gt;, &lt;obj&gt;)      # +, -, *, /, //, %\n&lt;num&gt;  = op.neg/invert(&lt;num&gt;)                                   # -, ~\n&lt;num&gt;  = op.pow(&lt;num&gt;, &lt;num&gt;)                                   # **\n&lt;func&gt; = op.itemgetter/attrgetter/methodcaller(&lt;obj&gt; [, ...])   # [index/key], .name, .name()\n</code></pre></p> <p><pre><code>elementwise_sum  = map(op.add, list_a, list_b)\nsorted_by_second = sorted(&lt;collection&gt;, key=op.itemgetter(1))\nsorted_by_both   = sorted(&lt;collection&gt;, key=op.itemgetter(1, 0))\nproduct_of_elems = functools.reduce(op.mul, &lt;collection&gt;)\nfirst_element    = op.methodcaller('pop', 0)(&lt;list&gt;)\n</code></pre> * Bitwise operators require objects to have or(), xor(), and(), lshift(), rshift() and invert() special methods, unlike logical operators that work on all types of objects. * Also: <code>'&lt;bool&gt; = &lt;bool&gt; &amp;|^ &lt;bool&gt;'</code> and <code>'&lt;int&gt; = &lt;bool&gt; &amp;|^ &lt;int&gt;'</code>.</p>"},{"location":"python-cheatsheet/#match-statement_1","title":"Match Statement","text":"<p>Executes the first block with matching pattern. Added in Python 3.10.</p> <pre><code>match &lt;object/expression&gt;:\n    case &lt;pattern&gt; [if &lt;condition&gt;]:\n        &lt;code&gt;\n    ...\n</code></pre>"},{"location":"python-cheatsheet/#patterns_1","title":"Patterns","text":"<p><pre><code>&lt;value_pattern&gt; = 1/'abc'/True/None/math.pi          # Matches the literal or a dotted name.\n&lt;class_pattern&gt; = &lt;type&gt;()                           # Matches any object of that type.\n&lt;wildcard_patt&gt; = _                                  # Matches any object.\n&lt;capture_patt&gt;  = &lt;name&gt;                             # Matches any object and binds it to name.\n&lt;or_pattern&gt;    = &lt;pattern&gt; | &lt;pattern&gt; [| ...]      # Matches any of the patterns.\n&lt;as_pattern&gt;    = &lt;pattern&gt; as &lt;name&gt;                # Binds the match to the name.\n&lt;sequence_patt&gt; = [&lt;pattern&gt;, ...]                   # Matches sequence with matching items.\n&lt;mapping_patt&gt;  = {&lt;value_pattern&gt;: &lt;pattern&gt;, ...}  # Matches dictionary with matching items.\n&lt;class_pattern&gt; = &lt;type&gt;(&lt;attr_name&gt;=&lt;patt&gt;, ...)    # Matches object with matching attributes.\n</code></pre> * Sequence pattern can also be written as a tuple. * Use <code>'*&lt;name&gt;'</code> and <code>'**&lt;name&gt;'</code> in sequence/mapping patterns to bind remaining items. * Sequence pattern must match all items, while mapping pattern does not. * Patterns can be surrounded with brackets to override precedence (<code>'|'</code> &gt; <code>'as'</code> &gt; <code>','</code>). * Built-in types allow a single positional pattern that is matched against the entire object. * All names that are bound in the matching case, as well as variables initialized in its block, are visible after the match statement.</p>"},{"location":"python-cheatsheet/#example_6","title":"Example","text":"<pre><code>&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; match Path('/home/gto/python-cheatsheet/README.md'):\n...     case Path(\n...         parts=['/', 'home', user, *_],\n...         stem=stem,\n...         suffix=('.md' | '.txt') as suffix\n...     ) if stem.lower() == 'readme':\n...         print(f'{stem}{suffix} is a readme file that belongs to user {user}.')\n'README.md is a readme file that belongs to user gto.'\n</code></pre>"},{"location":"python-cheatsheet/#logging_1","title":"Logging","text":"<pre><code>import logging\n</code></pre> <pre><code>logging.basicConfig(filename=&lt;path&gt;, level='DEBUG')  # Configures the root logger (see Setup).\nlogging.debug/info/warning/error/critical(&lt;str&gt;)     # Logs to the root logger.\n&lt;Logger&gt; = logging.getLogger(__name__)               # Logger named after the module.\n&lt;Logger&gt;.&lt;level&gt;(&lt;str&gt;)                              # Logs to the logger.\n&lt;Logger&gt;.exception(&lt;str&gt;)                            # Calls error() with caught exception.\n</code></pre>"},{"location":"python-cheatsheet/#setup_1","title":"Setup","text":"<pre><code>logging.basicConfig(\n    filename=None,                                   # Logs to console (stderr) by default.\n    format='%(levelname)s:%(name)s:%(message)s',     # Add '%(asctime)s' for local datetime.\n    level=logging.WARNING,                           # Drops messages with lower priority.\n    handlers=[logging.StreamHandler(sys.stderr)]     # Uses FileHandler if filename is set.\n)\n</code></pre> <p><pre><code>&lt;Formatter&gt; = logging.Formatter('&lt;format&gt;')          # Creates a Formatter.\n&lt;Handler&gt; = logging.FileHandler(&lt;path&gt;, mode='a')    # Creates a Handler. Also `encoding=None`.\n&lt;Handler&gt;.setFormatter(&lt;Formatter&gt;)                  # Adds Formatter to the Handler.\n&lt;Handler&gt;.setLevel(&lt;int/str&gt;)                        # Processes all messages by default.\n&lt;Logger&gt;.addHandler(&lt;Handler&gt;)                       # Adds Handler to the Logger.\n&lt;Logger&gt;.setLevel(&lt;int/str&gt;)                         # What is sent to its/ancestor's handlers.\n</code></pre> * Parent logger can be specified by naming the child logger <code>'&lt;parent&gt;.&lt;name&gt;'</code>. * If logger doesn't have a set level it inherits it from the first ancestor that does. * Formatter also accepts: pathname, filename, funcName, lineno, thread and process. * A <code>'handlers.RotatingFileHandler'</code> creates and deletes log files based on 'maxBytes' and 'backupCount' arguments.</p>"},{"location":"python-cheatsheet/#creates-a-logger-that-writes-all-messages-to-file-and-sends-them-to-the-roots-handler-that-prints-warnings-or-higher_1","title":"Creates a logger that writes all messages to file and sends them to the root's handler that prints warnings or higher:","text":"<pre><code>&gt;&gt;&gt; logger = logging.getLogger('my_module')\n&gt;&gt;&gt; handler = logging.FileHandler('test.log', encoding='utf-8')\n&gt;&gt;&gt; formatter = logging.Formatter('%(asctime)s %(levelname)s:%(name)s:%(message)s')\n&gt;&gt;&gt; handler.setFormatter(formatter)\n&gt;&gt;&gt; logger.addHandler(handler)\n&gt;&gt;&gt; logging.basicConfig(level='DEBUG')\n&gt;&gt;&gt; logging.root.handlers[0].setLevel('WARNING')\n&gt;&gt;&gt; logger.critical('Running out of disk space.')\nCRITICAL:my_module:Running out of disk space.\n&gt;&gt;&gt; print(open('test.log').read())\n2023-02-07 23:21:01,430 CRITICAL:my_module:Running out of disk space.\n</code></pre>"},{"location":"python-cheatsheet/#introspection_1","title":"Introspection","text":"<pre><code>&lt;list&gt; = dir()                             # Names of local variables, functions, classes, etc.\n&lt;dict&gt; = vars()                            # Dict of local variables, etc. Also locals().\n&lt;dict&gt; = globals()                         # Dict of global vars, etc. (incl. '__builtins__').\n</code></pre> <pre><code>&lt;list&gt; = dir(&lt;object&gt;)                     # Names of object's attributes (including methods).\n&lt;dict&gt; = vars(&lt;object&gt;)                    # Dict of writable attributes. Also &lt;obj&gt;.__dict__.\n&lt;bool&gt; = hasattr(&lt;object&gt;, '&lt;attr_name&gt;')  # Checks if getattr() raises an AttributeError.\nvalue  = getattr(&lt;object&gt;, '&lt;attr_name&gt;')  # Raises AttributeError if attribute is missing.\nsetattr(&lt;object&gt;, '&lt;attr_name&gt;', value)    # Only works on objects with '__dict__' attribute.\ndelattr(&lt;object&gt;, '&lt;attr_name&gt;')           # Same. Also `del &lt;object&gt;.&lt;attr_name&gt;`.\n</code></pre> <pre><code>&lt;Sig&gt;  = inspect.signature(&lt;function&gt;)     # Function's Signature object.\n&lt;dict&gt; = &lt;Sig&gt;.parameters                  # Dict of Parameter objects.\n&lt;memb&gt; = &lt;Param&gt;.kind                      # Member of ParameterKind enum.\n&lt;obj&gt;  = &lt;Param&gt;.default                   # Default value or Parameter.empty.\n&lt;type&gt; = &lt;Param&gt;.annotation                # Type or Parameter.empty.\n</code></pre>"},{"location":"python-cheatsheet/#coroutines_1","title":"Coroutines","text":"<ul> <li>Coroutines have a lot in common with threads, but unlike threads, they only give up control when they call another coroutine and they don\u2019t use as much memory.</li> <li>Coroutine definition starts with <code>'async'</code> and its call with <code>'await'</code>.</li> <li><code>'asyncio.run(&lt;coroutine&gt;)'</code> is the main entry point for asynchronous programs.</li> <li>Functions wait(), gather() and as_completed() start multiple coroutines at the same time.</li> <li>Asyncio module also provides its own Queue, Event, Lock and Semaphore classes.</li> </ul>"},{"location":"python-cheatsheet/#runs-a-terminal-game-where-you-control-an-asterisk-that-must-avoid-numbers_1","title":"Runs a terminal game where you control an asterisk that must avoid numbers:","text":"<p><pre><code>import asyncio, collections, curses, curses.textpad, enum, random, time\n\nP = collections.namedtuple('P', 'x y')         # Position\nD = enum.Enum('D', 'n e s w')                  # Direction\nW, H = 15, 7                                   # Width, Height\n\ndef main(screen):\n    curses.curs_set(0)                         # Makes cursor invisible.\n    screen.nodelay(True)                       # Makes getch() non-blocking.\n    asyncio.run(main_coroutine(screen))        # Starts running asyncio code.\n\nasync def main_coroutine(screen):\n    moves = asyncio.Queue()\n    state = {'*': P(0, 0), **{id_: P(W//2, H//2) for id_ in range(10)}}\n    ai    = [random_controller(id_, moves) for id_ in range(10)]\n    mvc   = [human_controller(screen, moves), model(moves, state), view(state, screen)]\n    tasks = [asyncio.create_task(cor) for cor in ai + mvc]\n    await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)\n\nasync def random_controller(id_, moves):\n    while True:\n        d = random.choice(list(D))\n        moves.put_nowait((id_, d))\n        await asyncio.sleep(random.triangular(0.01, 0.65))\n\nasync def human_controller(screen, moves):\n    while True:\n        key_mappings = {258: D.s, 259: D.n, 260: D.w, 261: D.e}\n        ch = screen.getch()\n        if d := key_mappings.get(ch):\n            moves.put_nowait(('*', d))\n        await asyncio.sleep(0.005)\n\nasync def model(moves, state):\n    while state['*'] not in (state[id_] for id_ in range(10)):\n        id_, d = await moves.get()\n        x, y   = state[id_]\n        deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}\n        dx, dy = deltas[d]\n        state[id_] = P((x + dx) % W, (y + dy) % H)\n\nasync def view(state, screen):\n    offset = P(curses.COLS//2 - W//2, curses.LINES//2 - H//2)\n    while True:\n        screen.erase()\n        curses.textpad.rectangle(screen, offset.y-1, offset.x-1, offset.y+H, offset.x+W)\n        for id_, p in state.items():\n            screen.addstr(\n                offset.y + (p.y - state['*'].y + H//2) % H,\n                offset.x + (p.x - state['*'].x + W//2) % W,\n                str(id_)\n            )\n        screen.refresh()\n        await asyncio.sleep(0.005)\n\nif __name__ == '__main__':\n    start_time = time.perf_counter()\n    curses.wrapper(main)\n    print(f'You survived {time.perf_counter() - start_time:.2f} seconds.')\n</code></pre> </p>"},{"location":"python-cheatsheet/#libraries_1","title":"Libraries","text":""},{"location":"python-cheatsheet/#progress-bar_1","title":"Progress Bar","text":"<pre><code># $ pip3 install tqdm\n&gt;&gt;&gt; import tqdm, time\n&gt;&gt;&gt; for el in tqdm.tqdm([1, 2, 3], desc='Processing'):\n...     time.sleep(1)\nProcessing: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:03&lt;00:00,  1.00s/it]\n</code></pre>"},{"location":"python-cheatsheet/#plot_1","title":"Plot","text":"<pre><code># $ pip3 install matplotlib\nimport matplotlib.pyplot as plt\n\nplt.plot/bar/scatter(x_data, y_data [, label=&lt;str&gt;])  # Or: plt.plot(y_data)\nplt.legend()                                          # Adds a legend.\nplt.savefig(&lt;path&gt;)                                   # Saves the figure.\nplt.show()                                            # Displays the figure.\nplt.clf()                                             # Clears the figure.\n</code></pre>"},{"location":"python-cheatsheet/#table_1","title":"Table","text":""},{"location":"python-cheatsheet/#prints-a-csv-file-as-an-ascii-table_1","title":"Prints a CSV file as an ASCII table:","text":"<pre><code># $ pip3 install tabulate\nimport csv, tabulate\nwith open('test.csv', encoding='utf-8', newline='') as file:\n    rows = list(csv.reader(file))\nprint(tabulate.tabulate(rows, headers='firstrow'))\n</code></pre>"},{"location":"python-cheatsheet/#curses_1","title":"Curses","text":""},{"location":"python-cheatsheet/#runs-a-basic-file-explorer-in-the-console_1","title":"Runs a basic file explorer in the console:","text":"<pre><code># $ pip3 install windows-curses\nimport curses, os\nfrom curses import A_REVERSE, KEY_DOWN, KEY_UP, KEY_LEFT, KEY_RIGHT, KEY_ENTER\n\ndef main(screen):\n    ch, first, selected, paths = 0, 0, 0, os.listdir()\n    while ch != ord('q'):\n        height, width = screen.getmaxyx()\n        screen.erase()\n        for y, filename in enumerate(paths[first : first+height]):\n            color = A_REVERSE if filename == paths[selected] else 0\n            screen.addnstr(y, 0, filename, width-1, color)\n        ch = screen.getch()\n        selected += (ch == KEY_DOWN) - (ch == KEY_UP)\n        selected = max(0, min(len(paths)-1, selected))\n        first += (selected &gt;= first + height) - (selected &lt; first)\n        if ch in [KEY_LEFT, KEY_RIGHT, KEY_ENTER, ord('\\n'), ord('\\r')]:\n            new_dir = '..' if ch == KEY_LEFT else paths[selected]\n            if os.path.isdir(new_dir):\n                os.chdir(new_dir)\n                first, selected, paths = 0, 0, os.listdir()\n\nif __name__ == '__main__':\n    curses.wrapper(main)\n</code></pre>"},{"location":"python-cheatsheet/#pysimplegui_1","title":"PySimpleGUI","text":""},{"location":"python-cheatsheet/#a-weight-converter-gui-application_1","title":"A weight converter GUI application:","text":"<pre><code># $ pip3 install PySimpleGUI\nimport PySimpleGUI as sg\n\ntext_box = sg.Input(default_text='100', enable_events=True, key='-VALUE-')\ndropdown = sg.InputCombo(['g', 'kg', 't'], 'kg', readonly=True, enable_events=True, k='-UNIT-')\nlabel    = sg.Text('100 kg is 220.462 lbs.', key='-OUTPUT-')\nbutton   = sg.Button('Close')\nwindow   = sg.Window('Weight Converter', [[text_box, dropdown], [label], [button]])\n\nwhile True:\n    event, values = window.read()\n    if event in [sg.WIN_CLOSED, 'Close']:\n        break\n    try:\n        value = float(values['-VALUE-'])\n    except ValueError:\n        continue\n    unit = values['-UNIT-']\n    factors = {'g': 0.001, 'kg': 1, 't': 1000}\n    lbs = value * factors[unit] / 0.45359237\n    window['-OUTPUT-'].update(value=f'{value} {unit} is {lbs:g} lbs.')\nwindow.close()\n</code></pre>"},{"location":"python-cheatsheet/#scraping_1","title":"Scraping","text":""},{"location":"python-cheatsheet/#scrapes-pythons-url-and-logo-from-its-wikipedia-page_1","title":"Scrapes Python's URL and logo from its Wikipedia page:","text":"<pre><code># $ pip3 install requests beautifulsoup4\nimport requests, bs4, os\n\nresponse   = requests.get('https://en.wikipedia.org/wiki/Python_(programming_language)')\ndocument   = bs4.BeautifulSoup(response.text, 'html.parser')\ntable      = document.find('table', class_='infobox vevent')\npython_url = table.find('th', text='Website').next_sibling.a['href']\nlogo_url   = table.find('img')['src']\nlogo       = requests.get(f'https:{logo_url}').content\nfilename   = os.path.basename(logo_url)\nwith open(filename, 'wb') as file:\n    file.write(logo)\nprint(f'{python_url}, file://{os.path.abspath(filename)}')\n</code></pre>"},{"location":"python-cheatsheet/#selenium_1","title":"Selenium","text":"<p>Library for scraping websites with dynamic content. <pre><code># $ pip3 install selenium\nfrom selenium import webdriver\n\n&lt;Drv&gt; = webdriver.Chrome/Firefox/Safari/Edge()         # Opens the browser. Also &lt;Drv&gt;.quit().\n&lt;Drv&gt;.get('&lt;url&gt;')                                     # Also &lt;Drv&gt;.implicitly_wait(seconds).\n&lt;El&gt; = &lt;Drv/El&gt;.find_element('css selector', '&lt;css&gt;')  # '&lt;tag&gt;#&lt;id&gt;.&lt;class&gt;[&lt;attr&gt;=\"&lt;val&gt;\"]'.\n&lt;list&gt; = &lt;Drv/El&gt;.find_elements('xpath', '&lt;xpath&gt;')    # '//&lt;tag&gt;[@&lt;attr&gt;=\"&lt;val&gt;\"]'.\n&lt;str&gt; = &lt;El&gt;.get_attribute/get_property(&lt;str&gt;)         # Also &lt;El&gt;.text/tag_name.\n&lt;El&gt;.click/clear()                                     # Also &lt;El&gt;.send_keys(&lt;str&gt;).\n</code></pre></p>"},{"location":"python-cheatsheet/#xpath-also-available-in-browsers-console-via-xxpath_1","title":"XPath \u2014 also available in browser's console via <code>'$x(&lt;xpath&gt;)'</code>:","text":"<pre><code>&lt;xpath&gt;     = //&lt;element&gt;[/ or // &lt;element&gt;]           # Child: /, Descendant: //, Parent: /..\n&lt;xpath&gt;     = //&lt;element&gt;/following::&lt;element&gt;         # Next sibling. Also preceding/parent/\u2026\n&lt;element&gt;   = &lt;tag&gt;&lt;conditions&gt;&lt;index&gt;                 # `&lt;tag&gt; = */a/\u2026`, `&lt;index&gt; = [1/2/\u2026]`.\n&lt;condition&gt; = [&lt;sub_cond&gt; [and/or &lt;sub_cond&gt;]]         # `and` is same as chaining conditions.\n&lt;sub_cond&gt;  = @&lt;attr&gt;=\"&lt;val&gt;\"                          # `.=\"&lt;val&gt;\"` matches complete text.\n&lt;sub_cond&gt;  = contains(@&lt;attr&gt;, \"&lt;val&gt;\")               # Is &lt;val&gt; a substring of attr's value?\n&lt;sub_cond&gt;  = [//]&lt;element&gt;                            # Has matching child? Descendant if //.\n</code></pre>"},{"location":"python-cheatsheet/#web_1","title":"Web","text":"<p>Flask is a micro web framework/server. If you just want to open a html file in a web browser use <code>'webbrowser.open(&lt;path&gt;)'</code> instead. <pre><code># $ pip3 install flask\nimport flask\n</code></pre></p> <p><pre><code>app = flask.Flask(__name__)\napp.run(host=None, port=None, debug=None)\n</code></pre> * Starts the app at <code>'http://localhost:5000'</code>. Use <code>'host=\"0.0.0.0\"'</code> to run externally. * Install a WSGI server like Waitress and a HTTP server such as Nginx for better security. * Debug mode restarts the app whenever script changes and displays errors in the browser.</p>"},{"location":"python-cheatsheet/#static-request_1","title":"Static Request","text":"<pre><code>@app.route('/img/&lt;path:filename&gt;')\ndef serve_file(filename):\n    return flask.send_from_directory('dirname/', filename)\n</code></pre>"},{"location":"python-cheatsheet/#dynamic-request_1","title":"Dynamic Request","text":"<p><pre><code>@app.route('/&lt;sport&gt;')\ndef serve_html(sport):\n    return flask.render_template_string('&lt;h1&gt;{{title}}&lt;/h1&gt;', title=sport)\n</code></pre> * Use <code>'render_template(filename, &lt;kwargs&gt;)'</code> to render file located in templates dir. * To return an error code use <code>'abort(&lt;int&gt;)'</code> and to redirect use <code>'redirect(&lt;url&gt;)'</code>. * <code>'request.args[&lt;str&gt;]'</code> returns parameter from the query string (URL part after '?'). * Use <code>'session[key] = value'</code> to store session data like username, etc.</p>"},{"location":"python-cheatsheet/#rest-request_1","title":"REST Request","text":"<pre><code>@app.post('/&lt;sport&gt;/odds')\ndef serve_json(sport):\n    team = flask.request.form['team']\n    return {'team': team, 'odds': [2.09, 3.74, 3.68]}\n</code></pre>"},{"location":"python-cheatsheet/#starts-the-app-in-its-own-thread-and-queries-its-rest-api_1","title":"Starts the app in its own thread and queries its REST API:","text":"<pre><code># $ pip3 install requests\n&gt;&gt;&gt; import threading, requests\n&gt;&gt;&gt; threading.Thread(target=app.run, daemon=True).start()\n&gt;&gt;&gt; url = 'http://localhost:5000/football/odds'\n&gt;&gt;&gt; request_data = {'team': 'arsenal f.c.'}\n&gt;&gt;&gt; response = requests.post(url, data=request_data)\n&gt;&gt;&gt; response.json()\n{'team': 'arsenal f.c.', 'odds': [2.09, 3.74, 3.68]}\n</code></pre>"},{"location":"python-cheatsheet/#profiling_1","title":"Profiling","text":"<pre><code>from time import perf_counter\nstart_time = perf_counter()\n...\nduration_in_seconds = perf_counter() - start_time\n</code></pre>"},{"location":"python-cheatsheet/#timing-a-snippet_1","title":"Timing a Snippet","text":"<pre><code>&gt;&gt;&gt; from timeit import timeit\n&gt;&gt;&gt; timeit('list(range(10000))', number=1000, globals=globals(), setup='pass')\n0.19373\n</code></pre>"},{"location":"python-cheatsheet/#profiling-by-line_1","title":"Profiling by Line","text":"<pre><code>$ pip3 install line_profiler\n$ echo '@profile\ndef main():\n    a = list(range(10000))\n    b = set(range(10000))\nmain()' &gt; test.py\n$ kernprof -lv test.py\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n     1                                           @profile\n     2                                           def main():\n     3         1        253.4    253.4     32.2      a = list(range(10000))\n     4         1        534.1    534.1     67.8      b = set(range(10000))\n</code></pre>"},{"location":"python-cheatsheet/#call-and-flame-graphs_1","title":"Call and Flame Graphs","text":"<pre><code>$ apt/brew install graphviz &amp;&amp; pip3 install gprof2dot snakeviz\n$ tail --lines=4 test.py &gt; test.py\n$ python3 -m cProfile -o test.prof test.py\n$ gprof2dot --format=pstats test.prof | dot -T png -o test.png\n$ xdg-open/open test.png\n$ snakeviz test.prof\n</code></pre>"},{"location":"python-cheatsheet/#sampling-and-memory-profilers_1","title":"Sampling and Memory Profilers","text":"<pre><code>+--------------+----------+------------+-------------------------------+------+\n| pip3 install |   Type   |   Target   |          How to run           | Live |\n+--------------+----------+------------+-------------------------------+------+\n| pyinstrument | Sampling |    CPU     | pyinstrument test.py          | No   |\n| py-spy       | Sampling |    CPU     | py-spy top -- python3 test.py | Yes  |\n| scalene      | Sampling | CPU+Memory | scalene test.py               | No   |\n| memray       | Tracing  |   Memory   | memray run --live test.py     | Yes  |\n+--------------+----------+------------+-------------------------------+------+\n</code></pre>"},{"location":"python-cheatsheet/#numpy_1","title":"NumPy","text":"<p>Array manipulation mini-language. It can run up to one hundred times faster than the equivalent Python code. An even faster alternative that runs on a GPU is called CuPy.</p> <pre><code># $ pip3 install numpy\nimport numpy as np\n</code></pre> <pre><code>&lt;array&gt; = np.array(&lt;list/list_of_lists/\u2026&gt;)              # Returns a 1d/2d/\u2026 NumPy array.\n&lt;array&gt; = np.zeros/ones/empty(&lt;shape&gt;)                  # Also np.full(&lt;shape&gt;, &lt;el&gt;).\n&lt;array&gt; = np.arange(from_inc, to_exc, \u00b1step)            # Also np.linspace(start, stop, len).\n&lt;array&gt; = np.random.randint(from_inc, to_exc, &lt;shape&gt;)  # Also np.random.random(&lt;shape&gt;).\n</code></pre> <pre><code>&lt;view&gt;  = &lt;array&gt;.reshape(&lt;shape&gt;)                      # Also `&lt;array&gt;.shape = &lt;shape&gt;`.\n&lt;array&gt; = &lt;array&gt;.flatten()                             # Also `&lt;view&gt; = &lt;array&gt;.ravel()`.\n&lt;view&gt;  = &lt;array&gt;.transpose()                           # Or: &lt;array&gt;.T\n</code></pre> <pre><code>&lt;array&gt; = np.copy/abs/sqrt/log/int64(&lt;array&gt;)           # Returns new array of the same shape.\n&lt;array&gt; = &lt;array&gt;.sum/max/mean/argmax/all(axis)         # Passed dimension gets aggregated.\n&lt;array&gt; = np.apply_along_axis(&lt;func&gt;, axis, &lt;array&gt;)    # Func can return a scalar or array.\n</code></pre> <p><pre><code>&lt;array&gt; = np.concatenate(&lt;list_of_arrays&gt;, axis=0)      # Links arrays along first axis (rows).\n&lt;array&gt; = np.row_stack/column_stack(&lt;list_of_arrays&gt;)   # Treats 1d arrays as rows or columns.\n&lt;array&gt; = np.tile/repeat(&lt;array&gt;, &lt;int/list&gt; [, axis])  # Tiles array or repeats its elements.\n</code></pre> * Shape is a tuple of dimension sizes. A 100x50 RGB image has shape (50, 100, 3). * Axis is an index of the dimension that gets aggregated. Leftmost dimension has index 0. Summing the RGB image along axis 2 will return a greyscale image with shape (50, 100).</p>"},{"location":"python-cheatsheet/#indexing_1","title":"Indexing","text":"<pre><code>&lt;el&gt;       = &lt;2d_array&gt;[row_index, column_index]        # &lt;3d_a&gt;[table_i, row_i, column_i]\n&lt;1d_view&gt;  = &lt;2d_array&gt;[row_index]                      # &lt;3d_a&gt;[table_i, row_i]\n&lt;1d_view&gt;  = &lt;2d_array&gt;[:, column_index]                # &lt;3d_a&gt;[table_i, :, column_i]\n&lt;2d_view&gt;  = &lt;2d_array&gt;[rows_slice, columns_slice]      # &lt;3d_a&gt;[table_i, rows_s, columns_s]\n</code></pre> <pre><code>&lt;2d_array&gt; = &lt;2d_array&gt;[row_indexes]                    # &lt;3d_a&gt;[table_i/is, row_is]\n&lt;2d_array&gt; = &lt;2d_array&gt;[:, column_indexes]              # &lt;3d_a&gt;[table_i/is, :, column_is]\n&lt;1d_array&gt; = &lt;2d_array&gt;[row_indexes, column_indexes]    # &lt;3d_a&gt;[table_i/is, row_is, column_is]\n&lt;1d_array&gt; = &lt;2d_array&gt;[row_indexes, column_index]      # &lt;3d_a&gt;[table_i/is, row_is, column_i]\n</code></pre> <p><pre><code>&lt;2d_bools&gt; = &lt;2d_array&gt; &gt; &lt;el/1d/2d_array&gt;              # 1d_array must have size of a row.\n&lt;1d/2d_a&gt;  = &lt;2d_array&gt;[&lt;2d/1d_bools&gt;]                  # 1d_bools must have size of a column.\n</code></pre> * Indexes should not be tuples because Python converts <code>'obj[i, j]'</code>  to <code>'obj[(i, j)]'</code>! * <code>':'</code> returns a slice of all dimension's indexes. Omitted dimensions default to <code>':'</code>. * Any value that is broadcastable to the indexed shape can be assigned to the selection.</p>"},{"location":"python-cheatsheet/#broadcasting_1","title":"Broadcasting","text":"<p>Set of rules by which NumPy functions operate on arrays of different sizes and/or dimensions.</p> <pre><code>left  = [[0.1], [0.6], [0.8]]                           # Shape: (3, 1)\nright = [ 0.1 ,  0.6 ,  0.8 ]                           # Shape: (3,)\n</code></pre>"},{"location":"python-cheatsheet/#1-if-array-shapes-differ-in-length-left-pad-the-shorter-shape-with-ones_1","title":"1. If array shapes differ in length, left-pad the shorter shape with ones:","text":"<pre><code>left  = [[0.1], [0.6], [0.8]]                           # Shape: (3, 1)\nright = [[0.1 ,  0.6 ,  0.8]]                           # Shape: (1, 3) &lt;- !\n</code></pre>"},{"location":"python-cheatsheet/#2-if-any-dimensions-differ-in-size-expand-the-ones-that-have-size-1-by-duplicating-their-elements_1","title":"2. If any dimensions differ in size, expand the ones that have size 1 by duplicating their elements:","text":"<pre><code>left  = [[0.1,  0.1,  0.1],                             # Shape: (3, 3) &lt;- !\n         [0.6,  0.6,  0.6],\n         [0.8,  0.8,  0.8]]\n\nright = [[0.1,  0.6,  0.8],                             # Shape: (3, 3) &lt;- !\n         [0.1,  0.6,  0.8],\n         [0.1,  0.6,  0.8]]\n</code></pre>"},{"location":"python-cheatsheet/#example_7","title":"Example","text":""},{"location":"python-cheatsheet/#for-each-point-returns-index-of-its-nearest-point-01-06-08-1-2-1_1","title":"For each point returns index of its nearest point (<code>[0.1, 0.6, 0.8] =&gt; [1, 2, 1]</code>):","text":"<pre><code>&gt;&gt;&gt; points = np.array([0.1, 0.6, 0.8])\n [ 0.1,  0.6,  0.8]\n&gt;&gt;&gt; wrapped_points = points.reshape(3, 1)\n[[ 0.1],\n [ 0.6],\n [ 0.8]]\n&gt;&gt;&gt; distances = wrapped_points - points\n[[ 0. , -0.5, -0.7],\n [ 0.5,  0. , -0.2],\n [ 0.7,  0.2,  0. ]]\n&gt;&gt;&gt; distances = np.abs(distances)\n[[ 0. ,  0.5,  0.7],\n [ 0.5,  0. ,  0.2],\n [ 0.7,  0.2,  0. ]]\n&gt;&gt;&gt; distances[range(3), range(3)] = np.inf\n[[ inf,  0.5,  0.7],\n [ 0.5,  inf,  0.2],\n [ 0.7,  0.2,  inf]]\n&gt;&gt;&gt; distances.argmin(1)\n[1, 2, 1]\n</code></pre>"},{"location":"python-cheatsheet/#image_1","title":"Image","text":"<pre><code># $ pip3 install pillow\nfrom PIL import Image\n</code></pre> <pre><code>&lt;Image&gt; = Image.new('&lt;mode&gt;', (width, height))  # Also `color=&lt;int/tuple/str&gt;`.\n&lt;Image&gt; = Image.open(&lt;path&gt;)                    # Identifies format based on file contents.\n&lt;Image&gt; = &lt;Image&gt;.convert('&lt;mode&gt;')             # Converts image to the new mode.\n&lt;Image&gt;.save(&lt;path&gt;)                            # Selects format based on the path extension.\n&lt;Image&gt;.show()                                  # Opens image in the default preview app.\n</code></pre> <pre><code>&lt;int/tuple&gt; = &lt;Image&gt;.getpixel((x, y))          # Returns pixel's value (its color).\n&lt;Image&gt;.putpixel((x, y), &lt;int/tuple&gt;)           # Updates pixel's value.\n&lt;ImagingCore&gt; = &lt;Image&gt;.getdata()               # Returns a flattened view of pixel values.\n&lt;Image&gt;.putdata(&lt;list/ImagingCore&gt;)             # Updates pixels with a copy of the sequence.\n&lt;Image&gt;.paste(&lt;Image&gt;, (x, y))                  # Draws passed image at specified location.\n</code></pre> <pre><code>&lt;Image&gt; = &lt;Image&gt;.filter(&lt;Filter&gt;)              # `&lt;Filter&gt; = ImageFilter.&lt;name&gt;([&lt;args&gt;])`\n&lt;Image&gt; = &lt;Enhance&gt;.enhance(&lt;float&gt;)            # `&lt;Enhance&gt; = ImageEnhance.&lt;name&gt;(&lt;Image&gt;)`\n</code></pre> <pre><code>&lt;array&gt; = np.array(&lt;Image&gt;)                     # Creates a 2d/3d NumPy array from the image.\n&lt;Image&gt; = Image.fromarray(np.uint8(&lt;array&gt;))    # Use `&lt;array&gt;.clip(0, 255)` to clip values.\n</code></pre>"},{"location":"python-cheatsheet/#modes_3","title":"Modes","text":"<ul> <li><code>'L'</code> - 8-bit pixels, greyscale.</li> <li><code>'RGB'</code> - 3x8-bit pixels, true color.</li> <li><code>'RGBA'</code> - 4x8-bit pixels, true color with transparency mask.</li> <li><code>'HSV'</code> - 3x8-bit pixels, Hue, Saturation, Value color space.</li> </ul>"},{"location":"python-cheatsheet/#examples_2","title":"Examples","text":""},{"location":"python-cheatsheet/#creates-a-png-image-of-a-rainbow-gradient_1","title":"Creates a PNG image of a rainbow gradient:","text":"<pre><code>WIDTH, HEIGHT = 100, 100\nn_pixels = WIDTH * HEIGHT\nhues = (255 * i/n_pixels for i in range(n_pixels))\nimg = Image.new('HSV', (WIDTH, HEIGHT))\nimg.putdata([(int(h), 255, 255) for h in hues])\nimg.convert('RGB').save('test.png')\n</code></pre>"},{"location":"python-cheatsheet/#adds-noise-to-the-png-image-and-displays-it_1","title":"Adds noise to the PNG image and displays it:","text":"<pre><code>from random import randint\nadd_noise = lambda value: max(0, min(255, value + randint(-20, 20)))\nimg = Image.open('test.png').convert('HSV')\nimg.putdata([(add_noise(h), s, v) for h, s, v in img.getdata()])\nimg.show()\n</code></pre>"},{"location":"python-cheatsheet/#image-draw_1","title":"Image Draw","text":"<p><pre><code>from PIL import ImageDraw\n&lt;ImageDraw&gt; = ImageDraw.Draw(&lt;Image&gt;)           # Object for adding 2D graphics to the image.\n&lt;ImageDraw&gt;.point((x, y))                       # Draws a point. Truncates floats into ints.\n&lt;ImageDraw&gt;.line((x1, y1, x2, y2 [, ...]))      # To get anti-aliasing use Image's resize().\n&lt;ImageDraw&gt;.arc((x1, y1, x2, y2), deg1, deg2)   # Always draws in clockwise direction.\n&lt;ImageDraw&gt;.rectangle((x1, y1, x2, y2))         # To rotate use Image's rotate() and paste().\n&lt;ImageDraw&gt;.polygon((x1, y1, x2, y2, ...))      # Last point gets connected to the first.\n&lt;ImageDraw&gt;.ellipse((x1, y1, x2, y2))           # To rotate use Image's rotate() and paste().\n&lt;ImageDraw&gt;.text((x, y), text, font=&lt;Font&gt;)     # `&lt;Font&gt; = ImageFont.truetype(&lt;path&gt;, size)`\n</code></pre> * Use <code>'fill=&lt;color&gt;'</code> to set the primary color. * Use <code>'width=&lt;int&gt;'</code> to set the width of lines or contours. * Use <code>'outline=&lt;color&gt;'</code> to set the color of the contours. * Color can be an int, tuple, <code>'#rrggbb[aa]'</code> string or a color name.</p>"},{"location":"python-cheatsheet/#animation_1","title":"Animation","text":""},{"location":"python-cheatsheet/#creates-a-gif-of-a-bouncing-ball_1","title":"Creates a GIF of a bouncing ball:","text":"<pre><code># $ pip3 install imageio\nfrom PIL import Image, ImageDraw\nimport imageio\n\nWIDTH, HEIGHT, R = 126, 126, 10\nframes = []\nfor velocity in range(1, 16):\n    y = sum(range(velocity))\n    frame = Image.new('L', (WIDTH, HEIGHT))\n    draw = ImageDraw.Draw(frame)\n    draw.ellipse((WIDTH/2-R, y, WIDTH/2+R, y+R*2), fill='white')\n    frames.append(frame)\nframes += reversed(frames[1:-1])\nimageio.mimsave('test.gif', frames, duration=0.03)\n</code></pre>"},{"location":"python-cheatsheet/#audio_1","title":"Audio","text":"<pre><code>import wave\n</code></pre> <pre><code>&lt;Wave&gt;   = wave.open('&lt;path&gt;', 'rb')   # Opens the WAV file.\n&lt;int&gt;    = &lt;Wave&gt;.getframerate()       # Returns number of frames per second.\n&lt;int&gt;    = &lt;Wave&gt;.getnchannels()       # Returns number of samples per frame.\n&lt;int&gt;    = &lt;Wave&gt;.getsampwidth()       # Returns number of bytes per sample.\n&lt;params&gt; = &lt;Wave&gt;.getparams()          # Returns collection of listed params.\n&lt;bytes&gt;  = &lt;Wave&gt;.readframes(nframes)  # Returns next n frames. All if -1.\n</code></pre> <p><pre><code>&lt;Wave&gt; = wave.open('&lt;path&gt;', 'wb')     # Opens WAV file for writing.\n&lt;Wave&gt;.setframerate(&lt;int&gt;)             # Pass 44100 for CD, 48000 for video.\n&lt;Wave&gt;.setnchannels(&lt;int&gt;)             # Pass 1 for mono, 2 for stereo.\n&lt;Wave&gt;.setsampwidth(&lt;int&gt;)             # Pass 1 for 8-bit sound, 2 for CD.\n&lt;Wave&gt;.setparams(&lt;params&gt;)             # Sets all parameters.\n&lt;Wave&gt;.writeframes(&lt;bytes&gt;)            # Appends frames to the file.\n</code></pre> * Bytes object contains a sequence of frames, each consisting of one or more samples. * In a stereo signal, the first sample of a frame belongs to the left channel. * Each sample consists of one or more bytes that, when converted to an integer, indicate the displacement of a speaker membrane at a given moment. * If sample width is one byte, then the integer should be encoded unsigned. * For all other sizes, the integer should be encoded signed with little-endian byte order.</p>"},{"location":"python-cheatsheet/#sample-values_1","title":"Sample Values","text":"<pre><code>+-----------+-----------+------+-----------+\n| sampwidth |    min    | zero |    max    |\n+-----------+-----------+------+-----------+\n|     1     |         0 |  128 |       255 |\n|     2     |    -32768 |    0 |     32767 |\n|     3     |  -8388608 |    0 |   8388607 |\n+-----------+-----------+------+-----------+\n</code></pre>"},{"location":"python-cheatsheet/#read-float-samples-from-wav-file_1","title":"Read Float Samples from WAV File","text":"<pre><code>def read_wav_file(filename):\n    def get_int(bytes_obj):\n        an_int = int.from_bytes(bytes_obj, 'little', signed=(sampwidth != 1))\n        return an_int - 128 * (sampwidth == 1)\n    with wave.open(filename, 'rb') as file:\n        sampwidth = file.getsampwidth()\n        frames = file.readframes(-1)\n    bytes_samples = (frames[i : i+sampwidth] for i in range(0, len(frames), sampwidth))\n    return [get_int(b) / pow(2, sampwidth * 8 - 1) for b in bytes_samples]\n</code></pre>"},{"location":"python-cheatsheet/#write-float-samples-to-wav-file_1","title":"Write Float Samples to WAV File","text":"<pre><code>def write_to_wav_file(filename, float_samples, nchannels=1, sampwidth=2, framerate=44100):\n    def get_bytes(a_float):\n        a_float = max(-1, min(1 - 2e-16, a_float))\n        a_float += sampwidth == 1\n        a_float *= pow(2, sampwidth * 8 - 1)\n        return int(a_float).to_bytes(sampwidth, 'little', signed=(sampwidth != 1))\n    with wave.open(filename, 'wb') as file:\n        file.setnchannels(nchannels)\n        file.setsampwidth(sampwidth)\n        file.setframerate(framerate)\n        file.writeframes(b''.join(get_bytes(f) for f in float_samples))\n</code></pre>"},{"location":"python-cheatsheet/#examples_3","title":"Examples","text":""},{"location":"python-cheatsheet/#saves-a-440-hz-sine-wave-to-a-mono-wav-file_1","title":"Saves a 440 Hz sine wave to a mono WAV file:","text":"<pre><code>from math import pi, sin\nsamples_f = (sin(i * 2 * pi * 440 / 44100) for i in range(100_000))\nwrite_to_wav_file('test.wav', samples_f)\n</code></pre>"},{"location":"python-cheatsheet/#adds-noise-to-the-mono-wav-file_1","title":"Adds noise to the mono WAV file:","text":"<pre><code>from random import random\nadd_noise = lambda value: value + (random() - 0.5) * 0.03\nsamples_f = (add_noise(f) for f in read_wav_file('test.wav'))\nwrite_to_wav_file('test.wav', samples_f)\n</code></pre>"},{"location":"python-cheatsheet/#plays-the-wav-file_1","title":"Plays the WAV file:","text":"<pre><code># $ pip3 install simpleaudio\nfrom simpleaudio import play_buffer\nwith wave.open('test.wav', 'rb') as file:\n    p = file.getparams()\n    frames = file.readframes(-1)\n    play_buffer(frames, p.nchannels, p.sampwidth, p.framerate).wait_done()\n</code></pre>"},{"location":"python-cheatsheet/#text-to-speech_1","title":"Text to Speech","text":"<pre><code># $ pip3 install pyttsx3\nimport pyttsx3\nengine = pyttsx3.init()\nengine.say('Sally sells seashells by the seashore.')\nengine.runAndWait()\n</code></pre>"},{"location":"python-cheatsheet/#synthesizer_1","title":"Synthesizer","text":""},{"location":"python-cheatsheet/#plays-popcorn-by-gershon-kingsley_1","title":"Plays Popcorn by Gershon Kingsley:","text":"<pre><code># $ pip3 install simpleaudio\nimport array, itertools as it, math, simpleaudio\n\nF  = 44100\nP1 = '71\u2669,69\u266a,,71\u2669,66\u266a,,62\u2669,66\u266a,,59\u2669,,,71\u2669,69\u266a,,71\u2669,66\u266a,,62\u2669,66\u266a,,59\u2669,,,'\nP2 = '71\u2669,73\u266a,,74\u2669,73\u266a,,74\u266a,,71\u266a,,73\u2669,71\u266a,,73\u266a,,69\u266a,,71\u2669,69\u266a,,71\u266a,,67\u266a,,71\u2669,,,'\nget_pause   = lambda seconds: it.repeat(0, int(seconds * F))\nsin_f       = lambda i, hz: math.sin(i * 2 * math.pi * hz / F)\nget_wave    = lambda hz, seconds: (sin_f(i, hz) for i in range(int(seconds * F)))\nget_hz      = lambda note: 8.176 * 2 ** (int(note[:2]) / 12)\nget_sec     = lambda note: 1/4 if '\u2669' in note else 1/8\nget_samples = lambda note: get_wave(get_hz(note), get_sec(note)) if note else get_pause(1/8)\nsamples_f   = it.chain.from_iterable(get_samples(n) for n in (P1+P2).split(','))\nsamples_i   = array.array('h', (int(f * 30000) for f in samples_f))\nsimpleaudio.play_buffer(samples_i, 1, 2, F).wait_done()\n</code></pre>"},{"location":"python-cheatsheet/#pygame_1","title":"Pygame","text":"<pre><code># $ pip3 install pygame\nimport pygame as pg\n\npg.init()\nscreen = pg.display.set_mode((500, 500))\nrect = pg.Rect(240, 240, 20, 20)\nwhile not pg.event.get(pg.QUIT):\n    deltas = {pg.K_UP: (0, -20), pg.K_RIGHT: (20, 0), pg.K_DOWN: (0, 20), pg.K_LEFT: (-20, 0)}\n    for event in pg.event.get(pg.KEYDOWN):\n        dx, dy = deltas.get(event.key, (0, 0))\n        rect = rect.move((dx, dy))\n    screen.fill((0, 0, 0))\n    pg.draw.rect(screen, (255, 255, 255), rect)\n    pg.display.flip()\n</code></pre>"},{"location":"python-cheatsheet/#rectangle_1","title":"Rectangle","text":"<p>Object for storing rectangular coordinates. <pre><code>&lt;Rect&gt; = pg.Rect(x, y, width, height)           # Floats get truncated into ints.\n&lt;int&gt;  = &lt;Rect&gt;.x/y/centerx/centery/\u2026           # Top, right, bottom, left. Allows assignments.\n&lt;tup.&gt; = &lt;Rect&gt;.topleft/center/\u2026                # Topright, bottomright, bottomleft. Same.\n&lt;Rect&gt; = &lt;Rect&gt;.move((delta_x, delta_y))        # Use move_ip() to move in-place.\n</code></pre></p> <pre><code>&lt;bool&gt; = &lt;Rect&gt;.collidepoint((x, y))            # Checks if rectangle contains the point.\n&lt;bool&gt; = &lt;Rect&gt;.colliderect(&lt;Rect&gt;)             # Checks if two rectangles overlap.\n&lt;int&gt;  = &lt;Rect&gt;.collidelist(&lt;list_of_Rect&gt;)     # Returns index of first colliding Rect or -1.\n&lt;list&gt; = &lt;Rect&gt;.collidelistall(&lt;list_of_Rect&gt;)  # Returns indexes of all colliding rectangles.\n</code></pre>"},{"location":"python-cheatsheet/#surface_1","title":"Surface","text":"<p>Object for representing images. <pre><code>&lt;Surf&gt; = pg.display.set_mode((width, height))   # Opens new window and returns its surface.\n&lt;Surf&gt; = pg.Surface((width, height))            # New RGB surface. RGBA if `flags=pg.SRCALPHA`.\n&lt;Surf&gt; = pg.image.load(&lt;path/file&gt;)             # Loads the image. Format depends on source.\n&lt;Surf&gt; = pg.surfarray.make_surface(&lt;np_array&gt;)  # Also `&lt;np_arr&gt; = surfarray.pixels3d(&lt;Surf&gt;)`.\n&lt;Surf&gt; = &lt;Surf&gt;.subsurface(&lt;Rect&gt;)              # Creates a new surface from the cutout.\n</code></pre></p> <pre><code>&lt;Surf&gt;.fill(color)                              # Tuple, Color('#rrggbb[aa]') or Color(&lt;name&gt;).\n&lt;Surf&gt;.set_at((x, y), color)                    # Updates pixel. Also &lt;Surf&gt;.get_at((x, y)).\n&lt;Surf&gt;.blit(&lt;Surf&gt;, (x, y))                     # Draws passed surface to the surface.\n</code></pre> <pre><code>from pygame.transform import scale, ...\n&lt;Surf&gt; = scale(&lt;Surf&gt;, (width, height))         # Returns scaled surface.\n&lt;Surf&gt; = rotate(&lt;Surf&gt;, anticlock_degrees)      # Returns rotated and scaled surface.\n&lt;Surf&gt; = flip(&lt;Surf&gt;, x_bool, y_bool)           # Returns flipped surface.\n</code></pre> <pre><code>from pygame.draw import line, ...\nline(&lt;Surf&gt;, color, (x1, y1), (x2, y2), width)  # Draws a line to the surface.\narc(&lt;Surf&gt;, color, &lt;Rect&gt;, from_rad, to_rad)    # Also ellipse(&lt;Surf&gt;, color, &lt;Rect&gt;, width=0).\nrect(&lt;Surf&gt;, color, &lt;Rect&gt;, width=0)            # Also polygon(&lt;Surf&gt;, color, points, width=0).\n</code></pre>"},{"location":"python-cheatsheet/#font_1","title":"Font","text":"<pre><code>&lt;Font&gt; = pg.font.Font(&lt;path/file&gt;, size)        # Loads TTF file. Pass None for default font.\n&lt;Surf&gt; = &lt;Font&gt;.render(text, antialias, color)  # Background color can be specified at the end.\n</code></pre>"},{"location":"python-cheatsheet/#sound_1","title":"Sound","text":"<pre><code>&lt;Sound&gt; = pg.mixer.Sound(&lt;path/file/bytes&gt;)     # WAV file or bytes/array of signed shorts.\n&lt;Sound&gt;.play/stop()                             # Also &lt;Sound&gt;.set_volume(&lt;float&gt;).\n</code></pre>"},{"location":"python-cheatsheet/#basic-mario-brothers-example_1","title":"Basic Mario Brothers Example","text":"<pre><code>import collections, dataclasses, enum, io, itertools as it, pygame as pg, urllib.request\nfrom random import randint\n\nP = collections.namedtuple('P', 'x y')          # Position\nD = enum.Enum('D', 'n e s w')                   # Direction\nW, H, MAX_S = 50, 50, P(5, 10)                  # Width, Height, Max speed\n\ndef main():\n    def get_screen():\n        pg.init()\n        return pg.display.set_mode((W*16, H*16))\n    def get_images():\n        url = 'https://gto76.github.io/python-cheatsheet/web/mario_bros.png'\n        img = pg.image.load(io.BytesIO(urllib.request.urlopen(url).read()))\n        return [img.subsurface(get_rect(x, 0)) for x in range(img.get_width() // 16)]\n    def get_mario():\n        Mario = dataclasses.make_dataclass('Mario', 'rect spd facing_left frame_cycle'.split())\n        return Mario(get_rect(1, 1), P(0, 0), False, it.cycle(range(3)))\n    def get_tiles():\n        border = [(x, y) for x in range(W) for y in range(H) if x in [0, W-1] or y in [0, H-1]]\n        platforms = [(randint(1, W-2), randint(2, H-2)) for _ in range(W*H // 10)]\n        return [get_rect(x, y) for x, y in border + platforms]\n    def get_rect(x, y):\n        return pg.Rect(x*16, y*16, 16, 16)\n    run(get_screen(), get_images(), get_mario(), get_tiles())\n\ndef run(screen, images, mario, tiles):\n    clock = pg.time.Clock()\n    pressed = set()\n    while not pg.event.get(pg.QUIT) and clock.tick(28):\n        keys = {pg.K_UP: D.n, pg.K_RIGHT: D.e, pg.K_DOWN: D.s, pg.K_LEFT: D.w}\n        pressed |= {keys.get(e.key) for e in pg.event.get(pg.KEYDOWN)}\n        pressed -= {keys.get(e.key) for e in pg.event.get(pg.KEYUP)}\n        update_speed(mario, tiles, pressed)\n        update_position(mario, tiles)\n        draw(screen, images, mario, tiles, pressed)\n\ndef update_speed(mario, tiles, pressed):\n    x, y = mario.spd\n    x += 2 * ((D.e in pressed) - (D.w in pressed))\n    x += (x &lt; 0) - (x &gt; 0)\n    y += 1 if D.s not in get_boundaries(mario.rect, tiles) else (D.n in pressed) * -10\n    mario.spd = P(x=max(-MAX_S.x, min(MAX_S.x, x)), y=max(-MAX_S.y, min(MAX_S.y, y)))\n\ndef update_position(mario, tiles):\n    x, y = mario.rect.topleft\n    n_steps = max(abs(s) for s in mario.spd)\n    for _ in range(n_steps):\n        mario.spd = stop_on_collision(mario.spd, get_boundaries(mario.rect, tiles))\n        mario.rect.topleft = x, y = x + (mario.spd.x / n_steps), y + (mario.spd.y / n_steps)\n\ndef get_boundaries(rect, tiles):\n    deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}\n    return {d for d, delta in deltas.items() if rect.move(delta).collidelist(tiles) != -1}\n\ndef stop_on_collision(spd, bounds):\n    return P(x=0 if (D.w in bounds and spd.x &lt; 0) or (D.e in bounds and spd.x &gt; 0) else spd.x,\n             y=0 if (D.n in bounds and spd.y &lt; 0) or (D.s in bounds and spd.y &gt; 0) else spd.y)\n\ndef draw(screen, images, mario, tiles, pressed):\n    def get_marios_image_index():\n        if D.s not in get_boundaries(mario.rect, tiles):\n            return 4\n        return next(mario.frame_cycle) if {D.w, D.e} &amp; pressed else 6\n    screen.fill((85, 168, 255))\n    mario.facing_left = (D.w in pressed) if {D.w, D.e} &amp; pressed else mario.facing_left\n    screen.blit(images[get_marios_image_index() + mario.facing_left * 9], mario.rect)\n    for t in tiles:\n        screen.blit(images[18 if t.x in [0, (W-1)*16] or t.y in [0, (H-1)*16] else 19], t)\n    pg.display.flip()\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"python-cheatsheet/#pandas_1","title":"Pandas","text":"<pre><code># $ pip3 install pandas matplotlib\nimport pandas as pd, matplotlib.pyplot as plt\n</code></pre>"},{"location":"python-cheatsheet/#series_1","title":"Series","text":"<p>Ordered dictionary with a name.</p> <pre><code>&gt;&gt;&gt; pd.Series([1, 2], index=['x', 'y'], name='a')\nx    1\ny    2\nName: a, dtype: int64\n</code></pre> <pre><code>&lt;Sr&gt; = pd.Series(&lt;list&gt;)                       # Assigns RangeIndex starting at 0.\n&lt;Sr&gt; = pd.Series(&lt;dict&gt;)                       # Takes dictionary's keys for index.\n&lt;Sr&gt; = pd.Series(&lt;dict/Series&gt;, index=&lt;list&gt;)  # Only keeps items with keys specified in index.\n</code></pre> <pre><code>&lt;el&gt; = &lt;Sr&gt;.loc[key]                           # Or: &lt;Sr&gt;.iloc[index]\n&lt;Sr&gt; = &lt;Sr&gt;.loc[keys]                          # Or: &lt;Sr&gt;.iloc[indexes]\n&lt;Sr&gt; = &lt;Sr&gt;.loc[from_key : to_key_inclusive]   # Or: &lt;Sr&gt;.iloc[from_i : to_i_exclusive]\n</code></pre> <pre><code>&lt;el&gt; = &lt;Sr&gt;[key/index]                         # Or: &lt;Sr&gt;.key\n&lt;Sr&gt; = &lt;Sr&gt;[keys/indexes]                      # Or: &lt;Sr&gt;[&lt;keys_slice/slice&gt;]\n&lt;Sr&gt; = &lt;Sr&gt;[bools]                             # Or: &lt;Sr&gt;.loc/iloc[bools]\n</code></pre> <pre><code>&lt;Sr&gt; = &lt;Sr&gt; &gt; &lt;el/Sr&gt;                          # Returns a Series of bools.\n&lt;Sr&gt; = &lt;Sr&gt; + &lt;el/Sr&gt;                          # Items with non-matching keys get value NaN.\n</code></pre> <pre><code>&lt;Sr&gt; = pd.concat(&lt;coll_of_Sr&gt;)                 # Concats multiple series into one long Series.\n&lt;Sr&gt; = &lt;Sr&gt;.combine_first(&lt;Sr&gt;)                # Adds items that are not yet present.\n&lt;Sr&gt;.update(&lt;Sr&gt;)                              # Updates items that are already present.\n</code></pre> <pre><code>&lt;Sr&gt;.plot.line/area/bar/pie/hist()             # Generates a Matplotlib plot.\nplt.show()                                     # Displays the plot. Also plt.savefig(&lt;path&gt;).\n</code></pre>"},{"location":"python-cheatsheet/#series-aggregate-transform-map_1","title":"Series \u2014 Aggregate, Transform, Map:","text":"<pre><code>&lt;el&gt; = &lt;Sr&gt;.sum/max/mean/idxmax/all()          # Or: &lt;Sr&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)\n&lt;Sr&gt; = &lt;Sr&gt;.rank/diff/cumsum/ffill/interplt()  # Or: &lt;Sr&gt;.agg/transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)\n&lt;Sr&gt; = &lt;Sr&gt;.fillna(&lt;el&gt;)                       # Or: &lt;Sr&gt;.agg/transform/map(lambda &lt;el&gt;: &lt;el&gt;)\n</code></pre> <pre><code>&gt;&gt;&gt; sr = pd.Series([2, 3], index=['x', 'y'])\nx    2\ny    3\n</code></pre> <pre><code>+---------------+-------------+-------------+---------------+\n|               |    'sum'    |   ['sum']   | {'s': 'sum'}  |\n+---------------+-------------+-------------+---------------+\n| sr.apply(\u2026)   |      5      |    sum  5   |     s  5      |\n| sr.agg(\u2026)     |             |             |               |\n+---------------+-------------+-------------+---------------+\n</code></pre> <p><pre><code>+---------------+-------------+-------------+---------------+\n|               |    'rank'   |   ['rank']  | {'r': 'rank'} |\n+---------------+-------------+-------------+---------------+\n| sr.apply(\u2026)   |             |      rank   |               |\n| sr.agg(\u2026)     |     x  1    |   x     1   |    r  x  1    |\n|               |     y  2    |   y     2   |       y  2    |\n+---------------+-------------+-------------+---------------+\n</code></pre> * Keys/indexes/bools can't be tuples because <code>'obj[x, y]'</code> is converted to <code>'obj[(x, y)]'</code>! * Methods ffill(), interpolate(), fillna() and dropna() accept <code>'inplace=True'</code>. * Last result has a hierarchical index. Use <code>'&lt;Sr&gt;[key_1, key_2]'</code> to get its values.</p>"},{"location":"python-cheatsheet/#dataframe_1","title":"DataFrame","text":"<p>Table with labeled rows and columns.</p> <pre><code>&gt;&gt;&gt; pd.DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y'])\n   x  y\na  1  2\nb  3  4\n</code></pre> <pre><code>&lt;DF&gt;    = pd.DataFrame(&lt;list_of_rows&gt;)         # Rows can be either lists, dicts or series.\n&lt;DF&gt;    = pd.DataFrame(&lt;dict_of_columns&gt;)      # Columns can be either lists, dicts or series.\n</code></pre> <pre><code>&lt;el&gt;    = &lt;DF&gt;.loc[row_key, column_key]        # Or: &lt;DF&gt;.iloc[row_index, column_index]\n&lt;Sr/DF&gt; = &lt;DF&gt;.loc[row_key/s]                  # Or: &lt;DF&gt;.iloc[row_index/es]\n&lt;Sr/DF&gt; = &lt;DF&gt;.loc[:, column_key/s]            # Or: &lt;DF&gt;.iloc[:, column_index/es]\n&lt;DF&gt;    = &lt;DF&gt;.loc[row_bools, column_bools]    # Or: &lt;DF&gt;.iloc[row_bools, column_bools]\n</code></pre> <pre><code>&lt;Sr/DF&gt; = &lt;DF&gt;[column_key/s]                   # Or: &lt;DF&gt;.column_key\n&lt;DF&gt;    = &lt;DF&gt;[row_bools]                      # Keeps rows as specified by bools.\n&lt;DF&gt;    = &lt;DF&gt;[&lt;DF_of_bools&gt;]                  # Assigns NaN to items that are False in bools.\n</code></pre> <pre><code>&lt;DF&gt;    = &lt;DF&gt; &gt; &lt;el/Sr/DF&gt;                    # Returns DF of bools. Sr is treated as a row.\n&lt;DF&gt;    = &lt;DF&gt; + &lt;el/Sr/DF&gt;                    # Items with non-matching keys get value NaN.\n</code></pre> <pre><code>&lt;DF&gt;    = &lt;DF&gt;.set_index(column_key)           # Replaces row keys with values from the column.\n&lt;DF&gt;    = &lt;DF&gt;.reset_index(drop=False)         # Drops or moves row keys to column named index.\n&lt;DF&gt;    = &lt;DF&gt;.sort_index(ascending=True)      # Sorts rows by row keys. Use `axis=1` for cols.\n&lt;DF&gt;    = &lt;DF&gt;.sort_values(column_key/s)       # Sorts rows by passed column/s. Also `axis=1`.\n</code></pre>"},{"location":"python-cheatsheet/#dataframe-merge-join-concat_1","title":"DataFrame \u2014 Merge, Join, Concat:","text":"<pre><code>&gt;&gt;&gt; l = pd.DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y'])\n   x  y\na  1  2\nb  3  4\n&gt;&gt;&gt; r = pd.DataFrame([[4, 5], [6, 7]], index=['b', 'c'], columns=['y', 'z'])\n   y  z\nb  4  5\nc  6  7\n</code></pre> <pre><code>+------------------------+---------------+------------+------------+--------------------------+\n|                        |    'outer'    |   'inner'  |   'left'   |       Description        |\n+------------------------+---------------+------------+------------+--------------------------+\n| l.merge(r, on='y',     |    x   y   z  | x   y   z  | x   y   z  | Merges on column if 'on' |\n|            how=\u2026)      | 0  1   2   .  | 3   4   5  | 1   2   .  | or 'left/right_on' are   |\n|                        | 1  3   4   5  |            | 3   4   5  | set, else on shared cols.|\n|                        | 2  .   6   7  |            |            | Uses 'inner' by default. |\n+------------------------+---------------+------------+------------+--------------------------+\n| l.join(r, lsuffix='l', |    x yl yr  z |            | x yl yr  z | Merges on row keys.      |\n|           rsuffix='r', | a  1  2  .  . | x yl yr  z | 1  2  .  . | Uses 'left' by default.  |\n|           how=\u2026)       | b  3  4  4  5 | 3  4  4  5 | 3  4  4  5 | If r is a Series, it is  |\n|                        | c  .  .  6  7 |            |            | treated as a column.     |\n+------------------------+---------------+------------+------------+--------------------------+\n| pd.concat([l, r],      |    x   y   z  |     y      |            | Adds rows at the bottom. |\n|           axis=0,      | a  1   2   .  |     2      |            | Uses 'outer' by default. |\n|           join=\u2026)      | b  3   4   .  |     4      |            | A Series is treated as a |\n|                        | b  .   4   5  |     4      |            | column. To add a row use |\n|                        | c  .   6   7  |     6      |            | pd.concat([l, DF([sr])]).|\n+------------------------+---------------+------------+------------+--------------------------+\n| pd.concat([l, r],      |    x  y  y  z |            |            | Adds columns at the      |\n|           axis=1,      | a  1  2  .  . | x  y  y  z |            | right end. Uses 'outer'  |\n|           join=\u2026)      | b  3  4  4  5 | 3  4  4  5 |            | by default. A Series is  |\n|                        | c  .  .  6  7 |            |            | treated as a column.     |\n+------------------------+---------------+------------+------------+--------------------------+\n| l.combine_first(r)     |    x   y   z  |            |            | Adds missing rows and    |\n|                        | a  1   2   .  |            |            | columns. Also updates    |\n|                        | b  3   4   5  |            |            | items that contain NaN.  |\n|                        | c  .   6   7  |            |            | Argument r must be a DF. |\n+------------------------+---------------+------------+------------+--------------------------+\n</code></pre>"},{"location":"python-cheatsheet/#dataframe-aggregate-transform-map_1","title":"DataFrame \u2014 Aggregate, Transform, Map:","text":"<p><pre><code>&lt;Sr&gt; = &lt;DF&gt;.sum/max/mean/idxmax/all()          # Or: &lt;DF&gt;.apply/agg(lambda &lt;Sr&gt;: &lt;el&gt;)\n&lt;DF&gt; = &lt;DF&gt;.rank/diff/cumsum/ffill/interplt()  # Or: &lt;DF&gt;.apply/agg/transfrm(lambda &lt;Sr&gt;: &lt;Sr&gt;)\n&lt;DF&gt; = &lt;DF&gt;.fillna(&lt;el&gt;)                       # Or: &lt;DF&gt;.applymap(lambda &lt;el&gt;: &lt;el&gt;)\n</code></pre> * All operations operate on columns by default. Pass <code>'axis=1'</code> to process the rows instead.</p> <pre><code>&gt;&gt;&gt; df = pd.DataFrame([[1, 2], [3, 4]], index=['a', 'b'], columns=['x', 'y'])\n   x  y\na  1  2\nb  3  4\n</code></pre> <pre><code>+-----------------+-------------+-------------+---------------+\n|                 |    'sum'    |   ['sum']   | {'x': 'sum'}  |\n+-----------------+-------------+-------------+---------------+\n| df.apply(\u2026)     |     x  4    |       x  y  |     x  4      |\n| df.agg(\u2026)       |     y  6    |  sum  4  6  |               |\n+-----------------+-------------+-------------+---------------+\n</code></pre> <p><pre><code>+-----------------+-------------+-------------+---------------+\n|                 |    'rank'   |   ['rank']  | {'x': 'rank'} |\n+-----------------+-------------+-------------+---------------+\n| df.apply(\u2026)     |             |      x    y |               |\n| df.agg(\u2026)       |      x  y   |   rank rank |        x      |\n| df.transform(\u2026) |   a  1  1   | a    1    1 |     a  1      |\n|                 |   b  2  2   | b    2    2 |     b  2      |\n+-----------------+-------------+-------------+---------------+\n</code></pre> * Use <code>'&lt;DF&gt;[col_key_1, col_key_2][row_key]'</code> to get the fifth result's values.</p>"},{"location":"python-cheatsheet/#dataframe-plot-encode-decode_1","title":"DataFrame \u2014 Plot, Encode, Decode:","text":"<pre><code>&lt;DF&gt;.plot.line/area/bar/hist/scatter/box()     # Also: `x=column_key, y=column_key/s`.\nplt.show()                                     # Displays the plot. Also plt.savefig(&lt;path&gt;).\n</code></pre> <pre><code>&lt;DF&gt; = pd.read_json/html('&lt;str/path/url&gt;')     # Run `$ pip3 install beautifulsoup4 lxml`.\n&lt;DF&gt; = pd.read_csv('&lt;path/url&gt;')               # Also `names=&lt;list&gt;, parse_dates=False`.\n&lt;DF&gt; = pd.read_pickle/excel('&lt;path/url&gt;')      # Use `sheet_name=None` to get all Excel sheets.\n&lt;DF&gt; = pd.read_sql('&lt;table/query&gt;', &lt;conn.&gt;)   # SQLite3/SQLAlchemy connection (see #SQLite).\n</code></pre> <pre><code>&lt;dict&gt; = &lt;DF&gt;.to_dict(['d/l/s/\u2026'])             # Returns columns as dicts, lists or series.\n&lt;str&gt;  = &lt;DF&gt;.to_json/html/csv([&lt;path&gt;])       # Also to_markdown/latex([&lt;path&gt;]).\n&lt;DF&gt;.to_pickle/excel(&lt;path&gt;)                   # Run `$ pip3 install \"pandas[excel]\" odfpy`.\n&lt;DF&gt;.to_sql('&lt;table_name&gt;', &lt;connection&gt;)      # Also `if_exists='fail/replace/append'`.\n</code></pre>"},{"location":"python-cheatsheet/#groupby_1","title":"GroupBy","text":"<p>Object that groups together rows of a dataframe based on the value of the passed column.</p> <pre><code>&gt;&gt;&gt; df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 6]], list('abc'), list('xyz'))\n&gt;&gt;&gt; df.groupby('z').get_group(6)\n   x  y  z\nb  4  5  6\nc  7  8  6\n</code></pre> <pre><code>&lt;GB&gt; = &lt;DF&gt;.groupby(column_key/s)              # Splits DF into groups based on passed column.\n&lt;DF&gt; = &lt;GB&gt;.apply(&lt;func&gt;)                      # Maps each group. Func can return DF, Sr or el.\n&lt;GB&gt; = &lt;GB&gt;[column_key]                        # Single column GB. All operations return a Sr.\n&lt;Sr&gt; = &lt;GB&gt;.size()                             # A Sr of group sizes. Keys are group \"names\".\n</code></pre>"},{"location":"python-cheatsheet/#groupby-aggregate-transform-map_1","title":"GroupBy \u2014 Aggregate, Transform, Map:","text":"<pre><code>&lt;DF&gt; = &lt;GB&gt;.sum/max/mean/idxmax/all()          # Or: &lt;GB&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)\n&lt;DF&gt; = &lt;GB&gt;.rank/diff/cumsum/ffill()           # Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)\n&lt;DF&gt; = &lt;GB&gt;.fillna(&lt;el&gt;)                       # Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)\n</code></pre> <pre><code>&gt;&gt;&gt; gb = df.groupby('z'); gb.apply(print)\n   x  y  z\na  1  2  3\n   x  y  z\nb  4  5  6\nc  7  8  6\n</code></pre> <pre><code>+-----------------+-------------+-------------+-------------+---------------+\n|                 |    'sum'    |    'rank'   |   ['rank']  | {'x': 'rank'} |\n+-----------------+-------------+-------------+-------------+---------------+\n| gb.agg(\u2026)       |      x   y  |             |      x    y |               |\n|                 |  z          |      x  y   |   rank rank |        x      |\n|                 |  3   1   2  |   a  1  1   | a    1    1 |     a  1      |\n|                 |  6  11  13  |   b  1  1   | b    1    1 |     b  1      |\n|                 |             |   c  2  2   | c    2    2 |     c  2      |\n+-----------------+-------------+-------------+-------------+---------------+\n| gb.transform(\u2026) |      x   y  |      x  y   |             |               |\n|                 |  a   1   2  |   a  1  1   |             |               |\n|                 |  b  11  13  |   b  1  1   |             |               |\n|                 |  c  11  13  |   c  2  2   |             |               |\n+-----------------+-------------+-------------+-------------+---------------+\n</code></pre>"},{"location":"python-cheatsheet/#rolling_1","title":"Rolling","text":"<p>Object for rolling window calculations.</p> <pre><code>&lt;RSr/RDF/RGB&gt; = &lt;Sr/DF/GB&gt;.rolling(win_size)   # Also: `min_periods=None, center=False`.\n&lt;RSr/RDF/RGB&gt; = &lt;RDF/RGB&gt;[column_key/s]        # Or: &lt;RDF/RGB&gt;.column_key\n&lt;Sr/DF&gt;       = &lt;R&gt;.mean/sum/max()             # Or: &lt;R&gt;.apply/agg(&lt;agg_func/str&gt;)\n</code></pre>"},{"location":"python-cheatsheet/#plotly_1","title":"Plotly","text":"<pre><code># $ pip3 install pandas plotly kaleido\nimport pandas as pd, plotly.express as ex\n&lt;Figure&gt; = ex.line(&lt;DF&gt;, x=&lt;col_name&gt;, y=&lt;col_name&gt;)        # Or: ex.line(x=&lt;list&gt;, y=&lt;list&gt;)\n&lt;Figure&gt;.update_layout(margin=dict(t=0, r=0, b=0, l=0), \u2026)  # `paper_bgcolor='rgb(0, 0, 0)'`.\n&lt;Figure&gt;.write_html/json/image('&lt;path&gt;')                    # Also &lt;Figure&gt;.show().\n</code></pre>"},{"location":"python-cheatsheet/#displays-a-line-chart-of-total-coronavirus-deaths-per-million-grouped-by-continent_1","title":"Displays a line chart of total coronavirus deaths per million grouped by continent:","text":"<pre><code>covid = pd.read_csv('https://covid.ourworldindata.org/data/owid-covid-data.csv',\n                    usecols=['iso_code', 'date', 'total_deaths', 'population'])\ncontinents = pd.read_csv('https://gist.githubusercontent.com/stevewithington/20a69c0b6d2ff'\n                         '846ea5d35e5fc47f26c/raw/country-and-continent-codes-list-csv.csv',\n                         usecols=['Three_Letter_Country_Code', 'Continent_Name'])\ndf = pd.merge(covid, continents, left_on='iso_code', right_on='Three_Letter_Country_Code')\ndf = df.groupby(['Continent_Name', 'date']).sum().reset_index()\ndf['Total Deaths per Million'] = df.total_deaths * 1e6 / df.population\ndf = df[df.date &gt; '2020-03-14']\ndf = df.rename({'date': 'Date', 'Continent_Name': 'Continent'}, axis='columns')\nex.line(df, x='Date', y='Total Deaths per Million', color='Continent').show()\n</code></pre>"},{"location":"python-cheatsheet/#displays-a-multi-axis-line-chart-of-total-coronavirus-cases-and-changes-in-prices-of-bitcoin-dow-jones-and-gold_1","title":"Displays a multi-axis line chart of total coronavirus cases and changes in prices of Bitcoin, Dow Jones and gold:","text":"<pre><code>import pandas as pd, plotly.graph_objects as go\n\ndef main():\n    covid, bitcoin, gold, dow = scrape_data()\n    display_data(wrangle_data(covid, bitcoin, gold, dow))\n\ndef scrape_data():\n    def get_covid_cases():\n        url = 'https://covid.ourworldindata.org/data/owid-covid-data.csv'\n        df = pd.read_csv(url, usecols=['location', 'date', 'total_cases'])\n        return df[df.location == 'World'].set_index('date').total_cases\n    def get_ticker(symbol):\n        url = (f'https://query1.finance.yahoo.com/v7/finance/download/{symbol}?'\n               'period1=1579651200&amp;period2=9999999999&amp;interval=1d&amp;events=history')\n        df = pd.read_csv(url, usecols=['Date', 'Close'])\n        return df.set_index('Date').Close\n    out = get_covid_cases(), get_ticker('BTC-USD'), get_ticker('GC=F'), get_ticker('^DJI')\n    return map(pd.Series.rename, out, ['Total Cases', 'Bitcoin', 'Gold', 'Dow Jones'])\n\ndef wrangle_data(covid, bitcoin, gold, dow):\n    df = pd.concat([bitcoin, gold, dow], axis=1)  # Creates table by joining columns on dates.\n    df = df.sort_index().interpolate()            # Sorts table by date and interpolates NaN-s.\n    df = df.loc['2020-02-23':]                    # Discards rows before '2020-02-23'.\n    df = (df / df.iloc[0]) * 100                  # Calculates percentages relative to day 1.\n    df = df.join(covid)                           # Adds column with covid cases.\n    return df.sort_values(df.index[-1], axis=1)   # Sorts columns by last day's value.\n\ndef display_data(df):\n    figure = go.Figure()\n    for col_name in reversed(df.columns):\n        yaxis = 'y1' if col_name == 'Total Cases' else 'y2'\n        trace = go.Scatter(x=df.index, y=df[col_name], name=col_name, yaxis=yaxis)\n        figure.add_trace(trace)\n    figure.update_layout(\n        yaxis1=dict(title='Total Cases', rangemode='tozero'),\n        yaxis2=dict(title='%', rangemode='tozero', overlaying='y', side='right'),\n        legend=dict(x=1.08),\n        width=944,\n        height=423\n    )\n    figure.show()\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"python-cheatsheet/#appendix_1","title":"Appendix","text":""},{"location":"python-cheatsheet/#cython_1","title":"Cython","text":"<p>Library that compiles Python code into C.</p> <pre><code># $ pip3 install cython\nimport pyximport; pyximport.install()\nimport &lt;cython_script&gt;\n&lt;cython_script&gt;.main()\n</code></pre>"},{"location":"python-cheatsheet/#definitions_1","title":"Definitions:","text":"<ul> <li>All <code>'cdef'</code> definitions are optional, but they contribute to the speed-up.</li> <li>Script needs to be saved with a <code>'pyx'</code> extension.</li> </ul> <pre><code>cdef &lt;ctype&gt; &lt;var_name&gt; = &lt;el&gt;\ncdef &lt;ctype&gt;[n_elements] &lt;var_name&gt; = [&lt;el&gt;, &lt;el&gt;, ...]\ncdef &lt;ctype/void&gt; &lt;func_name&gt;(&lt;ctype&gt; &lt;arg_name&gt;): ...\n</code></pre> <pre><code>cdef class &lt;class_name&gt;:\n    cdef public &lt;ctype&gt; &lt;attr_name&gt;\n    def __init__(self, &lt;ctype&gt; &lt;arg_name&gt;):\n        self.&lt;attr_name&gt; = &lt;arg_name&gt;\n</code></pre> <pre><code>cdef enum &lt;enum_name&gt;: &lt;member_name&gt;, &lt;member_name&gt;, ...\n</code></pre>"},{"location":"python-cheatsheet/#virtual-environments_1","title":"Virtual Environments","text":"<p>System for installing libraries directly into project's directory.</p> <pre><code>$ python3 -m venv &lt;name&gt;      # Creates virtual environment in current directory.\n$ source &lt;name&gt;/bin/activate  # Activates venv. On Windows run `&lt;name&gt;\\Scripts\\activate`.\n$ pip3 install &lt;library&gt;      # Installs the library into active environment.\n$ python3 &lt;path&gt;              # Runs the script in active environment. Also `./&lt;path&gt;`.\n$ deactivate                  # Deactivates the active virtual environment.\n</code></pre>"},{"location":"python-cheatsheet/#basic-script-template_1","title":"Basic Script Template","text":"<pre><code>#!/usr/bin/env python3\n#\n# Usage: .py\n#\n\nfrom sys import argv, exit\nfrom collections import defaultdict, namedtuple\nfrom dataclasses import make_dataclass\nfrom enum import Enum\nimport functools as ft, itertools as it, operator as op, re\n\n\ndef main():\n    pass\n\n\n###\n##  UTIL\n#\n\ndef read_file(filename):\n    with open(filename, encoding='utf-8') as file:\n        return file.readlines()\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"ruby/","title":"Jupyter NB - Ruby kernel","text":"<p>I am developing IRuby a kernel in Ruby that adheres to the Jupyter/IPython messaging protocol. It integrates nicely with different Rubygems as will be shown later.</p> <p>This gives us a very fancy web notebook interface for Ruby.  It's a very good tool for programming presentations. It's basically an in-browser REPL loop, with some extra goodies.</p> <p>Install IRuby with:</p> <pre><code>gem install iruby\n</code></pre> <p>Start the IRuby notebook with:</p> <pre><code>iruby notebook\n</code></pre> <p><code>$stdout</code> and <code>$stderr</code> are redirected to the notebook</p> In\u00a0[1]: Copied! <pre>puts 'Hello, world!'\n</pre> puts 'Hello, world!' <pre>Hello, world!\n</pre> In\u00a0[2]: Copied! <pre>$stderr.puts 'Error!'\n</pre> $stderr.puts 'Error!' <pre>Error!\n</pre> <p>The last computed result is returned.</p> In\u00a0[3]: Copied! <pre>Math.sqrt(2)\n</pre> Math.sqrt(2) Out[3]: <pre>1.4142135623730951</pre> <p>This works even for images.</p> In\u00a0[4]: Copied! <pre>File.open('IRuby Examples/ruby.svg')\n</pre> File.open('IRuby Examples/ruby.svg') Out[4]: In\u00a0[5]: Copied! <pre>File.open('IRuby Examples/ruby.png')\n</pre> File.open('IRuby Examples/ruby.png') Out[5]: <p>IRuby provides a method to display objects <code>IRuby.display</code> and methods to create $\\LaTeX$ and HTML representations.</p> In\u00a0[6]: Copied! <pre>IRuby.display '&lt;b style=\"color:green\"&gt;Hello, world!&lt;/b&gt;', mime: 'text/html'\n</pre> IRuby.display 'Hello, world!', mime: 'text/html' Hello, world! In\u00a0[7]: Copied! <pre>IRuby.html '&lt;iframe src=http://en.mobile.wikipedia.org/?useformat=mobile width=700 height=350&gt;&lt;/iframe&gt;'\n</pre> IRuby.html '' Out[7]: <p>$\\LaTeX$ is rendered using MathJax.</p> In\u00a0[8]: Copied! <pre>IRuby.display IRuby.latex &lt;&lt;-'TEX'\n\\begin{eqnarray}\n\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &amp; = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\\n\\nabla \\cdot \\vec{\\mathbf{E}} &amp; = 4 \\pi \\rho \\\\\n\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} &amp; = \\vec{\\mathbf{0}} \\\\\n\\nabla \\cdot \\vec{\\mathbf{B}} &amp; = 0 \n\\end{eqnarray}\nTEX\n\nIRuby.math('F(k) = \\int_{-\\infty}^{\\infty} f(x) e^{2\\pi i k} dx')\n</pre> IRuby.display IRuby.latex &lt;&lt;-'TEX' \\begin{eqnarray} \\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &amp; = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\ \\nabla \\cdot \\vec{\\mathbf{E}} &amp; = 4 \\pi \\rho \\\\ \\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} &amp; = \\vec{\\mathbf{0}} \\\\ \\nabla \\cdot \\vec{\\mathbf{B}} &amp; = 0  \\end{eqnarray} TEX  IRuby.math('F(k) = \\int_{-\\infty}^{\\infty} f(x) e^{2\\pi i k} dx')  \\begin{eqnarray} \\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &amp; = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\ \\nabla \\cdot \\vec{\\mathbf{E}} &amp; = 4 \\pi \\rho \\\\ \\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} &amp; = \\vec{\\mathbf{0}} \\\\ \\nabla \\cdot \\vec{\\mathbf{B}} &amp; = 0  \\end{eqnarray}   Out[8]:  $$F(k) = \\int_{-\\infty}^{\\infty} f(x) e^{2\\pi i k} dx$$  <p>Arrays and Hashes can be printed as HTML tables.</p> In\u00a0[9]: Copied! <pre>IRuby.display IRuby.table([1,2,[],3])\nIRuby.display IRuby.table({a:1,b:2,c:3})\nIRuby.display IRuby.table([[11,12,13,14],[21,22,23],'not an Array',[31,32,33,34]])\nIRuby.display IRuby.table({a:[11,12,13,14],b:[21,22,23],c:[31,32,33,34]})\nIRuby.display IRuby.table([{a:1,b:2,c:3},'not an Array',{a:2,b:3,c:4,e:5}])\nIRuby.display IRuby.table([{a:1,b:2,c:3},{a:2,b:3,c:4,d:5},{0=&gt;:x,1=&gt;:y},[:a,:b,:c]])\n</pre> IRuby.display IRuby.table([1,2,[],3]) IRuby.display IRuby.table({a:1,b:2,c:3}) IRuby.display IRuby.table([[11,12,13,14],[21,22,23],'not an Array',[31,32,33,34]]) IRuby.display IRuby.table({a:[11,12,13,14],b:[21,22,23],c:[31,32,33,34]}) IRuby.display IRuby.table([{a:1,b:2,c:3},'not an Array',{a:2,b:3,c:4,e:5}]) IRuby.display IRuby.table([{a:1,b:2,c:3},{a:2,b:3,c:4,d:5},{0=&gt;:x,1=&gt;:y},[:a,:b,:c]]) 123 abc123 11121314212223not an Array31323334 abc1121311222321323331434 abce123not an Array2345 abcd0121232345xyabc <p>Pry is an enhanced Ruby REPL. It will be automatically used by IRuby if available. You can use the code browsing utilities for example.</p> In\u00a0[10]: Copied! <pre>ls Array\n</pre> ls Array <pre>Object.methods: yaml_tag\nArray.methods: []  try_convert\nArray#methods: \n  &amp;            concat      hash                reject                slice     \n  *            count       include?            reject!               slice!    \n  +            cycle       index               repeated_combination  sort      \n  -            delete      insert              repeated_permutation  sort!     \n  &lt;&lt;           delete_at   inspect             replace               sort_by!  \n  &lt;=&gt;          delete_if   join                reverse               take      \n  ==           drop        keep_if             reverse!              take_while\n  []           drop_while  last                reverse_each          to_a      \n  []=          each        length              rindex                to_ary    \n  any?         each_index  map                 rotate                to_h      \n  assoc        empty?      map!                rotate!               to_s      \n  at           eql?        pack                sample                transpose \n  bsearch      fetch       permutation         select                uniq      \n  clear        fill        pop                 select!               uniq!     \n  collect      find_index  pretty_print        shelljoin             unshift   \n  collect!     first       pretty_print_cycle  shift                 values_at \n  combination  flatten     product             shuffle               zip       \n  compact      flatten!    push                shuffle!              |         \n  compact!     frozen?     rassoc              size                \n</pre> <p><code>Gnuplot::Plot</code> objects are automatically displayed inline as SVG.</p> In\u00a0[11]: Copied! <pre>require 'gnuplot'\n\nGnuplot::Plot.new do |plot|  \n    plot.xrange '[-0.5:0.5]'\n    plot.title  'Example plot'\n    plot.ylabel 'x'\n    plot.xlabel 'sin(1/x)'\n    plot.samples 10000\n    plot.data &lt;&lt; Gnuplot::DataSet.new('sin(1/x)') do |ds|\n        ds.with = 'lines'\n        ds.linewidth = 2\n    end\nend\n</pre> require 'gnuplot'  Gnuplot::Plot.new do |plot|       plot.xrange '[-0.5:0.5]'     plot.title  'Example plot'     plot.ylabel 'x'     plot.xlabel 'sin(1/x)'     plot.samples 10000     plot.data &lt;&lt; Gnuplot::DataSet.new('sin(1/x)') do |ds|         ds.with = 'lines'         ds.linewidth = 2     end end Out[11]: <p>You can also create nice 3D plots</p> In\u00a0[12]: Copied! <pre>Gnuplot::SPlot.new do |plot|\n    plot.title 'Spiral'\n    plot.nokey\n    plot.parametric\n    plot.hidden3d\n    plot.view '80,50'\n    plot.isosamples '60,15'\n    plot.xrange '[-8:8]'\n    plot.yrange '[-8:8]'\n    plot.zrange '[-8:8]'\n    plot.urange '[-2*pi:2*pi]'\n    plot.vrange '[-pi:pi]'\n    plot.data &lt;&lt; Gnuplot::DataSet.new('cos(u)*(cos(v)+3), sin(u)*(cos(v)+3), sin(v)+u') do |ds|\n        ds.with = 'lines'\n    end\nend\n</pre> Gnuplot::SPlot.new do |plot|     plot.title 'Spiral'     plot.nokey     plot.parametric     plot.hidden3d     plot.view '80,50'     plot.isosamples '60,15'     plot.xrange '[-8:8]'     plot.yrange '[-8:8]'     plot.zrange '[-8:8]'     plot.urange '[-2*pi:2*pi]'     plot.vrange '[-pi:pi]'     plot.data &lt;&lt; Gnuplot::DataSet.new('cos(u)*(cos(v)+3), sin(u)*(cos(v)+3), sin(v)+u') do |ds|         ds.with = 'lines'     end end Out[12]: <p><code>Rubyvis</code> objects are automatically displayed inline as SVG.</p> In\u00a0[13]: Copied! <pre>require 'rubyvis'\n    \nRubyvis::Panel.new do \n  width 150\n  height 150\n  bar do\n    data [1, 1.2, 1.7, 1.5, 0.7, 0.3]\n    width 20\n    height {|d| d * 80}\n    bottom(0)\n    left {index * 25}\n  end\nend\n</pre> require 'rubyvis'      Rubyvis::Panel.new do    width 150   height 150   bar do     data [1, 1.2, 1.7, 1.5, 0.7, 0.3]     width 20     height {|d| d * 80}     bottom(0)     left {index * 25}   end end Out[13]: <p><code>Matrix</code> and <code>GSL::Matrix</code> objects are automatically displayed as $\\LaTeX$.</p> In\u00a0[14]: Copied! <pre>require 'matrix'\nMatrix[[1,2,3],[1,2,3]]\n</pre> require 'matrix' Matrix[[1,2,3],[1,2,3]] Out[14]:  $$\\left(\\begin{array}{ccc}   1&amp;2&amp;3\\\\   1&amp;2&amp;3\\\\ \\end{array}\\right)$$  In\u00a0[15]: Copied! <pre>require 'nyaplot'\n\nx = []; y = []; theta = 0.6; a=1\nwhile theta &lt; 14*Math::PI do\n  x.push(a*Math::cos(theta)/theta)\n  y.push(a*Math::sin(theta)/theta)\n  theta += 0.1\nend\nplot1 = Nyaplot::Plot.new\nplot1.add(:line, x, y)\nplot1.show\n</pre> require 'nyaplot'  x = []; y = []; theta = 0.6; a=1 while theta &lt; 14*Math::PI do   x.push(a*Math::cos(theta)/theta)   y.push(a*Math::sin(theta)/theta)   theta += 0.1 end plot1 = Nyaplot::Plot.new plot1.add(:line, x, y) plot1.show"},{"location":"ruby/#jupyter-nb-ruby-kernel","title":"Jupyter NB - Ruby kernel\u00b6","text":""},{"location":"ruby/#what-does-this-give-you","title":"What does this give you?\u00b6","text":""},{"location":"ruby/#usage","title":"Usage\u00b6","text":""},{"location":"ruby/#example","title":"Example\u00b6","text":""},{"location":"ruby/#display","title":"Display\u00b6","text":""},{"location":"ruby/#integration-with-ruby-gems","title":"Integration with Ruby gems\u00b6","text":""},{"location":"ruby/#pry","title":"Pry\u00b6","text":""},{"location":"ruby/#gnuplot","title":"Gnuplot\u00b6","text":""},{"location":"ruby/#rubyvis","title":"Rubyvis\u00b6","text":""},{"location":"ruby/#matrix-gsl","title":"Matrix &amp; GSL\u00b6","text":""},{"location":"ruby/#nyaplot","title":"Nyaplot\u00b6","text":""},{"location":"unix-text/","title":"Unix Text Processing","text":""},{"location":"unix-text/#command-line-utilities","title":"Command-line utilities","text":"<p><code>grep</code> is a powerful command-line tool that allows to search files for lines that match a regex and writes each matching line to standard output.</p> <pre><code># To leave initial file unchanged, you can use \"&gt;\" and create new file with query changes applied:\nfile.txt &gt; new_file.txt \n\n# Find text string by patterns:\ngrep 'pattern1\\|pattern2' file.txt \n\n# Get number of rows in a file:\nwc -l file.txt \n\n# Get only unique lines from file:\nuniq text.txt  \n\n# Print number of lines (NUM) of trailing context after matching lines (Pattern):\ngrep -A NUM 'Pattern' file.txt \n\n# Print number of lines (NUM) of leading context before matching lines:\ngrep -B NUM 'Pattern' file.txt \n</code></pre>"},{"location":"unix-text/#awk","title":"AWK","text":"<p><code>AWK</code> is a versatile language designed for text processing. Like sed and grep, it is a filter. </p> <pre><code># Total sum of values in column (int):\nawk -v N=1 '{ sum += $N } END { if (NR &gt; 0) print sum  }' file.txt\n\n# Filter column by values levels:\nawk '{if($1&lt;10)print$1}' &lt; file.txt &gt; 10.txt\nawk '{if($1&gt;=10 &amp;&amp; $1&lt;=20)print$1}' &lt; file.txt &gt; 10_20.txt\nawk '{if($1&gt;50)print$1}' &lt; file.txt &gt; 50.txt\n\n# Get first word from each line:\nawk '{print $1}' file.txt\n\n# Get all even lines:\nawk 'NR%2==0' file.txt\n</code></pre>"},{"location":"unix-text/#sed","title":"SED","text":"<p><code>sed</code> is a Unix utility that parses and transforms text, using a simple, compact programming language.</p> <pre><code># Delete all lines containing pattern:\nsed '/pattern/d' file.txt\n\n# Delete all lines starting with specific symbol, e.g. \"-\":\nsed  '/-$/ d' file.txt\n\n# Get N lines after pattern match:\nsed -n '/pattern/,+Np' file.txt\n\n# Get number of lines from file into a variable:\nexport A=\"file.txt\"\nNUM_LINES_A=$(wc -l &lt; \"$A\")\n\n# Split values by chanks (10% chank):\nsplit -n l/10/10 file.txt\n\n # Align all text flush right on a N'th-column width\n sed -e :a -e \u2018s/^.{1,N}$/ &amp;/;ta\u2019 file.txt\n\n# Delete all specific symbols from file (commas):\nsed 's/,//g' file.txt\n\n# Insert a blank line below every line which matches \u201cpatern\u201d\nsed \u2018/patern/G\u2019 file.txt\n\n# Get rid of all letters from file, only number will remain:\nsed 's/[A-Za-z]*//g' file.txt\n\n# Get last 3 symbols from each line, each dot represents symbol:\nsed 's/.*\\(...\\)/\\1/' file.txt\n\n# Add symbol to each line (\"symbol\"):\nsed -e 's/^/symbol/' file.txt\n\n# Number each line of a file, on left\nsed \u2018N; s/^/     /; s/ *(.{6,})n/1  /\u2018 file.txt\n\n# Cut all after 1 char of each line:\nsed -r 's/(.{1}).*/\\1/' file.txt\n\n# Delete line if N'th char is not matching exact symbol (\"r\"): \nsed -E '/^.{N}[^r]/d' file.txt\n\n# Delete all lines with specific length (by number of symbols in line, NUM):\ngrep -vE '^.{NUM}$' file.txt\n\n# Delete all lines longer than N characters in a line:\nsed '/^.\\{N\\}./d' file.txt\n\n# Cut characters in the end of line with pattern:\nsed -e '/pattern/s/.\\{NUM\\}$//' file.txt\n\n# Add line with timestamp to end of line with pattern\nsed ':a $!N;s/\\n2020/ 2020/;ta P;D' file.txt\n</code></pre>"},{"location":"variational-inference-nb/","title":"Variational Inference (NB)","text":"In\u00a0[1]: Copied! <pre># Imports\n%matplotlib inline\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\nimport tensorflow as tf\nfrom scipy.stats import expon, uniform\nimport arviz as az\nimport pymc3 as pm\nimport matplotlib.pyplot as plt\nimport tensorflow_probability as tfp\nfrom pprint import pprint\n\nplt.style.use(\"seaborn-darkgrid\")\n\nfrom tensorflow_probability.python.mcmc.transformed_kernel import (\n    make_transform_fn, make_transformed_log_prob)\n\ntfb = tfp.bijectors\ntfd = tfp.distributions\ndtype = tf.float32\n</pre> # Imports %matplotlib inline import numpy as np import scipy as sp import pandas as pd import tensorflow as tf from scipy.stats import expon, uniform import arviz as az import pymc3 as pm import matplotlib.pyplot as plt import tensorflow_probability as tfp from pprint import pprint  plt.style.use(\"seaborn-darkgrid\")  from tensorflow_probability.python.mcmc.transformed_kernel import (     make_transform_fn, make_transformed_log_prob)  tfb = tfp.bijectors tfd = tfp.distributions dtype = tf.float32 In\u00a0[2]: Copied! <pre># Plot functions\ndef plot_transformation(theta, zeta, p_theta, p_zeta):\n    fig, (const, trans) = plt.subplots(nrows=2, ncols=1, figsize=(6.5, 12))\n    const.plot(theta, p_theta, color='blue', lw=2)\n    const.set_xlabel(r\"$\\theta$\")\n    const.set_ylabel(r\"$P(\\theta)$\")\n    const.set_title(\"Constrained Space\")\n\n    trans.plot(zeta, p_zeta, color='blue', lw=2)\n    trans.set_xlabel(r\"$\\zeta$\")\n    trans.set_ylabel(r\"$P(\\zeta)$\")\n    trans.set_title(\"Transfomed Space\");\n</pre> # Plot functions def plot_transformation(theta, zeta, p_theta, p_zeta):     fig, (const, trans) = plt.subplots(nrows=2, ncols=1, figsize=(6.5, 12))     const.plot(theta, p_theta, color='blue', lw=2)     const.set_xlabel(r\"$\\theta$\")     const.set_ylabel(r\"$P(\\theta)$\")     const.set_title(\"Constrained Space\")      trans.plot(zeta, p_zeta, color='blue', lw=2)     trans.set_xlabel(r\"$\\zeta$\")     trans.set_ylabel(r\"$P(\\zeta)$\")     trans.set_title(\"Transfomed Space\");  In\u00a0[3]: Copied! <pre>theta = np.linspace(0, 5, 100)\nzeta = np.linspace(-5, 5, 100)\n\ndist = expon()\np_theta = dist.pdf(theta)\np_zeta = dist.pdf(np.exp(zeta)) * np.exp(zeta)\n\nplot_transformation(theta, zeta, p_theta, p_zeta)\n</pre> theta = np.linspace(0, 5, 100) zeta = np.linspace(-5, 5, 100)  dist = expon() p_theta = dist.pdf(theta) p_zeta = dist.pdf(np.exp(zeta)) * np.exp(zeta)  plot_transformation(theta, zeta, p_theta, p_zeta) In\u00a0[4]: Copied! <pre>theta = np.linspace(0, 1, 100)\nzeta = np.linspace(-5, 5, 100)\n\ndist = uniform()\np_theta = dist.pdf(theta)\nsigmoid = sp.special.expit\np_zeta = dist.pdf(sigmoid(zeta)) * sigmoid(zeta) * (1-sigmoid(zeta))\n\nplot_transformation(theta, zeta, p_theta, p_zeta)\n</pre> theta = np.linspace(0, 1, 100) zeta = np.linspace(-5, 5, 100)  dist = uniform() p_theta = dist.pdf(theta) sigmoid = sp.special.expit p_zeta = dist.pdf(sigmoid(zeta)) * sigmoid(zeta) * (1-sigmoid(zeta))  plot_transformation(theta, zeta, p_theta, p_zeta) In\u00a0[5]: Copied! <pre># Generating data\nmu = 12\nsigma = 2.2\ndata = np.random.normal(mu, sigma, size=200)\n</pre> # Generating data mu = 12 sigma = 2.2 data = np.random.normal(mu, sigma, size=200) In\u00a0[6]: Copied! <pre># Defining the model\nmodel = tfd.JointDistributionSequential([\n    # sigma_prior\n    tfd.Exponential(1, name='sigma'),                               \n\n    # mu_prior\n    tfd.Normal(loc=0, scale=10, name='mu'),\n\n    # likelihood\n    lambda mu, sigma: tfd.Normal(loc=mu, scale=sigma)\n])\n</pre> # Defining the model model = tfd.JointDistributionSequential([     # sigma_prior     tfd.Exponential(1, name='sigma'),                                     # mu_prior     tfd.Normal(loc=0, scale=10, name='mu'),      # likelihood     lambda mu, sigma: tfd.Normal(loc=mu, scale=sigma) ]) In\u00a0[7]: Copied! <pre>print(model.resolve_graph())\n</pre> print(model.resolve_graph()) <pre>(('sigma', ()), ('mu', ()), ('x', ('mu', 'sigma')))\n</pre> In\u00a0[8]: Copied! <pre># Let's generate joint log probability\njoint_log_prob = lambda *x: model.log_prob(x + (data,))\n</pre> # Let's generate joint log probability joint_log_prob = lambda *x: model.log_prob(x + (data,)) In\u00a0[9]: Copied! <pre># Build Mean Field ADVI\ndef build_mf_advi():\n    parameters = model.sample(1)\n    parameters.pop()\n    dists = []\n    for i, parameter in enumerate(parameters):\n        shape = parameter[0].shape\n        loc = tf.Variable(\n            tf.random.normal(shape, dtype=dtype),\n            name=f'meanfield_{i}_loc',\n            dtype=dtype\n        )\n        scale = tfp.util.TransformedVariable(\n            tf.fill(shape, value=tf.constant(0.02, dtype=dtype)),\n            tfb.Softplus(), # For positive values of scale\n            name=f'meanfield_{i}_scale'\n        )\n\n        approx_parameter = tfd.Normal(loc=loc, scale=scale)\n        dists.append(approx_parameter)\n    return tfd.JointDistributionSequential(dists)\n\nmeanfield_advi = build_mf_advi()\n</pre> # Build Mean Field ADVI def build_mf_advi():     parameters = model.sample(1)     parameters.pop()     dists = []     for i, parameter in enumerate(parameters):         shape = parameter[0].shape         loc = tf.Variable(             tf.random.normal(shape, dtype=dtype),             name=f'meanfield_{i}_loc',             dtype=dtype         )         scale = tfp.util.TransformedVariable(             tf.fill(shape, value=tf.constant(0.02, dtype=dtype)),             tfb.Softplus(), # For positive values of scale             name=f'meanfield_{i}_scale'         )          approx_parameter = tfd.Normal(loc=loc, scale=scale)         dists.append(approx_parameter)     return tfd.JointDistributionSequential(dists)  meanfield_advi = build_mf_advi() <p>TFP handles transformations differently as it transforms unconstrained space to match the support of distributions.</p> In\u00a0[10]: Copied! <pre>unconstraining_bijectors = [\n  tfb.Exp(),\n  tfb.Identity()\n]\n\nposterior = make_transformed_log_prob(\n    joint_log_prob,\n    unconstraining_bijectors,\n    direction='forward',\n    enable_bijector_caching=False\n)\n</pre> unconstraining_bijectors = [   tfb.Exp(),   tfb.Identity() ]  posterior = make_transformed_log_prob(     joint_log_prob,     unconstraining_bijectors,     direction='forward',     enable_bijector_caching=False ) In\u00a0[11]: Copied! <pre>opt = tf.optimizers.Adam(learning_rate=.1)\n\n@tf.function(autograph=False)\ndef run_approximation():\n    elbo_loss = tfp.vi.fit_surrogate_posterior(\n        posterior,\n        surrogate_posterior=meanfield_advi,\n        optimizer=opt,\n        sample_size=200,\n        num_steps=10000)\n    return elbo_loss\n\nelbo_loss = run_approximation()\n</pre> opt = tf.optimizers.Adam(learning_rate=.1)  @tf.function(autograph=False) def run_approximation():     elbo_loss = tfp.vi.fit_surrogate_posterior(         posterior,         surrogate_posterior=meanfield_advi,         optimizer=opt,         sample_size=200,         num_steps=10000)     return elbo_loss  elbo_loss = run_approximation() In\u00a0[12]: Copied! <pre>plt.plot(elbo_loss, color='blue')\nplt.xlabel(\"No of iterations\")\nplt.ylabel(\"Negative ELBO\")\nplt.show()\n</pre> plt.plot(elbo_loss, color='blue') plt.xlabel(\"No of iterations\") plt.ylabel(\"Negative ELBO\") plt.show() In\u00a0[13]: Copied! <pre>graph_info = model.resolve_graph()\napprox_param = dict()\nfree_param = meanfield_advi.trainable_variables\nfor i, (rvname, param) in enumerate(graph_info[:-1]):\n    approx_param[rvname] = {\"mu\": free_param[i*2].numpy(),\n                            \"sd\": free_param[i*2+1].numpy()}\n</pre> graph_info = model.resolve_graph() approx_param = dict() free_param = meanfield_advi.trainable_variables for i, (rvname, param) in enumerate(graph_info[:-1]):     approx_param[rvname] = {\"mu\": free_param[i*2].numpy(),                             \"sd\": free_param[i*2+1].numpy()} In\u00a0[14]: Copied! <pre>print(approx_param)\n</pre> print(approx_param) <pre>{'sigma': {'mu': 0.82331234, 'sd': -0.6924289}, 'mu': {'mu': 11.906398, 'sd': 1.6057507}}\n</pre> <p>We got pretty good estimates of sigma and mu. We need to transform sigma via exp and I believe it will be something close to 2.2</p>"},{"location":"variational-inference-nb/#variational-inference-nb","title":"Variational Inference (NB)\u00b6","text":""},{"location":"variational-inference-nb/#intro-to-bayesian-networks","title":"Intro to Bayesian Networks\u00b6","text":""},{"location":"variational-inference-nb/#random-variables","title":"Random Variables\u00b6","text":"<p>Random Variables are simply variables whose values are uncertain. Eg -</p> <ol> <li><p>In case of flipping a coin $n$ times, a random variable $X$ can be number of heads shown up.</p> </li> <li><p>In COVID-19 pandemic situation, random variable can be number of patients found positive with virus daily.</p> </li> </ol>"},{"location":"variational-inference-nb/#probability-distributions","title":"Probability Distributions\u00b6","text":"<p>Probability Distributions governs the amount of uncertainty of random variables. They have a math function with which they assign probabilities to different values taken by random variables. The associated math function is called probability density function (pdf). For simplicity, let's denote any random variable as $X$ and its corresponding pdf as $P\\left (X\\right )$. Eg - Following figure shows the probability distribution for number of heads when an unbiased coin is flipped 5 times.</p>"},{"location":"variational-inference-nb/#bayesian-networks","title":"Bayesian Networks\u00b6","text":"<p>Bayesian Networks are graph based representations to acccount for randomness while modelling our data. The nodes of the graph are random variables and the connections between nodes denote the direct influence from parent to child.</p>"},{"location":"variational-inference-nb/#bayesian-network-example","title":"Bayesian Network Example\u00b6","text":"<p>Let's say a student is taking a class during school. The <code>difficulty</code> of the class and the <code>intelligence</code> of the student together directly influence student's <code>grades</code>. And the <code>grades</code> affects his/her acceptance to the university. Also, the <code>intelligence</code> factor influences student's <code>SAT</code> score. Keep this example in mind.</p> <p>More formally, Bayesian Networks represent joint probability distribution over all the nodes of graph - $P\\left (X_1, X_2, X_3, ..., X_n\\right )$ or $P\\left (\\bigcap_{i=1}^{n}X_i\\right )$ where $X_i$ is a random variable. Also Bayesian Networks follow local Markov property by which every node in the graph is independent on its non-descendants given its parents. In this way, the joint probability distribution can be decomposed as -</p> <p>$$ P\\left (X_1, X_2, X_3, ..., X_n\\right ) = \\prod_{i=1}^{n} P\\left (X_i | Par\\left (X_i\\right )\\right ) $$</p> Extra: Proof of decomposition <p>First, let's recall conditional probability,     $$P\\left (A|B\\right ) = \\frac{P\\left (A, B\\right )}{P\\left (B\\right )}$$     The above equation is so derived because of reduction of sample space of $A$ when $B$ has already occured.     Now, adjusting terms -     $$P\\left (A, B\\right ) = P\\left (A|B\\right )*P\\left (B\\right )$$     This equation is called chain rule of probability. Let's generalize this rule for Bayesian Networks. The ordering of names of nodes is such that parent(s) of nodes lie above them (Breadth First Ordering).     $$P\\left (X_1, X_2, X_3, ..., X_n\\right ) = P\\left (X_n, X_{n-1}, X_{n-2}, ..., X_1\\right )\\\\     = P\\left (X_n|X_{n-1}, X_{n-2}, X_{n-3}, ..., X_1\\right ) * P \\left (X_{n-1}, X_{n-2}, X_{n-3}, ..., X_1\\right ) \\left (Chain Rule\\right )\\\\       = P\\left (X_n|X_{n-1}, X_{n-2}, X_{n-3}, ..., X_1\\right ) * P \\left (X_{n-1}|X_{n-2}, X_{n-3}, X_{n-4}, ..., X_1\\right ) * P \\left (X_{n-2}, X_{n-3}, X_{n-4}, ..., X_1\\right )$$     Applying chain rule repeatedly, we get the following equation -     $$P\\left (\\bigcap_{i=1}^{n}X_i\\right ) = \\prod_{i=1}^{n} P\\left (X_i | P\\left (\\bigcap_{j=1}^{i-1}X_j\\right )\\right )$$     Keep the above equation in mind. Let's bring back Markov property. To bring some intuition behind Markov property, let's reuse Bayesian Network Example. If we say, the student scored very good  grades, then it is highly likely the student gets  acceptance letter  to university. No matter how  difficult the class was, how much  intelligent  the student was, and no matter what his/her  SAT score was. The key thing to note here is by  observing the node's parent, the influence by  non-descendants towards the node gets eliminated. Now, the equation becomes -     $$P\\left (\\bigcap_{i=1}^{n}X_i\\right ) = \\prod_{i=1}^{n} P\\left (X_i | Par\\left (X_i\\right )\\right )$$     Bingo, with the above equation, we have proved  Factorization Theorem  in Probability.     </p> <p>The decomposition of running Bayesian Network Example can be written as -</p> <p>$$ P\\left (Difficulty, Intelligence, Grade, SAT, Acceptance Letter\\right ) = P\\left (Difficulty\\right )*P\\left (Intelligence\\right )*\\left (Grade|Difficulty, Intelligence\\right )*P\\left (SAT|Intelligence\\right )*P\\left (Acceptance Letter|Grade\\right ) $$</p>"},{"location":"variational-inference-nb/#why-care-about-bayesian-networks","title":"Why care about Bayesian Networks\u00b6","text":"<p>Bayesian Networks allow us to determine the distribution of parameters given the data (Posterior Distribution). The whole idea is to model the underlying data generative process and estimate unobservable quantities. Regarding this, Bayes formula can be written as -</p> <p>$$ P\\left (\\theta | D\\right ) = \\frac{P\\left (D|\\theta\\right ) * P\\left (\\theta\\right )}{P\\left (D\\right )} $$</p> <p>$\\theta$ = Parameters of the model</p> <p>$P\\left (\\theta\\right )$ = Prior Distribution over the parameters</p> <p>$P\\left (D|\\theta\\right )$ = Likelihood of the data</p> <p>$P\\left (\\theta|D\\right )$ = Posterior Distribution</p> <p>$P\\left (D\\right )$ = Probability of Data. This term is calculated by marginalising out the effect of parameters.</p> <p>$$ P\\left (D\\right ) = \\int P\\left (D, \\theta\\right ) d\\left (\\theta\\right )\\\\ P\\left (D\\right ) = \\int P\\left (D|\\theta\\right ) P\\left (\\theta\\right ) d\\left (\\theta\\right ) $$</p> <p>So, the Bayes formula becomes -</p> <p>$$ P\\left (\\theta | D\\right ) = \\frac{P\\left (D|\\theta\\right ) * P\\left (\\theta\\right )}{\\int P\\left (D|\\theta\\right ) P\\left (\\theta\\right ) d\\left (\\theta\\right )} $$</p> <p>The devil is in the denominator. The integration over all the parameters is intractable. So we resort to sampling and optimization techniques.</p>"},{"location":"variational-inference-nb/#intro-to-variational-inference","title":"Intro to Variational Inference\u00b6","text":""},{"location":"variational-inference-nb/#information","title":"Information\u00b6","text":"<p>Variational Inference has its origin in Information Theory. So first, let's understand the basic terms - Information and Entropy . Simply, Information quantifies how much useful the data is. It is related to Probability Distributions as -</p> <p>$$ I = -\\log \\left (P\\left (X\\right )\\right ) $$</p> <p>The negative sign in the formula has high intuitive meaning. In words, it signifies whenever the probability of certain events is high, the related information is less and vica versa. For example -</p> <ol> <li>Consider the statement - It never snows in deserts. The probability of this statement being true is significantly high because we already know that it is hardly possible to snow in deserts. So, the related information is very small.</li> <li>Now consider - There was a snowfall in Sahara Desert in late December 2019. Wow, thats a great news because some unlikely event occured (probability was less). In turn, the information is high.</li> </ol>"},{"location":"variational-inference-nb/#entropy","title":"Entropy\u00b6","text":"<p>Entropy quantifies how much average Information is present in occurence of events. It is denoted by $H$. It is named Differential Entropy in case of Real Continuous Domain.</p> <p>$$ H =  E_{P\\left (X\\right )} \\left [-\\log\\left (P\\left (X\\right )\\right )\\right ]\\\\ H = -\\int_X P_X\\left (x\\right ) \\log\\left (P_X\\left (x\\right )\\right ) dx $$</p>"},{"location":"variational-inference-nb/#entropy-of-normal-distribution","title":"Entropy of Normal Distribution\u00b6","text":"<p>As an exercise, let's calculate entropy of Normal Distribution. Let's denote $\\mu$ as mean nd $\\sigma$ as standard deviation of Normal Distribution. Remember the results, we will need them further.</p> <p>$$ X \\sim Normal\\left (\\mu, \\sigma^2\\right )\\\\ P_X\\left (x\\right ) = \\frac{1}{\\sigma \\sqrt{2 \\pi}} e^{ - \\frac{1}{2} \\left ({\\frac{x- \\mu}{ \\sigma}}\\right )^2}\\\\ H = -\\int_X P_X\\left (x\\right ) \\log\\left (P_X\\left (x\\right )\\right ) dx $$</p> <p>Only expanding $\\log\\left (P_X\\left (x\\right )\\right )$ -</p> <p>$$ H = -\\int_X P_X\\left (x\\right ) \\log\\left (\\frac{1}{\\sigma \\sqrt{2 \\pi}} e^{ - \\frac{1}{2} \\left ({\\frac{x- \\mu}{ \\sigma}}\\right )^2}\\right ) dx\\\\ H = -\\frac{1}{2}\\int_X P_X\\left (x\\right ) \\log\\left (\\frac{1}{2 \\pi {\\sigma}^2}\\right )dx  - \\int_X P_X\\left (x\\right ) \\log\\left (e^{ - \\frac{1}{2} \\left ({\\frac{x- \\mu}{ \\sigma}}\\right )^2}\\right ) dx\\\\ H = \\frac{1}{2}\\log \\left ( 2 \\pi {\\sigma}^2 \\right)\\int_X P_X\\left (x\\right ) dx  + \\frac{1}{2{\\sigma}^2} \\int_X \\left ( x-\\mu \\right)^2 P_X\\left (x\\right ) dx $$</p> <p>Identifying terms -</p> <p>$$ \\int_X P_X\\left (x\\right ) dx = 1\\\\ \\int_X \\left ( x-\\mu \\right)^2 P_X\\left (x\\right ) dx = \\sigma^2 $$</p> <p>Substituting back, the entropy becomes -</p> <p>$$ H = \\frac{1}{2}\\log \\left ( 2 \\pi {\\sigma}^2 \\right) + \\frac{1}{2\\sigma^2} \\sigma^2\\\\ H = \\frac{1}{2}\\left ( \\log \\left ( 2 \\pi {\\sigma}^2 \\right) + 1 \\right ) $$</p>"},{"location":"variational-inference-nb/#kl-divergence","title":"KL divergence\u00b6","text":"<p>This mathematical tool serves as the backbone of Variational Inference. Kullback\u2013Leibler (KL) divergence measures the mutual information between two probability distributions. Let's say, we have two probability distributions $P$ and $Q$, then KL divergence quantifies how much similar these distributions are. Mathematically, it is just the difference between entropies of probabilities distributions. In terms of notation, $KL(Q||P)$ represents KL divergence with respect to $Q$ against $P$.</p> <p>$$ KL(Q||P) = H_P - H_Q\\\\ = -\\int_X P_X\\left (x\\right ) \\log\\left (P_X\\left (x\\right )\\right ) dx + \\int_X Q_X\\left (x\\right ) \\log\\left (Q_X\\left (x\\right )\\right ) dx $$</p> <p>Changing $-\\int_X P_X\\left (x\\right ) \\log\\left (P_X\\left (x\\right )\\right ) dx$ to $-\\int_X Q_X\\left (x\\right ) \\log\\left (P_X\\left (x\\right )\\right ) dx$ as the KL divergence is with respect to $Q$.</p> <p>$$ = -\\int_X Q_X\\left (x\\right ) \\log\\left (P_X\\left (x\\right )\\right ) dx + \\int_X Q_X\\left (x\\right ) \\log\\left (Q_X\\left (x\\right )\\right ) dx\\\\ = \\int_X Q_X\\left (x \\right) \\log \\left( \\frac{Q_X\\left (x \\right)}{P_X\\left (x \\right)} \\right) dx $$</p> <p>Remember? We were stuck upon Bayesian Equation because of denominator term but now, we can estimate the posterior distribution $p(\\theta|D)$ by another distribution $q(\\theta)$ over all the parameters of the model.</p> <p>$$ KL(q(\\theta)||p(\\theta|D)) = \\int q(\\theta) \\log \\left( \\frac{q(\\theta)}{p(\\theta|D)} \\right) d\\theta\\\\ $$</p> <p>Note</p> <p>         If two distributions are similar, then their entropies are similar, implies the KL divergence with respect to two distributions will be smaller. And vica versa. In Variational Inference, the whole idea is to minimize KL divergence so that our approximating distribution $q(\\theta)$ can be made similar to $p(\\theta|D)$.     </p> Extra: What are latent variables? <p>     If you go about exploring any paper talking about Variational Inference, then most certainly, the papers mention about latent variables instead of parameters. The parameters are fixed quantities for the model whereas latent variables are  unobserved quantities of the model conditioned on parameters. Also, we model parameters by probability distributions. For simplicity, let's consider the running terminology of  parameters  only.     </p>"},{"location":"variational-inference-nb/#evidence-lower-bound","title":"Evidence Lower Bound\u00b6","text":"<p>There is again an issue with KL divergence formula as it still involves posterior term i.e. $p(\\theta|D)$. Let's get rid of it -</p> <p>$$ KL(q(\\theta)||p(\\theta|D)) = \\int q(\\theta) \\log \\left( \\frac{q(\\theta)}{p(\\theta|D)} \\right) d\\theta\\\\ KL = \\int q(\\theta) \\log \\left( \\frac{q(\\theta) p(D)}{p(\\theta, D)} \\right) d\\theta\\\\ KL = \\int q(\\theta) \\log \\left( \\frac{q(\\theta)}{p(\\theta, D)} \\right) d\\theta + \\int q(\\theta) \\log \\left(p(D) \\right) d\\theta\\\\ KL + \\int q(\\theta) \\log \\left( \\frac{p(\\theta, D)}{q(\\theta)} \\right) d\\theta = \\log \\left(p(D) \\right) \\int q(\\theta) d\\theta\\\\ $$</p> <p>Identifying terms -</p> <p>$$ \\int q(\\theta) d\\theta = 1 $$</p> <p>So, substituting back, our running equation becomes -</p> <p>$$ KL + \\int q(\\theta) \\log \\left( \\frac{p(\\theta, D)}{q(\\theta)} \\right) d\\theta = \\log \\left(p(D) \\right) $$</p> <p>The term $\\int q(\\theta) \\log \\left( \\frac{p(\\theta, D)}{q(\\theta)} \\right) d\\theta$ is called Evidence Lower Bound (ELBO). The right side of the equation $\\log \\left(p(D) \\right)$ is constant.</p> <p>Observe</p> <p> Minimizing the KL divergence is equivalent to maximizing the ELBO. Also, the ELBO does not depend on posterior distribution.     </p> <p>Also,</p> <p>$$ ELBO = \\int q(\\theta) \\log \\left( \\frac{p(\\theta, D)}{q(\\theta)} \\right) d\\theta\\\\ ELBO = E_{q(\\theta)}\\left [\\log \\left( \\frac{p(\\theta, D)}{q(\\theta)} \\right) \\right]\\\\ ELBO = E_{q(\\theta)}\\left [\\log \\left(p(\\theta, D) \\right) \\right] + E_{q(\\theta)} \\left [-\\log(q(\\theta)) \\right] $$</p> <p>The term $E_{q(\\theta)} \\left [-\\log(q(\\theta)) \\right]$ is entropy of $q(\\theta)$. Our running equation becomes -</p> <p>$$ ELBO = E_{q(\\theta)}\\left [\\log \\left(p(\\theta, D) \\right) \\right] + H_{q(\\theta)} $$</p>"},{"location":"variational-inference-nb/#mean-field-advi","title":"Mean Field ADVI\u00b6","text":"<p>So far, the whole crux of the story is - To approximate the posterior, maximize the ELBO term. ADVI = Automatic Differentiation Variational Inference. I think the term Automatic Differentiation deals with maximizing the ELBO (or minimizing the negative ELBO) using any autograd differentiation library. Coming to Mean Field ADVI (MF ADVI), we simply assume that the parameters of approximating distribution $q(\\theta)$ are independent and posit Normal distributions over all parameters in transformed space to maximize ELBO.</p>"},{"location":"variational-inference-nb/#transformed-space","title":"Transformed Space\u00b6","text":"<p>To freely optimize ELBO, without caring about matching the support of model parameters, we transform the support of parameters to Real Coordinate Space. In other words, we optimize ELBO in transformed/unconstrained/unbounded space which automatically maps to minimization of KL divergence in original space. In terms of notation, let's denote a transformation over parameters $\\theta$ as $T$ and the transformed parameters as $\\zeta$. Mathematically, $\\zeta=T(\\theta)$. Also, since we are approximating by Normal Distributions, $q(\\zeta)$ can be written as -</p> <p>$$ q(\\zeta) = \\prod_{i=1}^{k} N(\\zeta_k; \\mu_k, \\sigma^2_k) $$</p> <p>Now, the transformed joint probability distribution of the model becomes -</p> <p>$$ p\\left (D, \\zeta \\right) = p\\left (D, T^{-1}\\left (\\zeta \\right) \\right) \\left | det J_{T^{-1}}(\\zeta)  \\right |\\\\ $$</p> Extra: Proof of transformation equation <p>To simplify notations, let's use $Y=T(X)$ instead of $\\zeta=T(\\theta)$. After reaching the results, we will put the values back. Also, let's denote cummulative distribution function (cdf) as $F$. There are two cases which respect to properties of function $T$.Case 1 - When $T$ is an increasing function $$F_Y(y) = P(Y &lt;= y) = P(T(X) &lt;= y)\\\\     = P\\left(X &lt;= T^{-1}(y) \\right) = F_X\\left(T^{-1}(y) \\right)\\\\     F_Y(y) = F_X\\left(T^{-1}(y) \\right)$$Let's differentiate with respect to $y$ both sides - $$\\frac{\\mathrm{d} (F_Y(y))}{\\mathrm{d} y} = \\frac{\\mathrm{d} (F_X\\left(T^{-1}(y) \\right))}{\\mathrm{d} y}\\\\     P_Y(y) = P_X\\left(T^{-1}(y) \\right) \\frac{\\mathrm{d} (T^{-1}(y))}{\\mathrm{d} y}$$Case 2 - When $T$ is a descreasing function $$F_Y(y) = P(Y &lt;= y) = P(T(X) &lt;= y) = P\\left(X &gt;= T^{-1}(y) \\right)\\\\     = 1-P\\left(X &lt; T^{-1}(y) \\right) = 1-P\\left(X &lt;= T^{-1}(y) \\right) = 1-F_X\\left(T^{-1}(y) \\right)\\\\     F_Y(y) = 1-F_X\\left(T^{-1}(y) \\right)$$Let's differentiate with respect to $y$ both sides - $$\\frac{\\mathrm{d} (F_Y(y))}{\\mathrm{d} y} = \\frac{\\mathrm{d} (1-F_X\\left(T^{-1}(y) \\right))}{\\mathrm{d} y}\\\\     P_Y(y) = (-1) P_X\\left(T^{-1}(y) \\right) (-1) \\frac{\\mathrm{d} (T^{-1}(y))}{\\mathrm{d} y}\\\\     P_Y(y) = P_X\\left(T^{-1}(y) \\right) \\frac{\\mathrm{d} (T^{-1}(y))}{\\mathrm{d} y}$$Combining both results - $$P_Y(y) = P_X\\left(T^{-1}(y) \\right) \\left | \\frac{\\mathrm{d} (T^{-1}(y))}{\\mathrm{d} y} \\right |$$Now comes the role of Jacobians to deal with multivariate parameters $X$ and $Y$. $$J_{T^{-1}}(Y) = \\begin{vmatrix}     \\frac{\\partial (T_1^{-1})}{\\partial y_1} &amp; ... &amp; \\frac{\\partial (T_1^{-1})}{\\partial y_k}\\\\     . &amp;  &amp; .\\\\     . &amp;  &amp; .\\\\     \\frac{\\partial (T_k^{-1})}{\\partial y_1} &amp; ... &amp;\\frac{\\partial (T_k^{-1})}{\\partial y_k}     \\end{vmatrix}$$Concluding - $$P(Y) = P(T^{-1}(Y)) |det J_{T^{-1}}(Y)|\\\\P(Y) = P(X) |det J_{T^{-1}}(Y)|     $$Substitute $X$ as $\\theta$ and $Y$ as $\\zeta$, we will get - $$P(\\zeta) = P(T^{-1}(\\zeta)) |det J_{T^{-1}}(\\zeta)|\\\\$$     </p>"},{"location":"variational-inference-nb/#elbo-in-transformed-space","title":"ELBO in transformed Space\u00b6","text":"<p>Let's bring back the equation formed at ELBO. Expressing ELBO in terms of $\\zeta$ -</p> <p>$$ ELBO = E_{q(\\theta)}\\left [\\log \\left(p(\\theta, D) \\right) \\right] + H_{q(\\theta)}\\\\ ELBO = E_{q(\\zeta)}\\left [\\log \\left(p\\left (D, T^{-1}\\left (\\zeta \\right) \\right) \\left | det J_{T^{-1}}(\\zeta)  \\right | \\right) \\right] + H_{q(\\zeta)} $$</p> <p>Since, we are optimizing ELBO by factorized Normal Distributions, let's bring back the results of Entropy of Normal Distribution. Our running equation becomes -</p> <p>$$ ELBO = E_{q(\\zeta)}\\left [\\log \\left(p\\left (D, T^{-1}\\left (\\zeta \\right) \\right) \\left | det J_{T^{-1}}(\\zeta)  \\right | \\right) \\right] + H_{q(\\zeta)}\\\\ ELBO = E_{q(\\zeta)}\\left [\\log \\left(p\\left (D, T^{-1}\\left (\\zeta \\right) \\right) \\left | det J_{T^{-1}}(\\zeta)  \\right | \\right) \\right] + \\frac{1}{2}\\left ( \\log \\left ( 2 \\pi {\\sigma}^2 \\right) + 1 \\right ) $$</p> <p>Success</p> <p>         The above ELBO equation is the final one which needs to be optimized.     </p>"},{"location":"variational-inference-nb/#lets-code","title":"Let's Code\u00b6","text":""},{"location":"variational-inference-nb/#transformed-space-example-1","title":"Transformed Space Example-1\u00b6","text":"<p>Transformation of Standard Exponential Distribution</p> <p>$$ P_X(x) = e^{-x} $$</p> <p>The support of Exponential Distribution is $x&gt;=0$. Let's use log transformation  to map the support to real number line. Mathematically, $\\zeta=\\log(\\theta)$. Now, let's bring back our transformed joint probability distribution equation -</p> <p>$$ P(\\zeta) = P(T^{-1}(\\zeta)) |det J_{T^{-1}}(\\zeta)|\\\\ P(\\zeta) = P(e^{\\zeta}) * e^{\\zeta} $$</p> <p>Converting this directly into Python code -</p>"},{"location":"variational-inference-nb/#transformed-space-example-2","title":"Transformed Space Example-2\u00b6","text":"<p>Transformation of Uniform Distribution (with support $0&lt;=x&lt;=1$)</p> <p>$$ P_X(x) = 1 $$</p> <p>Let's use logit or inverse sigmoid transformation to map the support to real number line. Mathematically, $\\zeta=logit(\\theta)$.</p> <p>$$ P(\\zeta) = P(T^{-1}(\\zeta)) |det J_{T^{-1}}(\\zeta)|\\\\ P(\\zeta) = P(sig(\\zeta)) * sig(\\zeta) * (1-sig(\\zeta)) $$</p> <p>where $sig$ is the sigmoid function.</p> <p>Converting this directly into Python code -</p>"},{"location":"variational-inference-nb/#mean-field-advi-example","title":"Mean Field ADVI Example\u00b6","text":"<p>Infer $\\mu$ and $\\sigma$ for Normal distribution.</p>"},{"location":"variational-inference-nb/#drawbacks-of-this-blog-post","title":"Drawbacks of this blog post\u00b6","text":"<ol> <li>I have not used consistent notation for probability density functions (pdfs). Because I like equations handled this way.</li> <li>Coming up with more good examples using minibatches.</li> <li>The ADVI papers also mention Elliptical standardization and Adaptive step size for optimizers. I have not understood those sections well and thus, haven't tried to implement them.</li> </ol>"},{"location":"variational-inference-nb/#references","title":"References\u00b6","text":"<ul> <li>Chapter 1 and 2: Probabilistic Graphical Model Book</li> <li>Blog Post: An Introduction to Probability and Computational Bayesian Statistics by Ericmjl</li> <li>Section 10.1: Variational Inference Pattern Recognition and Machine Learning Book</li> <li>Section 2.5: Transformations Statistical Theory and Inference Book</li> <li>YouTube: Variational Inference in Python by Austin Rochford</li> <li>PyMC4: Basic Usage Notebook</li> <li>TFP: Joint Modelling Notebook</li> <li>Papers:<ul> <li>Automatic Differentiation Variational Inference. Kucukelbir, A., Tran, D., Ranganath, R., Gelman, A., and Blei, D. M. (2016).</li> <li>Automatic Variational Inference in Stan. Kucukelbir, A., Ranganath, R., Gelman, A., &amp; Blei, D. (2015).</li> </ul> </li> </ul>"},{"location":"variational-inference-nb/#special-thanks","title":"Special Thanks\u00b6","text":"<ul> <li>Website: codecogs.com to help me generate LaTeX equations.</li> <li>Comments: #1 and #2 by Luciano Paz that cleared my all doubts regarding transformations.</li> </ul>"},{"location":"variational-inference-script/","title":"Variational Inference (.py)","text":"In\u00a0[\u00a0]: Copied! <pre>from pprint import pprint\n</pre> from pprint import pprint In\u00a0[\u00a0]: Copied! <pre>import arviz as az\nimport matplotlib.pyplot as plt\n</pre> import arviz as az import matplotlib.pyplot as plt In\u00a0[\u00a0]: Copied! <pre># Imports\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport pymc3 as pm\nimport scipy as sp\nimport tensorflow as tf\nimport tensorflow_probability as tfp\nfrom scipy.stats import expon, uniform\n\nplt.style.use(\"seaborn-darkgrid\")\n\nfrom tensorflow_probability.python.mcmc.transformed_kernel import (\n    make_transform_fn,\n    make_transformed_log_prob,\n)\n\ntfb = tfp.bijectors\ntfd = tfp.distributions\ndtype = tf.float32\n</pre> # Imports %matplotlib inline import numpy as np import pandas as pd import pymc3 as pm import scipy as sp import tensorflow as tf import tensorflow_probability as tfp from scipy.stats import expon, uniform  plt.style.use(\"seaborn-darkgrid\")  from tensorflow_probability.python.mcmc.transformed_kernel import (     make_transform_fn,     make_transformed_log_prob, )  tfb = tfp.bijectors tfd = tfp.distributions dtype = tf.float32 In\u00a0[\u00a0]: Copied! <pre># Plot functions\ndef plot_transformation(theta, zeta, p_theta, p_zeta):\n    fig, (const, trans) = plt.subplots(nrows=2, ncols=1, figsize=(6.5, 12))\n    const.plot(theta, p_theta, color=\"blue\", lw=2)\n    const.set_xlabel(r\"$\\theta$\")\n    const.set_ylabel(r\"$P(\\theta)$\")\n    const.set_title(\"Constrained Space\")\n\n    trans.plot(zeta, p_zeta, color=\"blue\", lw=2)\n    trans.set_xlabel(r\"$\\zeta$\")\n    trans.set_ylabel(r\"$P(\\zeta)$\")\n    trans.set_title(\"Transfomed Space\")\n</pre> # Plot functions def plot_transformation(theta, zeta, p_theta, p_zeta):     fig, (const, trans) = plt.subplots(nrows=2, ncols=1, figsize=(6.5, 12))     const.plot(theta, p_theta, color=\"blue\", lw=2)     const.set_xlabel(r\"$\\theta$\")     const.set_ylabel(r\"$P(\\theta)$\")     const.set_title(\"Constrained Space\")      trans.plot(zeta, p_zeta, color=\"blue\", lw=2)     trans.set_xlabel(r\"$\\zeta$\")     trans.set_ylabel(r\"$P(\\zeta)$\")     trans.set_title(\"Transfomed Space\") In\u00a0[\u00a0]: Copied! <pre>theta = np.linspace(0, 5, 100)\nzeta = np.linspace(-5, 5, 100)\n\ndist = expon()\np_theta = dist.pdf(theta)\np_zeta = dist.pdf(np.exp(zeta)) * np.exp(zeta)\n\nplot_transformation(theta, zeta, p_theta, p_zeta)\n</pre> theta = np.linspace(0, 5, 100) zeta = np.linspace(-5, 5, 100)  dist = expon() p_theta = dist.pdf(theta) p_zeta = dist.pdf(np.exp(zeta)) * np.exp(zeta)  plot_transformation(theta, zeta, p_theta, p_zeta) In\u00a0[\u00a0]: Copied! <pre>theta = np.linspace(0, 1, 100)\nzeta = np.linspace(-5, 5, 100)\n\ndist = uniform()\np_theta = dist.pdf(theta)\nsigmoid = sp.special.expit\np_zeta = dist.pdf(sigmoid(zeta)) * sigmoid(zeta) * (1 - sigmoid(zeta))\n\nplot_transformation(theta, zeta, p_theta, p_zeta)\n</pre> theta = np.linspace(0, 1, 100) zeta = np.linspace(-5, 5, 100)  dist = uniform() p_theta = dist.pdf(theta) sigmoid = sp.special.expit p_zeta = dist.pdf(sigmoid(zeta)) * sigmoid(zeta) * (1 - sigmoid(zeta))  plot_transformation(theta, zeta, p_theta, p_zeta) In\u00a0[\u00a0]: Copied! <pre># Generating data\nmu = 12\nsigma = 2.2\ndata = np.random.normal(mu, sigma, size=200)\n</pre> # Generating data mu = 12 sigma = 2.2 data = np.random.normal(mu, sigma, size=200) In\u00a0[\u00a0]: Copied! <pre># Defining the model\nmodel = tfd.JointDistributionSequential(\n    [\n        # sigma_prior\n        tfd.Exponential(1, name=\"sigma\"),\n        # mu_prior\n        tfd.Normal(loc=0, scale=10, name=\"mu\"),\n        # likelihood\n        lambda mu, sigma: tfd.Normal(loc=mu, scale=sigma),\n    ]\n)\n</pre> # Defining the model model = tfd.JointDistributionSequential(     [         # sigma_prior         tfd.Exponential(1, name=\"sigma\"),         # mu_prior         tfd.Normal(loc=0, scale=10, name=\"mu\"),         # likelihood         lambda mu, sigma: tfd.Normal(loc=mu, scale=sigma),     ] ) In\u00a0[\u00a0]: Copied! <pre>print(model.resolve_graph())\n</pre> print(model.resolve_graph()) In\u00a0[\u00a0]: Copied! <pre># Let's generate joint log probability\njoint_log_prob = lambda *x: model.log_prob(x + (data,))\n</pre> # Let's generate joint log probability joint_log_prob = lambda *x: model.log_prob(x + (data,)) In\u00a0[\u00a0]: Copied! <pre># Build Mean Field ADVI\ndef build_mf_advi():\n    parameters = model.sample(1)\n    parameters.pop()\n    dists = []\n    for i, parameter in enumerate(parameters):\n        shape = parameter[0].shape\n        loc = tf.Variable(\n            tf.random.normal(shape, dtype=dtype),\n            name=f\"meanfield_{i}_loc\",\n            dtype=dtype,\n        )\n        scale = tfp.util.TransformedVariable(\n            tf.fill(shape, value=tf.constant(0.02, dtype=dtype)),\n            tfb.Softplus(),  # For positive values of scale\n            name=f\"meanfield_{i}_scale\",\n        )\n\n        approx_parameter = tfd.Normal(loc=loc, scale=scale)\n        dists.append(approx_parameter)\n    return tfd.JointDistributionSequential(dists)\n\n\nmeanfield_advi = build_mf_advi()\n</pre> # Build Mean Field ADVI def build_mf_advi():     parameters = model.sample(1)     parameters.pop()     dists = []     for i, parameter in enumerate(parameters):         shape = parameter[0].shape         loc = tf.Variable(             tf.random.normal(shape, dtype=dtype),             name=f\"meanfield_{i}_loc\",             dtype=dtype,         )         scale = tfp.util.TransformedVariable(             tf.fill(shape, value=tf.constant(0.02, dtype=dtype)),             tfb.Softplus(),  # For positive values of scale             name=f\"meanfield_{i}_scale\",         )          approx_parameter = tfd.Normal(loc=loc, scale=scale)         dists.append(approx_parameter)     return tfd.JointDistributionSequential(dists)   meanfield_advi = build_mf_advi() <p>TFP handles transformations differently as it transforms unconstrained space to match the support of distributions.</p> In\u00a0[\u00a0]: Copied! <pre>unconstraining_bijectors = [tfb.Exp(), tfb.Identity()]\n\nposterior = make_transformed_log_prob(\n    joint_log_prob,\n    unconstraining_bijectors,\n    direction=\"forward\",\n    enable_bijector_caching=False,\n)\n</pre> unconstraining_bijectors = [tfb.Exp(), tfb.Identity()]  posterior = make_transformed_log_prob(     joint_log_prob,     unconstraining_bijectors,     direction=\"forward\",     enable_bijector_caching=False, ) In\u00a0[\u00a0]: Copied! <pre>opt = tf.optimizers.Adam(learning_rate=0.1)\n\n\n@tf.function(autograph=False)\ndef run_approximation():\n    elbo_loss = tfp.vi.fit_surrogate_posterior(\n        posterior,\n        surrogate_posterior=meanfield_advi,\n        optimizer=opt,\n        sample_size=200,\n        num_steps=10000,\n    )\n    return elbo_loss\n\n\nelbo_loss = run_approximation()\n</pre> opt = tf.optimizers.Adam(learning_rate=0.1)   @tf.function(autograph=False) def run_approximation():     elbo_loss = tfp.vi.fit_surrogate_posterior(         posterior,         surrogate_posterior=meanfield_advi,         optimizer=opt,         sample_size=200,         num_steps=10000,     )     return elbo_loss   elbo_loss = run_approximation() In\u00a0[\u00a0]: Copied! <pre>plt.plot(elbo_loss, color=\"blue\")\nplt.xlabel(\"No of iterations\")\nplt.ylabel(\"Negative ELBO\")\nplt.show()\n</pre> plt.plot(elbo_loss, color=\"blue\") plt.xlabel(\"No of iterations\") plt.ylabel(\"Negative ELBO\") plt.show() In\u00a0[\u00a0]: Copied! <pre>graph_info = model.resolve_graph()\napprox_param = dict()\nfree_param = meanfield_advi.trainable_variables\nfor i, (rvname, param) in enumerate(graph_info[:-1]):\n    approx_param[rvname] = {\n        \"mu\": free_param[i * 2].numpy(),\n        \"sd\": free_param[i * 2 + 1].numpy(),\n    }\n</pre> graph_info = model.resolve_graph() approx_param = dict() free_param = meanfield_advi.trainable_variables for i, (rvname, param) in enumerate(graph_info[:-1]):     approx_param[rvname] = {         \"mu\": free_param[i * 2].numpy(),         \"sd\": free_param[i * 2 + 1].numpy(),     } In\u00a0[\u00a0]: Copied! <pre>print(approx_param)\n</pre> print(approx_param) <p>We got pretty good estimates of sigma and mu. We need to transform sigma via exp and I believe it will be something close to 2.2</p>"},{"location":"variational-inference-script/#variational-inference-py","title":"Variational Inference (.py)\u00b6","text":""},{"location":"variational-inference-script/#intro-to-bayesian-networks","title":"Intro to Bayesian Networks\u00b6","text":""},{"location":"variational-inference-script/#random-variables","title":"Random Variables\u00b6","text":"<p>Random Variables are simply variables whose values are uncertain. Eg -</p> <ol> <li><p>In case of flipping a coin $n$ times, a random variable $X$ can be number of heads shown up.</p> </li> <li><p>In COVID-19 pandemic situation, random variable can be number of patients found positive with virus daily.</p> </li> </ol>"},{"location":"variational-inference-script/#probability-distributions","title":"Probability Distributions\u00b6","text":"<p>Probability Distributions governs the amount of uncertainty of random variables. They have a math function with which they assign probabilities to different values taken by random variables. The associated math function is called probability density function (pdf). For simplicity, let's denote any random variable as $X$ and its corresponding pdf as $P\\left (X\\right )$. Eg - Following figure shows the probability distribution for number of heads when an unbiased coin is flipped 5 times.</p>"},{"location":"variational-inference-script/#bayesian-networks","title":"Bayesian Networks\u00b6","text":"<p>Bayesian Networks are graph based representations to acccount for randomness while modelling our data. The nodes of the graph are random variables and the connections between nodes denote the direct influence from parent to child.</p>"},{"location":"variational-inference-script/#bayesian-network-example","title":"Bayesian Network Example\u00b6","text":"<p>Let's say a student is taking a class during school. The <code>difficulty</code> of the class and the <code>intelligence</code> of the student together directly influence student's <code>grades</code>. And the <code>grades</code> affects his/her acceptance to the university. Also, the <code>intelligence</code> factor influences student's <code>SAT</code> score. Keep this example in mind.</p> <p>More formally, Bayesian Networks represent joint probability distribution over all the nodes of graph - $P\\left (X_1, X_2, X_3, ..., X_n\\right )$ or $P\\left (\\bigcap_{i=1}^{n}X_i\\right )$ where $X_i$ is a random variable. Also Bayesian Networks follow local Markov property by which every node in the graph is independent on its non-descendants given its parents. In this way, the joint probability distribution can be decomposed as -</p> <p>$$ P\\left (X_1, X_2, X_3, ..., X_n\\right ) = \\prod_{i=1}^{n} P\\left (X_i | Par\\left (X_i\\right )\\right ) $$</p> Extra: Proof of decomposition <p>First, let's recall conditional probability,     $$P\\left (A|B\\right ) = \\frac{P\\left (A, B\\right )}{P\\left (B\\right )}$$     The above equation is so derived because of reduction of sample space of $A$ when $B$ has already occured.     Now, adjusting terms -     $$P\\left (A, B\\right ) = P\\left (A|B\\right )*P\\left (B\\right )$$     This equation is called chain rule of probability. Let's generalize this rule for Bayesian Networks. The ordering of names of nodes is such that parent(s) of nodes lie above them (Breadth First Ordering).     $$P\\left (X_1, X_2, X_3, ..., X_n\\right ) = P\\left (X_n, X_{n-1}, X_{n-2}, ..., X_1\\right )\\\\     = P\\left (X_n|X_{n-1}, X_{n-2}, X_{n-3}, ..., X_1\\right ) * P \\left (X_{n-1}, X_{n-2}, X_{n-3}, ..., X_1\\right ) \\left (Chain Rule\\right )\\\\     = P\\left (X_n|X_{n-1}, X_{n-2}, X_{n-3}, ..., X_1\\right ) * P \\left (X_{n-1}|X_{n-2}, X_{n-3}, X_{n-4}, ..., X_1\\right ) * P \\left (X_{n-2}, X_{n-3}, X_{n-4}, ..., X_1\\right )$$     Applying chain rule repeatedly, we get the following equation -     $$P\\left (\\bigcap_{i=1}^{n}X_i\\right ) = \\prod_{i=1}^{n} P\\left (X_i | P\\left (\\bigcap_{j=1}^{i-1}X_j\\right )\\right )$$     Keep the above equation in mind. Let's bring back Markov property. To bring some intuition behind Markov property, let's reuse Bayesian Network Example. If we say, the student scored very good  grades, then it is highly likely the student gets  acceptance letter  to university. No matter how  difficult the class was, how much  intelligent  the student was, and no matter what his/her  SAT score was. The key thing to note here is by  observing the node's parent, the influence by  non-descendants towards the node gets eliminated. Now, the equation becomes -     $$P\\left (\\bigcap_{i=1}^{n}X_i\\right ) = \\prod_{i=1}^{n} P\\left (X_i | Par\\left (X_i\\right )\\right )$$     Bingo, with the above equation, we have proved  Factorization Theorem  in Probability.     </p> <p>The decomposition of running Bayesian Network Example can be written as -</p> <p>$$ P\\left (Difficulty, Intelligence, Grade, SAT, Acceptance Letter\\right ) = P\\left (Difficulty\\right )*P\\left (Intelligence\\right )*\\left (Grade|Difficulty, Intelligence\\right )*P\\left (SAT|Intelligence\\right )*P\\left (Acceptance Letter|Grade\\right ) $$</p>"},{"location":"variational-inference-script/#why-care-about-bayesian-networks","title":"Why care about Bayesian Networks\u00b6","text":"<p>Bayesian Networks allow us to determine the distribution of parameters given the data (Posterior Distribution). The whole idea is to model the underlying data generative process and estimate unobservable quantities. Regarding this, Bayes formula can be written as -</p> <p>$$ P\\left (\\theta | D\\right ) = \\frac{P\\left (D|\\theta\\right ) * P\\left (\\theta\\right )}{P\\left (D\\right )} $$</p> <p>$\\theta$ = Parameters of the model</p> <p>$P\\left (\\theta\\right )$ = Prior Distribution over the parameters</p> <p>$P\\left (D|\\theta\\right )$ = Likelihood of the data</p> <p>$P\\left (\\theta|D\\right )$ = Posterior Distribution</p> <p>$P\\left (D\\right )$ = Probability of Data. This term is calculated by marginalising out the effect of parameters.</p> <p>$$ P\\left (D\\right ) = \\int P\\left (D, \\theta\\right ) d\\left (\\theta\\right )\\\\ P\\left (D\\right ) = \\int P\\left (D|\\theta\\right ) P\\left (\\theta\\right ) d\\left (\\theta\\right ) $$</p> <p>So, the Bayes formula becomes -</p> <p>$$ P\\left (\\theta | D\\right ) = \\frac{P\\left (D|\\theta\\right ) * P\\left (\\theta\\right )}{\\int P\\left (D|\\theta\\right ) P\\left (\\theta\\right ) d\\left (\\theta\\right )} $$</p> <p>The devil is in the denominator. The integration over all the parameters is intractable. So we resort to sampling and optimization techniques.</p>"},{"location":"variational-inference-script/#intro-to-variational-inference","title":"Intro to Variational Inference\u00b6","text":""},{"location":"variational-inference-script/#information","title":"Information\u00b6","text":"<p>Variational Inference has its origin in Information Theory. So first, let's understand the basic terms - Information and Entropy . Simply, Information quantifies how much useful the data is. It is related to Probability Distributions as -</p> <p>$$ I = -\\log \\left (P\\left (X\\right )\\right ) $$</p> <p>The negative sign in the formula has high intuitive meaning. In words, it signifies whenever the probability of certain events is high, the related information is less and vica versa. For example -</p> <ol> <li>Consider the statement - It never snows in deserts. The probability of this statement being true is significantly high because we already know that it is hardly possible to snow in deserts. So, the related information is very small.</li> <li>Now consider - There was a snowfall in Sahara Desert in late December 2019. Wow, thats a great news because some unlikely event occured (probability was less). In turn, the information is high.</li> </ol>"},{"location":"variational-inference-script/#entropy","title":"Entropy\u00b6","text":"<p>Entropy quantifies how much average Information is present in occurence of events. It is denoted by $H$. It is named Differential Entropy in case of Real Continuous Domain.</p> <p>$$ H =  E_{P\\left (X\\right )} \\left [-\\log\\left (P\\left (X\\right )\\right )\\right ]\\\\ H = -\\int_X P_X\\left (x\\right ) \\log\\left (P_X\\left (x\\right )\\right ) dx $$</p>"},{"location":"variational-inference-script/#entropy-of-normal-distribution","title":"Entropy of Normal Distribution\u00b6","text":"<p>As an exercise, let's calculate entropy of Normal Distribution. Let's denote $\\mu$ as mean nd $\\sigma$ as standard deviation of Normal Distribution. Remember the results, we will need them further.</p> <p>$$ X \\sim Normal\\left (\\mu, \\sigma^2\\right )\\\\ P_X\\left (x\\right ) = \\frac{1}{\\sigma \\sqrt{2 \\pi}} e^{ - \\frac{1}{2} \\left ({\\frac{x- \\mu}{ \\sigma}}\\right )^2}\\\\ H = -\\int_X P_X\\left (x\\right ) \\log\\left (P_X\\left (x\\right )\\right ) dx $$</p> <p>Only expanding $\\log\\left (P_X\\left (x\\right )\\right )$ -</p> <p>$$ H = -\\int_X P_X\\left (x\\right ) \\log\\left (\\frac{1}{\\sigma \\sqrt{2 \\pi}} e^{ - \\frac{1}{2} \\left ({\\frac{x- \\mu}{ \\sigma}}\\right )^2}\\right ) dx\\\\ H = -\\frac{1}{2}\\int_X P_X\\left (x\\right ) \\log\\left (\\frac{1}{2 \\pi {\\sigma}^2}\\right )dx  - \\int_X P_X\\left (x\\right ) \\log\\left (e^{ - \\frac{1}{2} \\left ({\\frac{x- \\mu}{ \\sigma}}\\right )^2}\\right ) dx\\\\ H = \\frac{1}{2}\\log \\left ( 2 \\pi {\\sigma}^2 \\right)\\int_X P_X\\left (x\\right ) dx  + \\frac{1}{2{\\sigma}^2} \\int_X \\left ( x-\\mu \\right)^2 P_X\\left (x\\right ) dx $$</p> <p>Identifying terms -</p> <p>$$ \\int_X P_X\\left (x\\right ) dx = 1\\\\ \\int_X \\left ( x-\\mu \\right)^2 P_X\\left (x\\right ) dx = \\sigma^2 $$</p> <p>Substituting back, the entropy becomes -</p> <p>$$ H = \\frac{1}{2}\\log \\left ( 2 \\pi {\\sigma}^2 \\right) + \\frac{1}{2\\sigma^2} \\sigma^2\\\\ H = \\frac{1}{2}\\left ( \\log \\left ( 2 \\pi {\\sigma}^2 \\right) + 1 \\right ) $$</p>"},{"location":"variational-inference-script/#kl-divergence","title":"KL divergence\u00b6","text":"<p>This mathematical tool serves as the backbone of Variational Inference. Kullback\u2013Leibler (KL) divergence measures the mutual information between two probability distributions. Let's say, we have two probability distributions $P$ and $Q$, then KL divergence quantifies how much similar these distributions are. Mathematically, it is just the difference between entropies of probabilities distributions. In terms of notation, $KL(Q||P)$ represents KL divergence with respect to $Q$ against $P$.</p> <p>$$ KL(Q||P) = H_P - H_Q\\\\ = -\\int_X P_X\\left (x\\right ) \\log\\left (P_X\\left (x\\right )\\right ) dx + \\int_X Q_X\\left (x\\right ) \\log\\left (Q_X\\left (x\\right )\\right ) dx $$</p> <p>Changing $-\\int_X P_X\\left (x\\right ) \\log\\left (P_X\\left (x\\right )\\right ) dx$ to $-\\int_X Q_X\\left (x\\right ) \\log\\left (P_X\\left (x\\right )\\right ) dx$ as the KL divergence is with respect to $Q$.</p> <p>$$ = -\\int_X Q_X\\left (x\\right ) \\log\\left (P_X\\left (x\\right )\\right ) dx + \\int_X Q_X\\left (x\\right ) \\log\\left (Q_X\\left (x\\right )\\right ) dx\\\\ = \\int_X Q_X\\left (x \\right) \\log \\left( \\frac{Q_X\\left (x \\right)}{P_X\\left (x \\right)} \\right) dx $$</p> <p>Remember? We were stuck upon Bayesian Equation because of denominator term but now, we can estimate the posterior distribution $p(\\theta|D)$ by another distribution $q(\\theta)$ over all the parameters of the model.</p> <p>$$ KL(q(\\theta)||p(\\theta|D)) = \\int q(\\theta) \\log \\left( \\frac{q(\\theta)}{p(\\theta|D)} \\right) d\\theta\\\\ $$</p> <p>Note</p> <p>         If two distributions are similar, then their entropies are similar, implies the KL divergence with respect to two distributions will be smaller. And vica versa. In Variational Inference, the whole idea is to minimize KL divergence so that our approximating distribution $q(\\theta)$ can be made similar to $p(\\theta|D)$.     </p> Extra: What are latent variables? <p>     If you go about exploring any paper talking about Variational Inference, then most certainly, the papers mention about latent variables instead of parameters. The parameters are fixed quantities for the model whereas latent variables are  unobserved quantities of the model conditioned on parameters. Also, we model parameters by probability distributions. For simplicity, let's consider the running terminology of  parameters  only.     </p>"},{"location":"variational-inference-script/#evidence-lower-bound","title":"Evidence Lower Bound\u00b6","text":"<p>There is again an issue with KL divergence formula as it still involves posterior term i.e. $p(\\theta|D)$. Let's get rid of it -</p> <p>$$ KL(q(\\theta)||p(\\theta|D)) = \\int q(\\theta) \\log \\left( \\frac{q(\\theta)}{p(\\theta|D)} \\right) d\\theta\\\\ KL = \\int q(\\theta) \\log \\left( \\frac{q(\\theta) p(D)}{p(\\theta, D)} \\right) d\\theta\\\\ KL = \\int q(\\theta) \\log \\left( \\frac{q(\\theta)}{p(\\theta, D)} \\right) d\\theta + \\int q(\\theta) \\log \\left(p(D) \\right) d\\theta\\\\ KL + \\int q(\\theta) \\log \\left( \\frac{p(\\theta, D)}{q(\\theta)} \\right) d\\theta = \\log \\left(p(D) \\right) \\int q(\\theta) d\\theta\\\\ $$</p> <p>Identifying terms -</p> <p>$$ \\int q(\\theta) d\\theta = 1 $$</p> <p>So, substituting back, our running equation becomes -</p> <p>$$ KL + \\int q(\\theta) \\log \\left( \\frac{p(\\theta, D)}{q(\\theta)} \\right) d\\theta = \\log \\left(p(D) \\right) $$</p> <p>The term $\\int q(\\theta) \\log \\left( \\frac{p(\\theta, D)}{q(\\theta)} \\right) d\\theta$ is called Evidence Lower Bound (ELBO). The right side of the equation $\\log \\left(p(D) \\right)$ is constant.</p> <p>Observe</p> <p> Minimizing the KL divergence is equivalent to maximizing the ELBO. Also, the ELBO does not depend on posterior distribution.     </p> <p>Also,</p> <p>$$ ELBO = \\int q(\\theta) \\log \\left( \\frac{p(\\theta, D)}{q(\\theta)} \\right) d\\theta\\\\ ELBO = E_{q(\\theta)}\\left [\\log \\left( \\frac{p(\\theta, D)}{q(\\theta)} \\right) \\right]\\\\ ELBO = E_{q(\\theta)}\\left [\\log \\left(p(\\theta, D) \\right) \\right] + E_{q(\\theta)} \\left [-\\log(q(\\theta)) \\right] $$</p> <p>The term $E_{q(\\theta)} \\left [-\\log(q(\\theta)) \\right]$ is entropy of $q(\\theta)$. Our running equation becomes -</p> <p>$$ ELBO = E_{q(\\theta)}\\left [\\log \\left(p(\\theta, D) \\right) \\right] + H_{q(\\theta)} $$</p>"},{"location":"variational-inference-script/#mean-field-advi","title":"Mean Field ADVI\u00b6","text":"<p>So far, the whole crux of the story is - To approximate the posterior, maximize the ELBO term. ADVI = Automatic Differentiation Variational Inference. I think the term Automatic Differentiation deals with maximizing the ELBO (or minimizing the negative ELBO) using any autograd differentiation library. Coming to Mean Field ADVI (MF ADVI), we simply assume that the parameters of approximating distribution $q(\\theta)$ are independent and posit Normal distributions over all parameters in transformed space to maximize ELBO.</p>"},{"location":"variational-inference-script/#transformed-space","title":"Transformed Space\u00b6","text":"<p>To freely optimize ELBO, without caring about matching the support of model parameters, we transform the support of parameters to Real Coordinate Space. In other words, we optimize ELBO in transformed/unconstrained/unbounded space which automatically maps to minimization of KL divergence in original space. In terms of notation, let's denote a transformation over parameters $\\theta$ as $T$ and the transformed parameters as $\\zeta$. Mathematically, $\\zeta=T(\\theta)$. Also, since we are approximating by Normal Distributions, $q(\\zeta)$ can be written as -</p> <p>$$ q(\\zeta) = \\prod_{i=1}^{k} N(\\zeta_k; \\mu_k, \\sigma^2_k) $$</p> <p>Now, the transformed joint probability distribution of the model becomes -</p> <p>$$ p\\left (D, \\zeta \\right) = p\\left (D, T^{-1}\\left (\\zeta \\right) \\right) \\left | det J_{T^{-1}}(\\zeta)  \\right |\\\\ $$</p> Extra: Proof of transformation equation <p>To simplify notations, let's use $Y=T(X)$ instead of $\\zeta=T(\\theta)$. After reaching the results, we will put the values back. Also, let's denote cummulative distribution function (cdf) as $F$. There are two cases which respect to properties of function $T$.Case 1 - When $T$ is an increasing function $$F_Y(y) = P(Y &lt;= y) = P(T(X) &lt;= y)\\\\     = P\\left(X &lt;= T^{-1}(y) \\right) = F_X\\left(T^{-1}(y) \\right)\\\\     F_Y(y) = F_X\\left(T^{-1}(y) \\right)$$Let's differentiate with respect to $y$ both sides - $$\\frac{\\mathrm{d} (F_Y(y))}{\\mathrm{d} y} = \\frac{\\mathrm{d} (F_X\\left(T^{-1}(y) \\right))}{\\mathrm{d} y}\\\\     P_Y(y) = P_X\\left(T^{-1}(y) \\right) \\frac{\\mathrm{d} (T^{-1}(y))}{\\mathrm{d} y}$$Case 2 - When $T$ is a descreasing function $$F_Y(y) = P(Y &lt;= y) = P(T(X) &lt;= y) = P\\left(X &gt;= T^{-1}(y) \\right)\\\\     = 1-P\\left(X &lt; T^{-1}(y) \\right) = 1-P\\left(X &lt;= T^{-1}(y) \\right) = 1-F_X\\left(T^{-1}(y) \\right)\\\\     F_Y(y) = 1-F_X\\left(T^{-1}(y) \\right)$$Let's differentiate with respect to $y$ both sides - $$\\frac{\\mathrm{d} (F_Y(y))}{\\mathrm{d} y} = \\frac{\\mathrm{d} (1-F_X\\left(T^{-1}(y) \\right))}{\\mathrm{d} y}\\\\     P_Y(y) = (-1) P_X\\left(T^{-1}(y) \\right) (-1) \\frac{\\mathrm{d} (T^{-1}(y))}{\\mathrm{d} y}\\\\     P_Y(y) = P_X\\left(T^{-1}(y) \\right) \\frac{\\mathrm{d} (T^{-1}(y))}{\\mathrm{d} y}$$Combining both results - $$P_Y(y) = P_X\\left(T^{-1}(y) \\right) \\left | \\frac{\\mathrm{d} (T^{-1}(y))}{\\mathrm{d} y} \\right |$$Now comes the role of Jacobians to deal with multivariate parameters $X$ and $Y$. $$J_{T^{-1}}(Y) = \\begin{vmatrix}     \\frac{\\partial (T_1^{-1})}{\\partial y_1} &amp; ... &amp; \\frac{\\partial (T_1^{-1})}{\\partial y_k}\\\\     . &amp;  &amp; .\\\\     . &amp;  &amp; .\\\\     \\frac{\\partial (T_k^{-1})}{\\partial y_1} &amp; ... &amp;\\frac{\\partial (T_k^{-1})}{\\partial y_k}     \\end{vmatrix}$$Concluding - $$P(Y) = P(T^{-1}(Y)) |det J_{T^{-1}}(Y)|\\\\P(Y) = P(X) |det J_{T^{-1}}(Y)|     $$Substitute $X$ as $\\theta$ and $Y$ as $\\zeta$, we will get - $$P(\\zeta) = P(T^{-1}(\\zeta)) |det J_{T^{-1}}(\\zeta)|\\\\$$     </p>"},{"location":"variational-inference-script/#elbo-in-transformed-space","title":"ELBO in transformed Space\u00b6","text":"<p>Let's bring back the equation formed at ELBO. Expressing ELBO in terms of $\\zeta$ -</p> <p>$$ ELBO = E_{q(\\theta)}\\left [\\log \\left(p(\\theta, D) \\right) \\right] + H_{q(\\theta)}\\\\ ELBO = E_{q(\\zeta)}\\left [\\log \\left(p\\left (D, T^{-1}\\left (\\zeta \\right) \\right) \\left | det J_{T^{-1}}(\\zeta)  \\right | \\right) \\right] + H_{q(\\zeta)} $$</p> <p>Since, we are optimizing ELBO by factorized Normal Distributions, let's bring back the results of Entropy of Normal Distribution. Our running equation becomes -</p> <p>$$ ELBO = E_{q(\\zeta)}\\left [\\log \\left(p\\left (D, T^{-1}\\left (\\zeta \\right) \\right) \\left | det J_{T^{-1}}(\\zeta)  \\right | \\right) \\right] + H_{q(\\zeta)}\\\\ ELBO = E_{q(\\zeta)}\\left [\\log \\left(p\\left (D, T^{-1}\\left (\\zeta \\right) \\right) \\left | det J_{T^{-1}}(\\zeta)  \\right | \\right) \\right] + \\frac{1}{2}\\left ( \\log \\left ( 2 \\pi {\\sigma}^2 \\right) + 1 \\right ) $$</p> <p>Success</p> <p>         The above ELBO equation is the final one which needs to be optimized.     </p>"},{"location":"variational-inference-script/#lets-code","title":"Let's Code\u00b6","text":""},{"location":"variational-inference-script/#transformed-space-example-1","title":"Transformed Space Example-1\u00b6","text":"<p>Transformation of Standard Exponential Distribution</p> <p>$$ P_X(x) = e^{-x} $$</p> <p>The support of Exponential Distribution is $x&gt;=0$. Let's use log transformation  to map the support to real number line. Mathematically, $\\zeta=\\log(\\theta)$. Now, let's bring back our transformed joint probability distribution equation -</p> <p>$$ P(\\zeta) = P(T^{-1}(\\zeta)) |det J_{T^{-1}}(\\zeta)|\\\\ P(\\zeta) = P(e^{\\zeta}) * e^{\\zeta} $$</p> <p>Converting this directly into Python code -</p>"},{"location":"variational-inference-script/#transformed-space-example-2","title":"Transformed Space Example-2\u00b6","text":"<p>Transformation of Uniform Distribution (with support $0&lt;=x&lt;=1$)</p> <p>$$ P_X(x) = 1 $$</p> <p>Let's use logit or inverse sigmoid transformation to map the support to real number line. Mathematically, $\\zeta=logit(\\theta)$.</p> <p>$$ P(\\zeta) = P(T^{-1}(\\zeta)) |det J_{T^{-1}}(\\zeta)|\\\\ P(\\zeta) = P(sig(\\zeta)) * sig(\\zeta) * (1-sig(\\zeta)) $$</p> <p>where $sig$ is the sigmoid function.</p> <p>Converting this directly into Python code -</p>"},{"location":"variational-inference-script/#mean-field-advi-example","title":"Mean Field ADVI Example\u00b6","text":"<p>Infer $\\mu$ and $\\sigma$ for Normal distribution.</p>"},{"location":"variational-inference-script/#drawbacks-of-this-blog-post","title":"Drawbacks of this blog post\u00b6","text":"<ol> <li>I have not used consistent notation for probability density functions (pdfs). Because I like equations handled this way.</li> <li>Coming up with more good examples using minibatches.</li> <li>The ADVI papers also mention Elliptical standardization and Adaptive step size for optimizers. I have not understood those sections well and thus, haven't tried to implement them.</li> </ol>"},{"location":"variational-inference-script/#references","title":"References\u00b6","text":"<ul> <li>Chapter 1 and 2: Probabilistic Graphical Model Book</li> <li>Blog Post: An Introduction to Probability and Computational Bayesian Statistics by Ericmjl</li> <li>Section 10.1: Variational Inference Pattern Recognition and Machine Learning Book</li> <li>Section 2.5: Transformations Statistical Theory and Inference Book</li> <li>YouTube: Variational Inference in Python by Austin Rochford</li> <li>PyMC4: Basic Usage Notebook</li> <li>TFP: Joint Modelling Notebook</li> <li>Papers:<ul> <li>Automatic Differentiation Variational Inference. Kucukelbir, A., Tran, D., Ranganath, R., Gelman, A., and Blei, D. M. (2016).</li> <li>Automatic Variational Inference in Stan. Kucukelbir, A., Ranganath, R., Gelman, A., &amp; Blei, D. (2015).</li> </ul> </li> </ul>"},{"location":"variational-inference-script/#special-thanks","title":"Special Thanks\u00b6","text":"<ul> <li>Website: codecogs.com to help me generate LaTeX equations.</li> <li>Comments: #1 and #2 by Luciano Paz that cleared my all doubts regarding transformations.</li> </ul>"}]}